// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTPolygonAnnotationMessager {

  public enum FillTranslateAnchor {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private FillTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PolygonAnnotation {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable Double fillSortKey;
    public @Nullable Double getFillSortKey() { return fillSortKey; }
    public void setFillSortKey(@Nullable Double setterArg) {
      this.fillSortKey = setterArg;
    }

    private @Nullable Long fillColor;
    public @Nullable Long getFillColor() { return fillColor; }
    public void setFillColor(@Nullable Long setterArg) {
      this.fillColor = setterArg;
    }

    private @Nullable Double fillOpacity;
    public @Nullable Double getFillOpacity() { return fillOpacity; }
    public void setFillOpacity(@Nullable Double setterArg) {
      this.fillOpacity = setterArg;
    }

    private @Nullable Long fillOutlineColor;
    public @Nullable Long getFillOutlineColor() { return fillOutlineColor; }
    public void setFillOutlineColor(@Nullable Long setterArg) {
      this.fillOutlineColor = setterArg;
    }

    private @Nullable String fillPattern;
    public @Nullable String getFillPattern() { return fillPattern; }
    public void setFillPattern(@Nullable String setterArg) {
      this.fillPattern = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PolygonAnnotation() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable Double fillSortKey;
      public @NonNull Builder setFillSortKey(@Nullable Double setterArg) {
        this.fillSortKey = setterArg;
        return this;
      }
      private @Nullable Long fillColor;
      public @NonNull Builder setFillColor(@Nullable Long setterArg) {
        this.fillColor = setterArg;
        return this;
      }
      private @Nullable Double fillOpacity;
      public @NonNull Builder setFillOpacity(@Nullable Double setterArg) {
        this.fillOpacity = setterArg;
        return this;
      }
      private @Nullable Long fillOutlineColor;
      public @NonNull Builder setFillOutlineColor(@Nullable Long setterArg) {
        this.fillOutlineColor = setterArg;
        return this;
      }
      private @Nullable String fillPattern;
      public @NonNull Builder setFillPattern(@Nullable String setterArg) {
        this.fillPattern = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PolygonAnnotation build() {
        PolygonAnnotation pigeonReturn = new PolygonAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setFillSortKey(fillSortKey);
        pigeonReturn.setFillColor(fillColor);
        pigeonReturn.setFillOpacity(fillOpacity);
        pigeonReturn.setFillOutlineColor(fillOutlineColor);
        pigeonReturn.setFillPattern(fillPattern);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("geometry", geometry);
      toMapResult.put("fillSortKey", fillSortKey);
      toMapResult.put("fillColor", fillColor);
      toMapResult.put("fillOpacity", fillOpacity);
      toMapResult.put("fillOutlineColor", fillOutlineColor);
      toMapResult.put("fillPattern", fillPattern);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PolygonAnnotation fromMap(@NonNull Map<String, Object> map) {
      PolygonAnnotation pigeonResult = new PolygonAnnotation();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object fillSortKey = map.get("fillSortKey");
      pigeonResult.setFillSortKey((Double)fillSortKey);
      Object fillColor = map.get("fillColor");
      pigeonResult.setFillColor((fillColor == null) ? null : ((fillColor instanceof Integer) ? (Integer)fillColor : (Long)fillColor));
      Object fillOpacity = map.get("fillOpacity");
      pigeonResult.setFillOpacity((Double)fillOpacity);
      Object fillOutlineColor = map.get("fillOutlineColor");
      pigeonResult.setFillOutlineColor((fillOutlineColor == null) ? null : ((fillOutlineColor instanceof Integer) ? (Integer)fillOutlineColor : (Long)fillOutlineColor));
      Object fillPattern = map.get("fillPattern");
      pigeonResult.setFillPattern((String)fillPattern);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PolygonAnnotationOptions {
    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable Double fillSortKey;
    public @Nullable Double getFillSortKey() { return fillSortKey; }
    public void setFillSortKey(@Nullable Double setterArg) {
      this.fillSortKey = setterArg;
    }

    private @Nullable Long fillColor;
    public @Nullable Long getFillColor() { return fillColor; }
    public void setFillColor(@Nullable Long setterArg) {
      this.fillColor = setterArg;
    }

    private @Nullable Double fillOpacity;
    public @Nullable Double getFillOpacity() { return fillOpacity; }
    public void setFillOpacity(@Nullable Double setterArg) {
      this.fillOpacity = setterArg;
    }

    private @Nullable Long fillOutlineColor;
    public @Nullable Long getFillOutlineColor() { return fillOutlineColor; }
    public void setFillOutlineColor(@Nullable Long setterArg) {
      this.fillOutlineColor = setterArg;
    }

    private @Nullable String fillPattern;
    public @Nullable String getFillPattern() { return fillPattern; }
    public void setFillPattern(@Nullable String setterArg) {
      this.fillPattern = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable Double fillSortKey;
      public @NonNull Builder setFillSortKey(@Nullable Double setterArg) {
        this.fillSortKey = setterArg;
        return this;
      }
      private @Nullable Long fillColor;
      public @NonNull Builder setFillColor(@Nullable Long setterArg) {
        this.fillColor = setterArg;
        return this;
      }
      private @Nullable Double fillOpacity;
      public @NonNull Builder setFillOpacity(@Nullable Double setterArg) {
        this.fillOpacity = setterArg;
        return this;
      }
      private @Nullable Long fillOutlineColor;
      public @NonNull Builder setFillOutlineColor(@Nullable Long setterArg) {
        this.fillOutlineColor = setterArg;
        return this;
      }
      private @Nullable String fillPattern;
      public @NonNull Builder setFillPattern(@Nullable String setterArg) {
        this.fillPattern = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PolygonAnnotationOptions build() {
        PolygonAnnotationOptions pigeonReturn = new PolygonAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setFillSortKey(fillSortKey);
        pigeonReturn.setFillColor(fillColor);
        pigeonReturn.setFillOpacity(fillOpacity);
        pigeonReturn.setFillOutlineColor(fillOutlineColor);
        pigeonReturn.setFillPattern(fillPattern);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("geometry", geometry);
      toMapResult.put("fillSortKey", fillSortKey);
      toMapResult.put("fillColor", fillColor);
      toMapResult.put("fillOpacity", fillOpacity);
      toMapResult.put("fillOutlineColor", fillOutlineColor);
      toMapResult.put("fillPattern", fillPattern);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PolygonAnnotationOptions fromMap(@NonNull Map<String, Object> map) {
      PolygonAnnotationOptions pigeonResult = new PolygonAnnotationOptions();
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object fillSortKey = map.get("fillSortKey");
      pigeonResult.setFillSortKey((Double)fillSortKey);
      Object fillColor = map.get("fillColor");
      pigeonResult.setFillColor((fillColor == null) ? null : ((fillColor instanceof Integer) ? (Integer)fillColor : (Long)fillColor));
      Object fillOpacity = map.get("fillOpacity");
      pigeonResult.setFillOpacity((Double)fillOpacity);
      Object fillOutlineColor = map.get("fillOutlineColor");
      pigeonResult.setFillOutlineColor((fillOutlineColor == null) ? null : ((fillOutlineColor instanceof Integer) ? (Integer)fillOutlineColor : (Long)fillOutlineColor));
      Object fillPattern = map.get("fillPattern");
      pigeonResult.setFillPattern((String)fillPattern);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OnPolygonAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnPolygonAnnotationClickListenerCodec INSTANCE = new OnPolygonAnnotationClickListenerCodec();
    private OnPolygonAnnotationClickListenerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PolygonAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PolygonAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolygonAnnotation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class OnPolygonAnnotationClickListener {
    private final BinaryMessenger binaryMessenger;
    public OnPolygonAnnotationClickListener(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return OnPolygonAnnotationClickListenerCodec.INSTANCE;
    }

    public void onPolygonAnnotationClick(@NonNull PolygonAnnotation annotationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OnPolygonAnnotationClickListener.onPolygonAnnotationClick", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(annotationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class _PolygonAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _PolygonAnnotationMessagerCodec INSTANCE = new _PolygonAnnotationMessagerCodec();
    private _PolygonAnnotationMessagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PolygonAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PolygonAnnotationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PolygonAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolygonAnnotation) value).toMap());
      } else 
      if (value instanceof PolygonAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((PolygonAnnotationOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _PolygonAnnotationMessager {
    void create(@NonNull String managerId, @NonNull PolygonAnnotationOptions annotationOption, Result<PolygonAnnotation> result);
    void createMulti(@NonNull String managerId, @NonNull List<PolygonAnnotationOptions> annotationOptions, Result<List<PolygonAnnotation>> result);
    void update(@NonNull String managerId, @NonNull PolygonAnnotation annotation, Result<Void> result);
    void delete(@NonNull String managerId, @NonNull PolygonAnnotation annotation, Result<Void> result);
    void deleteAll(@NonNull String managerId, Result<Void> result);
    void getAnnotations(@NonNull String managerId, Result<List<PolygonAnnotation>> result);
    void setFillAntialias(@NonNull String managerId, @NonNull Boolean fillAntialias, Result<Void> result);
    void getFillAntialias(@NonNull String managerId, Result<Boolean> result);
    void setFillTranslate(@NonNull String managerId, @NonNull List<Double> fillTranslate, Result<Void> result);
    void getFillTranslate(@NonNull String managerId, Result<List<Double>> result);
    void setFillTranslateAnchor(@NonNull String managerId, @NonNull FillTranslateAnchor fillTranslateAnchor, Result<Void> result);
    void getFillTranslateAnchor(@NonNull String managerId, Result<Long> result);

    /** The codec used by _PolygonAnnotationMessager. */
    static MessageCodec<Object> getCodec() {
      return _PolygonAnnotationMessagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_PolygonAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _PolygonAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolygonAnnotationOptions annotationOptionArg = (PolygonAnnotationOptions)args.get(1);
              if (annotationOptionArg == null) {
                throw new NullPointerException("annotationOptionArg unexpectedly null.");
              }
              Result<PolygonAnnotation> resultCallback = new Result<PolygonAnnotation>() {
                public void success(PolygonAnnotation result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(managerIdArg, annotationOptionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<PolygonAnnotationOptions> annotationOptionsArg = (List<PolygonAnnotationOptions>)args.get(1);
              if (annotationOptionsArg == null) {
                throw new NullPointerException("annotationOptionsArg unexpectedly null.");
              }
              Result<List<PolygonAnnotation>> resultCallback = new Result<List<PolygonAnnotation>>() {
                public void success(List<PolygonAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolygonAnnotation annotationArg = (PolygonAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.update(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolygonAnnotation annotationArg = (PolygonAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.delete(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.deleteAll(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.getAnnotations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<PolygonAnnotation>> resultCallback = new Result<List<PolygonAnnotation>>() {
                public void success(List<PolygonAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAnnotations(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.setFillAntialias", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean fillAntialiasArg = (Boolean)args.get(1);
              if (fillAntialiasArg == null) {
                throw new NullPointerException("fillAntialiasArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFillAntialias(managerIdArg, fillAntialiasArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.getFillAntialias", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getFillAntialias(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.setFillTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> fillTranslateArg = (List<Double>)args.get(1);
              if (fillTranslateArg == null) {
                throw new NullPointerException("fillTranslateArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFillTranslate(managerIdArg, fillTranslateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.getFillTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getFillTranslate(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.setFillTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              FillTranslateAnchor fillTranslateAnchorArg = args.get(1) == null ? null : FillTranslateAnchor.values()[(int)args.get(1)];
              if (fillTranslateAnchorArg == null) {
                throw new NullPointerException("fillTranslateAnchorArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFillTranslateAnchor(managerIdArg, fillTranslateAnchorArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolygonAnnotationMessager.getFillTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getFillTranslateAnchor(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
