// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTCircleAnnotationMessager {

  public enum CirclePitchAlignment {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private CirclePitchAlignment(final int index) {
      this.index = index;
    }
  }

  public enum CirclePitchScale {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private CirclePitchScale(final int index) {
      this.index = index;
    }
  }

  public enum CircleTranslateAnchor {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private CircleTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CircleAnnotation {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable Double circleSortKey;
    public @Nullable Double getCircleSortKey() { return circleSortKey; }
    public void setCircleSortKey(@Nullable Double setterArg) {
      this.circleSortKey = setterArg;
    }

    private @Nullable Double circleBlur;
    public @Nullable Double getCircleBlur() { return circleBlur; }
    public void setCircleBlur(@Nullable Double setterArg) {
      this.circleBlur = setterArg;
    }

    private @Nullable Long circleColor;
    public @Nullable Long getCircleColor() { return circleColor; }
    public void setCircleColor(@Nullable Long setterArg) {
      this.circleColor = setterArg;
    }

    private @Nullable Double circleOpacity;
    public @Nullable Double getCircleOpacity() { return circleOpacity; }
    public void setCircleOpacity(@Nullable Double setterArg) {
      this.circleOpacity = setterArg;
    }

    private @Nullable Double circleRadius;
    public @Nullable Double getCircleRadius() { return circleRadius; }
    public void setCircleRadius(@Nullable Double setterArg) {
      this.circleRadius = setterArg;
    }

    private @Nullable Long circleStrokeColor;
    public @Nullable Long getCircleStrokeColor() { return circleStrokeColor; }
    public void setCircleStrokeColor(@Nullable Long setterArg) {
      this.circleStrokeColor = setterArg;
    }

    private @Nullable Double circleStrokeOpacity;
    public @Nullable Double getCircleStrokeOpacity() { return circleStrokeOpacity; }
    public void setCircleStrokeOpacity(@Nullable Double setterArg) {
      this.circleStrokeOpacity = setterArg;
    }

    private @Nullable Double circleStrokeWidth;
    public @Nullable Double getCircleStrokeWidth() { return circleStrokeWidth; }
    public void setCircleStrokeWidth(@Nullable Double setterArg) {
      this.circleStrokeWidth = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CircleAnnotation() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable Double circleSortKey;
      public @NonNull Builder setCircleSortKey(@Nullable Double setterArg) {
        this.circleSortKey = setterArg;
        return this;
      }
      private @Nullable Double circleBlur;
      public @NonNull Builder setCircleBlur(@Nullable Double setterArg) {
        this.circleBlur = setterArg;
        return this;
      }
      private @Nullable Long circleColor;
      public @NonNull Builder setCircleColor(@Nullable Long setterArg) {
        this.circleColor = setterArg;
        return this;
      }
      private @Nullable Double circleOpacity;
      public @NonNull Builder setCircleOpacity(@Nullable Double setterArg) {
        this.circleOpacity = setterArg;
        return this;
      }
      private @Nullable Double circleRadius;
      public @NonNull Builder setCircleRadius(@Nullable Double setterArg) {
        this.circleRadius = setterArg;
        return this;
      }
      private @Nullable Long circleStrokeColor;
      public @NonNull Builder setCircleStrokeColor(@Nullable Long setterArg) {
        this.circleStrokeColor = setterArg;
        return this;
      }
      private @Nullable Double circleStrokeOpacity;
      public @NonNull Builder setCircleStrokeOpacity(@Nullable Double setterArg) {
        this.circleStrokeOpacity = setterArg;
        return this;
      }
      private @Nullable Double circleStrokeWidth;
      public @NonNull Builder setCircleStrokeWidth(@Nullable Double setterArg) {
        this.circleStrokeWidth = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull CircleAnnotation build() {
        CircleAnnotation pigeonReturn = new CircleAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setCircleSortKey(circleSortKey);
        pigeonReturn.setCircleBlur(circleBlur);
        pigeonReturn.setCircleColor(circleColor);
        pigeonReturn.setCircleOpacity(circleOpacity);
        pigeonReturn.setCircleRadius(circleRadius);
        pigeonReturn.setCircleStrokeColor(circleStrokeColor);
        pigeonReturn.setCircleStrokeOpacity(circleStrokeOpacity);
        pigeonReturn.setCircleStrokeWidth(circleStrokeWidth);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("geometry", geometry);
      toMapResult.put("circleSortKey", circleSortKey);
      toMapResult.put("circleBlur", circleBlur);
      toMapResult.put("circleColor", circleColor);
      toMapResult.put("circleOpacity", circleOpacity);
      toMapResult.put("circleRadius", circleRadius);
      toMapResult.put("circleStrokeColor", circleStrokeColor);
      toMapResult.put("circleStrokeOpacity", circleStrokeOpacity);
      toMapResult.put("circleStrokeWidth", circleStrokeWidth);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull CircleAnnotation fromMap(@NonNull Map<String, Object> map) {
      CircleAnnotation pigeonResult = new CircleAnnotation();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object circleSortKey = map.get("circleSortKey");
      pigeonResult.setCircleSortKey((Double)circleSortKey);
      Object circleBlur = map.get("circleBlur");
      pigeonResult.setCircleBlur((Double)circleBlur);
      Object circleColor = map.get("circleColor");
      pigeonResult.setCircleColor((circleColor == null) ? null : ((circleColor instanceof Integer) ? (Integer)circleColor : (Long)circleColor));
      Object circleOpacity = map.get("circleOpacity");
      pigeonResult.setCircleOpacity((Double)circleOpacity);
      Object circleRadius = map.get("circleRadius");
      pigeonResult.setCircleRadius((Double)circleRadius);
      Object circleStrokeColor = map.get("circleStrokeColor");
      pigeonResult.setCircleStrokeColor((circleStrokeColor == null) ? null : ((circleStrokeColor instanceof Integer) ? (Integer)circleStrokeColor : (Long)circleStrokeColor));
      Object circleStrokeOpacity = map.get("circleStrokeOpacity");
      pigeonResult.setCircleStrokeOpacity((Double)circleStrokeOpacity);
      Object circleStrokeWidth = map.get("circleStrokeWidth");
      pigeonResult.setCircleStrokeWidth((Double)circleStrokeWidth);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CircleAnnotationOptions {
    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable Double circleSortKey;
    public @Nullable Double getCircleSortKey() { return circleSortKey; }
    public void setCircleSortKey(@Nullable Double setterArg) {
      this.circleSortKey = setterArg;
    }

    private @Nullable Double circleBlur;
    public @Nullable Double getCircleBlur() { return circleBlur; }
    public void setCircleBlur(@Nullable Double setterArg) {
      this.circleBlur = setterArg;
    }

    private @Nullable Long circleColor;
    public @Nullable Long getCircleColor() { return circleColor; }
    public void setCircleColor(@Nullable Long setterArg) {
      this.circleColor = setterArg;
    }

    private @Nullable Double circleOpacity;
    public @Nullable Double getCircleOpacity() { return circleOpacity; }
    public void setCircleOpacity(@Nullable Double setterArg) {
      this.circleOpacity = setterArg;
    }

    private @Nullable Double circleRadius;
    public @Nullable Double getCircleRadius() { return circleRadius; }
    public void setCircleRadius(@Nullable Double setterArg) {
      this.circleRadius = setterArg;
    }

    private @Nullable Long circleStrokeColor;
    public @Nullable Long getCircleStrokeColor() { return circleStrokeColor; }
    public void setCircleStrokeColor(@Nullable Long setterArg) {
      this.circleStrokeColor = setterArg;
    }

    private @Nullable Double circleStrokeOpacity;
    public @Nullable Double getCircleStrokeOpacity() { return circleStrokeOpacity; }
    public void setCircleStrokeOpacity(@Nullable Double setterArg) {
      this.circleStrokeOpacity = setterArg;
    }

    private @Nullable Double circleStrokeWidth;
    public @Nullable Double getCircleStrokeWidth() { return circleStrokeWidth; }
    public void setCircleStrokeWidth(@Nullable Double setterArg) {
      this.circleStrokeWidth = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable Double circleSortKey;
      public @NonNull Builder setCircleSortKey(@Nullable Double setterArg) {
        this.circleSortKey = setterArg;
        return this;
      }
      private @Nullable Double circleBlur;
      public @NonNull Builder setCircleBlur(@Nullable Double setterArg) {
        this.circleBlur = setterArg;
        return this;
      }
      private @Nullable Long circleColor;
      public @NonNull Builder setCircleColor(@Nullable Long setterArg) {
        this.circleColor = setterArg;
        return this;
      }
      private @Nullable Double circleOpacity;
      public @NonNull Builder setCircleOpacity(@Nullable Double setterArg) {
        this.circleOpacity = setterArg;
        return this;
      }
      private @Nullable Double circleRadius;
      public @NonNull Builder setCircleRadius(@Nullable Double setterArg) {
        this.circleRadius = setterArg;
        return this;
      }
      private @Nullable Long circleStrokeColor;
      public @NonNull Builder setCircleStrokeColor(@Nullable Long setterArg) {
        this.circleStrokeColor = setterArg;
        return this;
      }
      private @Nullable Double circleStrokeOpacity;
      public @NonNull Builder setCircleStrokeOpacity(@Nullable Double setterArg) {
        this.circleStrokeOpacity = setterArg;
        return this;
      }
      private @Nullable Double circleStrokeWidth;
      public @NonNull Builder setCircleStrokeWidth(@Nullable Double setterArg) {
        this.circleStrokeWidth = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }

      public @NonNull CircleAnnotationOptions build() {
        CircleAnnotationOptions pigeonReturn = new CircleAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setCircleSortKey(circleSortKey);
        pigeonReturn.setCircleBlur(circleBlur);
        pigeonReturn.setCircleColor(circleColor);
        pigeonReturn.setCircleOpacity(circleOpacity);
        pigeonReturn.setCircleRadius(circleRadius);
        pigeonReturn.setCircleStrokeColor(circleStrokeColor);
        pigeonReturn.setCircleStrokeOpacity(circleStrokeOpacity);
        pigeonReturn.setCircleStrokeWidth(circleStrokeWidth);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("geometry", geometry);
      toMapResult.put("circleSortKey", circleSortKey);
      toMapResult.put("circleBlur", circleBlur);
      toMapResult.put("circleColor", circleColor);
      toMapResult.put("circleOpacity", circleOpacity);
      toMapResult.put("circleRadius", circleRadius);
      toMapResult.put("circleStrokeColor", circleStrokeColor);
      toMapResult.put("circleStrokeOpacity", circleStrokeOpacity);
      toMapResult.put("circleStrokeWidth", circleStrokeWidth);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull CircleAnnotationOptions fromMap(@NonNull Map<String, Object> map) {
      CircleAnnotationOptions pigeonResult = new CircleAnnotationOptions();
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object circleSortKey = map.get("circleSortKey");
      pigeonResult.setCircleSortKey((Double)circleSortKey);
      Object circleBlur = map.get("circleBlur");
      pigeonResult.setCircleBlur((Double)circleBlur);
      Object circleColor = map.get("circleColor");
      pigeonResult.setCircleColor((circleColor == null) ? null : ((circleColor instanceof Integer) ? (Integer)circleColor : (Long)circleColor));
      Object circleOpacity = map.get("circleOpacity");
      pigeonResult.setCircleOpacity((Double)circleOpacity);
      Object circleRadius = map.get("circleRadius");
      pigeonResult.setCircleRadius((Double)circleRadius);
      Object circleStrokeColor = map.get("circleStrokeColor");
      pigeonResult.setCircleStrokeColor((circleStrokeColor == null) ? null : ((circleStrokeColor instanceof Integer) ? (Integer)circleStrokeColor : (Long)circleStrokeColor));
      Object circleStrokeOpacity = map.get("circleStrokeOpacity");
      pigeonResult.setCircleStrokeOpacity((Double)circleStrokeOpacity);
      Object circleStrokeWidth = map.get("circleStrokeWidth");
      pigeonResult.setCircleStrokeWidth((Double)circleStrokeWidth);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OnCircleAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnCircleAnnotationClickListenerCodec INSTANCE = new OnCircleAnnotationClickListenerCodec();
    private OnCircleAnnotationClickListenerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CircleAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CircleAnnotation) {
        stream.write(128);
        writeValue(stream, ((CircleAnnotation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class OnCircleAnnotationClickListener {
    private final BinaryMessenger binaryMessenger;
    public OnCircleAnnotationClickListener(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return OnCircleAnnotationClickListenerCodec.INSTANCE;
    }

    public void onCircleAnnotationClick(@NonNull CircleAnnotation annotationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OnCircleAnnotationClickListener.onCircleAnnotationClick", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(annotationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class _CircleAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _CircleAnnotationMessagerCodec INSTANCE = new _CircleAnnotationMessagerCodec();
    private _CircleAnnotationMessagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CircleAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CircleAnnotationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CircleAnnotation) {
        stream.write(128);
        writeValue(stream, ((CircleAnnotation) value).toMap());
      } else 
      if (value instanceof CircleAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((CircleAnnotationOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _CircleAnnotationMessager {
    void create(@NonNull String managerId, @NonNull CircleAnnotationOptions annotationOption, Result<CircleAnnotation> result);
    void createMulti(@NonNull String managerId, @NonNull List<CircleAnnotationOptions> annotationOptions, Result<List<CircleAnnotation>> result);
    void update(@NonNull String managerId, @NonNull CircleAnnotation annotation, Result<Void> result);
    void delete(@NonNull String managerId, @NonNull CircleAnnotation annotation, Result<Void> result);
    void deleteAll(@NonNull String managerId, Result<Void> result);
    void getAnnotations(@NonNull String managerId, Result<List<CircleAnnotation>> result);
    void setCirclePitchAlignment(@NonNull String managerId, @NonNull CirclePitchAlignment circlePitchAlignment, Result<Void> result);
    void getCirclePitchAlignment(@NonNull String managerId, Result<Long> result);
    void setCirclePitchScale(@NonNull String managerId, @NonNull CirclePitchScale circlePitchScale, Result<Void> result);
    void getCirclePitchScale(@NonNull String managerId, Result<Long> result);
    void setCircleTranslate(@NonNull String managerId, @NonNull List<Double> circleTranslate, Result<Void> result);
    void getCircleTranslate(@NonNull String managerId, Result<List<Double>> result);
    void setCircleTranslateAnchor(@NonNull String managerId, @NonNull CircleTranslateAnchor circleTranslateAnchor, Result<Void> result);
    void getCircleTranslateAnchor(@NonNull String managerId, Result<Long> result);

    /** The codec used by _CircleAnnotationMessager. */
    static MessageCodec<Object> getCodec() {
      return _CircleAnnotationMessagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_CircleAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _CircleAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CircleAnnotationOptions annotationOptionArg = (CircleAnnotationOptions)args.get(1);
              if (annotationOptionArg == null) {
                throw new NullPointerException("annotationOptionArg unexpectedly null.");
              }
              Result<CircleAnnotation> resultCallback = new Result<CircleAnnotation>() {
                public void success(CircleAnnotation result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(managerIdArg, annotationOptionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<CircleAnnotationOptions> annotationOptionsArg = (List<CircleAnnotationOptions>)args.get(1);
              if (annotationOptionsArg == null) {
                throw new NullPointerException("annotationOptionsArg unexpectedly null.");
              }
              Result<List<CircleAnnotation>> resultCallback = new Result<List<CircleAnnotation>>() {
                public void success(List<CircleAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CircleAnnotation annotationArg = (CircleAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.update(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CircleAnnotation annotationArg = (CircleAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.delete(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.deleteAll(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.getAnnotations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<CircleAnnotation>> resultCallback = new Result<List<CircleAnnotation>>() {
                public void success(List<CircleAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAnnotations(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.setCirclePitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CirclePitchAlignment circlePitchAlignmentArg = args.get(1) == null ? null : CirclePitchAlignment.values()[(int)args.get(1)];
              if (circlePitchAlignmentArg == null) {
                throw new NullPointerException("circlePitchAlignmentArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setCirclePitchAlignment(managerIdArg, circlePitchAlignmentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.getCirclePitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCirclePitchAlignment(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.setCirclePitchScale", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CirclePitchScale circlePitchScaleArg = args.get(1) == null ? null : CirclePitchScale.values()[(int)args.get(1)];
              if (circlePitchScaleArg == null) {
                throw new NullPointerException("circlePitchScaleArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setCirclePitchScale(managerIdArg, circlePitchScaleArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.getCirclePitchScale", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCirclePitchScale(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.setCircleTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> circleTranslateArg = (List<Double>)args.get(1);
              if (circleTranslateArg == null) {
                throw new NullPointerException("circleTranslateArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setCircleTranslate(managerIdArg, circleTranslateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.getCircleTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCircleTranslate(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.setCircleTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              CircleTranslateAnchor circleTranslateAnchorArg = args.get(1) == null ? null : CircleTranslateAnchor.values()[(int)args.get(1)];
              if (circleTranslateAnchorArg == null) {
                throw new NullPointerException("circleTranslateAnchorArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setCircleTranslateAnchor(managerIdArg, circleTranslateAnchorArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CircleAnnotationMessager.getCircleTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCircleTranslateAnchor(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
