// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTPointAnnotationMessager {

  public enum IconAnchor {
    CENTER(0),
    LEFT(1),
    RIGHT(2),
    TOP(3),
    BOTTOM(4),
    TOP_LEFT(5),
    TOP_RIGHT(6),
    BOTTOM_LEFT(7),
    BOTTOM_RIGHT(8);

    private int index;
    private IconAnchor(final int index) {
      this.index = index;
    }
  }

  public enum IconPitchAlignment {
    MAP(0),
    VIEWPORT(1),
    AUTO(2);

    private int index;
    private IconPitchAlignment(final int index) {
      this.index = index;
    }
  }

  public enum IconRotationAlignment {
    MAP(0),
    VIEWPORT(1),
    AUTO(2);

    private int index;
    private IconRotationAlignment(final int index) {
      this.index = index;
    }
  }

  public enum IconTextFit {
    NONE(0),
    WIDTH(1),
    HEIGHT(2),
    BOTH(3);

    private int index;
    private IconTextFit(final int index) {
      this.index = index;
    }
  }

  public enum SymbolPlacement {
    POINT(0),
    LINE(1),
    LINE_CENTER(2);

    private int index;
    private SymbolPlacement(final int index) {
      this.index = index;
    }
  }

  public enum SymbolZOrder {
    AUTO(0),
    VIEWPORT_Y(1),
    SOURCE(2);

    private int index;
    private SymbolZOrder(final int index) {
      this.index = index;
    }
  }

  public enum TextAnchor {
    CENTER(0),
    LEFT(1),
    RIGHT(2),
    TOP(3),
    BOTTOM(4),
    TOP_LEFT(5),
    TOP_RIGHT(6),
    BOTTOM_LEFT(7),
    BOTTOM_RIGHT(8);

    private int index;
    private TextAnchor(final int index) {
      this.index = index;
    }
  }

  public enum TextJustify {
    AUTO(0),
    LEFT(1),
    CENTER(2),
    RIGHT(3);

    private int index;
    private TextJustify(final int index) {
      this.index = index;
    }
  }

  public enum TextPitchAlignment {
    MAP(0),
    VIEWPORT(1),
    AUTO(2);

    private int index;
    private TextPitchAlignment(final int index) {
      this.index = index;
    }
  }

  public enum TextRotationAlignment {
    MAP(0),
    VIEWPORT(1),
    AUTO(2);

    private int index;
    private TextRotationAlignment(final int index) {
      this.index = index;
    }
  }

  public enum TextTransform {
    NONE(0),
    UPPERCASE(1),
    LOWERCASE(2);

    private int index;
    private TextTransform(final int index) {
      this.index = index;
    }
  }

  public enum TextVariableAnchor {
    CENTER(0),
    LEFT(1),
    RIGHT(2),
    TOP(3),
    BOTTOM(4),
    TOP_LEFT(5),
    TOP_RIGHT(6),
    BOTTOM_LEFT(7),
    BOTTOM_RIGHT(8);

    private int index;
    private TextVariableAnchor(final int index) {
      this.index = index;
    }
  }

  public enum TextWritingMode {
    HORIZONTAL(0),
    VERTICAL(1);

    private int index;
    private TextWritingMode(final int index) {
      this.index = index;
    }
  }

  public enum IconTranslateAnchor {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private IconTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  public enum TextTranslateAnchor {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private TextTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PointAnnotation {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable byte[] image;
    public @Nullable byte[] getImage() { return image; }
    public void setImage(@Nullable byte[] setterArg) {
      this.image = setterArg;
    }

    private @Nullable IconAnchor iconAnchor;
    public @Nullable IconAnchor getIconAnchor() { return iconAnchor; }
    public void setIconAnchor(@Nullable IconAnchor setterArg) {
      this.iconAnchor = setterArg;
    }

    private @Nullable String iconImage;
    public @Nullable String getIconImage() { return iconImage; }
    public void setIconImage(@Nullable String setterArg) {
      this.iconImage = setterArg;
    }

    private @Nullable List<Double> iconOffset;
    public @Nullable List<Double> getIconOffset() { return iconOffset; }
    public void setIconOffset(@Nullable List<Double> setterArg) {
      this.iconOffset = setterArg;
    }

    private @Nullable Double iconRotate;
    public @Nullable Double getIconRotate() { return iconRotate; }
    public void setIconRotate(@Nullable Double setterArg) {
      this.iconRotate = setterArg;
    }

    private @Nullable Double iconSize;
    public @Nullable Double getIconSize() { return iconSize; }
    public void setIconSize(@Nullable Double setterArg) {
      this.iconSize = setterArg;
    }

    private @Nullable Double symbolSortKey;
    public @Nullable Double getSymbolSortKey() { return symbolSortKey; }
    public void setSymbolSortKey(@Nullable Double setterArg) {
      this.symbolSortKey = setterArg;
    }

    private @Nullable TextAnchor textAnchor;
    public @Nullable TextAnchor getTextAnchor() { return textAnchor; }
    public void setTextAnchor(@Nullable TextAnchor setterArg) {
      this.textAnchor = setterArg;
    }

    private @Nullable String textField;
    public @Nullable String getTextField() { return textField; }
    public void setTextField(@Nullable String setterArg) {
      this.textField = setterArg;
    }

    private @Nullable TextJustify textJustify;
    public @Nullable TextJustify getTextJustify() { return textJustify; }
    public void setTextJustify(@Nullable TextJustify setterArg) {
      this.textJustify = setterArg;
    }

    private @Nullable Double textLetterSpacing;
    public @Nullable Double getTextLetterSpacing() { return textLetterSpacing; }
    public void setTextLetterSpacing(@Nullable Double setterArg) {
      this.textLetterSpacing = setterArg;
    }

    private @Nullable Double textMaxWidth;
    public @Nullable Double getTextMaxWidth() { return textMaxWidth; }
    public void setTextMaxWidth(@Nullable Double setterArg) {
      this.textMaxWidth = setterArg;
    }

    private @Nullable List<Double> textOffset;
    public @Nullable List<Double> getTextOffset() { return textOffset; }
    public void setTextOffset(@Nullable List<Double> setterArg) {
      this.textOffset = setterArg;
    }

    private @Nullable Double textRadialOffset;
    public @Nullable Double getTextRadialOffset() { return textRadialOffset; }
    public void setTextRadialOffset(@Nullable Double setterArg) {
      this.textRadialOffset = setterArg;
    }

    private @Nullable Double textRotate;
    public @Nullable Double getTextRotate() { return textRotate; }
    public void setTextRotate(@Nullable Double setterArg) {
      this.textRotate = setterArg;
    }

    private @Nullable Double textSize;
    public @Nullable Double getTextSize() { return textSize; }
    public void setTextSize(@Nullable Double setterArg) {
      this.textSize = setterArg;
    }

    private @Nullable TextTransform textTransform;
    public @Nullable TextTransform getTextTransform() { return textTransform; }
    public void setTextTransform(@Nullable TextTransform setterArg) {
      this.textTransform = setterArg;
    }

    private @Nullable Long iconColor;
    public @Nullable Long getIconColor() { return iconColor; }
    public void setIconColor(@Nullable Long setterArg) {
      this.iconColor = setterArg;
    }

    private @Nullable Double iconHaloBlur;
    public @Nullable Double getIconHaloBlur() { return iconHaloBlur; }
    public void setIconHaloBlur(@Nullable Double setterArg) {
      this.iconHaloBlur = setterArg;
    }

    private @Nullable Long iconHaloColor;
    public @Nullable Long getIconHaloColor() { return iconHaloColor; }
    public void setIconHaloColor(@Nullable Long setterArg) {
      this.iconHaloColor = setterArg;
    }

    private @Nullable Double iconHaloWidth;
    public @Nullable Double getIconHaloWidth() { return iconHaloWidth; }
    public void setIconHaloWidth(@Nullable Double setterArg) {
      this.iconHaloWidth = setterArg;
    }

    private @Nullable Double iconOpacity;
    public @Nullable Double getIconOpacity() { return iconOpacity; }
    public void setIconOpacity(@Nullable Double setterArg) {
      this.iconOpacity = setterArg;
    }

    private @Nullable Long textColor;
    public @Nullable Long getTextColor() { return textColor; }
    public void setTextColor(@Nullable Long setterArg) {
      this.textColor = setterArg;
    }

    private @Nullable Double textHaloBlur;
    public @Nullable Double getTextHaloBlur() { return textHaloBlur; }
    public void setTextHaloBlur(@Nullable Double setterArg) {
      this.textHaloBlur = setterArg;
    }

    private @Nullable Long textHaloColor;
    public @Nullable Long getTextHaloColor() { return textHaloColor; }
    public void setTextHaloColor(@Nullable Long setterArg) {
      this.textHaloColor = setterArg;
    }

    private @Nullable Double textHaloWidth;
    public @Nullable Double getTextHaloWidth() { return textHaloWidth; }
    public void setTextHaloWidth(@Nullable Double setterArg) {
      this.textHaloWidth = setterArg;
    }

    private @Nullable Double textOpacity;
    public @Nullable Double getTextOpacity() { return textOpacity; }
    public void setTextOpacity(@Nullable Double setterArg) {
      this.textOpacity = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PointAnnotation() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable byte[] image;
      public @NonNull Builder setImage(@Nullable byte[] setterArg) {
        this.image = setterArg;
        return this;
      }
      private @Nullable IconAnchor iconAnchor;
      public @NonNull Builder setIconAnchor(@Nullable IconAnchor setterArg) {
        this.iconAnchor = setterArg;
        return this;
      }
      private @Nullable String iconImage;
      public @NonNull Builder setIconImage(@Nullable String setterArg) {
        this.iconImage = setterArg;
        return this;
      }
      private @Nullable List<Double> iconOffset;
      public @NonNull Builder setIconOffset(@Nullable List<Double> setterArg) {
        this.iconOffset = setterArg;
        return this;
      }
      private @Nullable Double iconRotate;
      public @NonNull Builder setIconRotate(@Nullable Double setterArg) {
        this.iconRotate = setterArg;
        return this;
      }
      private @Nullable Double iconSize;
      public @NonNull Builder setIconSize(@Nullable Double setterArg) {
        this.iconSize = setterArg;
        return this;
      }
      private @Nullable Double symbolSortKey;
      public @NonNull Builder setSymbolSortKey(@Nullable Double setterArg) {
        this.symbolSortKey = setterArg;
        return this;
      }
      private @Nullable TextAnchor textAnchor;
      public @NonNull Builder setTextAnchor(@Nullable TextAnchor setterArg) {
        this.textAnchor = setterArg;
        return this;
      }
      private @Nullable String textField;
      public @NonNull Builder setTextField(@Nullable String setterArg) {
        this.textField = setterArg;
        return this;
      }
      private @Nullable TextJustify textJustify;
      public @NonNull Builder setTextJustify(@Nullable TextJustify setterArg) {
        this.textJustify = setterArg;
        return this;
      }
      private @Nullable Double textLetterSpacing;
      public @NonNull Builder setTextLetterSpacing(@Nullable Double setterArg) {
        this.textLetterSpacing = setterArg;
        return this;
      }
      private @Nullable Double textMaxWidth;
      public @NonNull Builder setTextMaxWidth(@Nullable Double setterArg) {
        this.textMaxWidth = setterArg;
        return this;
      }
      private @Nullable List<Double> textOffset;
      public @NonNull Builder setTextOffset(@Nullable List<Double> setterArg) {
        this.textOffset = setterArg;
        return this;
      }
      private @Nullable Double textRadialOffset;
      public @NonNull Builder setTextRadialOffset(@Nullable Double setterArg) {
        this.textRadialOffset = setterArg;
        return this;
      }
      private @Nullable Double textRotate;
      public @NonNull Builder setTextRotate(@Nullable Double setterArg) {
        this.textRotate = setterArg;
        return this;
      }
      private @Nullable Double textSize;
      public @NonNull Builder setTextSize(@Nullable Double setterArg) {
        this.textSize = setterArg;
        return this;
      }
      private @Nullable TextTransform textTransform;
      public @NonNull Builder setTextTransform(@Nullable TextTransform setterArg) {
        this.textTransform = setterArg;
        return this;
      }
      private @Nullable Long iconColor;
      public @NonNull Builder setIconColor(@Nullable Long setterArg) {
        this.iconColor = setterArg;
        return this;
      }
      private @Nullable Double iconHaloBlur;
      public @NonNull Builder setIconHaloBlur(@Nullable Double setterArg) {
        this.iconHaloBlur = setterArg;
        return this;
      }
      private @Nullable Long iconHaloColor;
      public @NonNull Builder setIconHaloColor(@Nullable Long setterArg) {
        this.iconHaloColor = setterArg;
        return this;
      }
      private @Nullable Double iconHaloWidth;
      public @NonNull Builder setIconHaloWidth(@Nullable Double setterArg) {
        this.iconHaloWidth = setterArg;
        return this;
      }
      private @Nullable Double iconOpacity;
      public @NonNull Builder setIconOpacity(@Nullable Double setterArg) {
        this.iconOpacity = setterArg;
        return this;
      }
      private @Nullable Long textColor;
      public @NonNull Builder setTextColor(@Nullable Long setterArg) {
        this.textColor = setterArg;
        return this;
      }
      private @Nullable Double textHaloBlur;
      public @NonNull Builder setTextHaloBlur(@Nullable Double setterArg) {
        this.textHaloBlur = setterArg;
        return this;
      }
      private @Nullable Long textHaloColor;
      public @NonNull Builder setTextHaloColor(@Nullable Long setterArg) {
        this.textHaloColor = setterArg;
        return this;
      }
      private @Nullable Double textHaloWidth;
      public @NonNull Builder setTextHaloWidth(@Nullable Double setterArg) {
        this.textHaloWidth = setterArg;
        return this;
      }
      private @Nullable Double textOpacity;
      public @NonNull Builder setTextOpacity(@Nullable Double setterArg) {
        this.textOpacity = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PointAnnotation build() {
        PointAnnotation pigeonReturn = new PointAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setImage(image);
        pigeonReturn.setIconAnchor(iconAnchor);
        pigeonReturn.setIconImage(iconImage);
        pigeonReturn.setIconOffset(iconOffset);
        pigeonReturn.setIconRotate(iconRotate);
        pigeonReturn.setIconSize(iconSize);
        pigeonReturn.setSymbolSortKey(symbolSortKey);
        pigeonReturn.setTextAnchor(textAnchor);
        pigeonReturn.setTextField(textField);
        pigeonReturn.setTextJustify(textJustify);
        pigeonReturn.setTextLetterSpacing(textLetterSpacing);
        pigeonReturn.setTextMaxWidth(textMaxWidth);
        pigeonReturn.setTextOffset(textOffset);
        pigeonReturn.setTextRadialOffset(textRadialOffset);
        pigeonReturn.setTextRotate(textRotate);
        pigeonReturn.setTextSize(textSize);
        pigeonReturn.setTextTransform(textTransform);
        pigeonReturn.setIconColor(iconColor);
        pigeonReturn.setIconHaloBlur(iconHaloBlur);
        pigeonReturn.setIconHaloColor(iconHaloColor);
        pigeonReturn.setIconHaloWidth(iconHaloWidth);
        pigeonReturn.setIconOpacity(iconOpacity);
        pigeonReturn.setTextColor(textColor);
        pigeonReturn.setTextHaloBlur(textHaloBlur);
        pigeonReturn.setTextHaloColor(textHaloColor);
        pigeonReturn.setTextHaloWidth(textHaloWidth);
        pigeonReturn.setTextOpacity(textOpacity);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("geometry", geometry);
      toMapResult.put("image", image);
      toMapResult.put("iconAnchor", iconAnchor == null ? null : iconAnchor.index);
      toMapResult.put("iconImage", iconImage);
      toMapResult.put("iconOffset", iconOffset);
      toMapResult.put("iconRotate", iconRotate);
      toMapResult.put("iconSize", iconSize);
      toMapResult.put("symbolSortKey", symbolSortKey);
      toMapResult.put("textAnchor", textAnchor == null ? null : textAnchor.index);
      toMapResult.put("textField", textField);
      toMapResult.put("textJustify", textJustify == null ? null : textJustify.index);
      toMapResult.put("textLetterSpacing", textLetterSpacing);
      toMapResult.put("textMaxWidth", textMaxWidth);
      toMapResult.put("textOffset", textOffset);
      toMapResult.put("textRadialOffset", textRadialOffset);
      toMapResult.put("textRotate", textRotate);
      toMapResult.put("textSize", textSize);
      toMapResult.put("textTransform", textTransform == null ? null : textTransform.index);
      toMapResult.put("iconColor", iconColor);
      toMapResult.put("iconHaloBlur", iconHaloBlur);
      toMapResult.put("iconHaloColor", iconHaloColor);
      toMapResult.put("iconHaloWidth", iconHaloWidth);
      toMapResult.put("iconOpacity", iconOpacity);
      toMapResult.put("textColor", textColor);
      toMapResult.put("textHaloBlur", textHaloBlur);
      toMapResult.put("textHaloColor", textHaloColor);
      toMapResult.put("textHaloWidth", textHaloWidth);
      toMapResult.put("textOpacity", textOpacity);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PointAnnotation fromMap(@NonNull Map<String, Object> map) {
      PointAnnotation pigeonResult = new PointAnnotation();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object image = map.get("image");
      pigeonResult.setImage((byte[])image);
      Object iconAnchor = map.get("iconAnchor");
      pigeonResult.setIconAnchor(iconAnchor == null ? null : IconAnchor.values()[(int)iconAnchor]);
      Object iconImage = map.get("iconImage");
      pigeonResult.setIconImage((String)iconImage);
      Object iconOffset = map.get("iconOffset");
      pigeonResult.setIconOffset((List<Double>)iconOffset);
      Object iconRotate = map.get("iconRotate");
      pigeonResult.setIconRotate((Double)iconRotate);
      Object iconSize = map.get("iconSize");
      pigeonResult.setIconSize((Double)iconSize);
      Object symbolSortKey = map.get("symbolSortKey");
      pigeonResult.setSymbolSortKey((Double)symbolSortKey);
      Object textAnchor = map.get("textAnchor");
      pigeonResult.setTextAnchor(textAnchor == null ? null : TextAnchor.values()[(int)textAnchor]);
      Object textField = map.get("textField");
      pigeonResult.setTextField((String)textField);
      Object textJustify = map.get("textJustify");
      pigeonResult.setTextJustify(textJustify == null ? null : TextJustify.values()[(int)textJustify]);
      Object textLetterSpacing = map.get("textLetterSpacing");
      pigeonResult.setTextLetterSpacing((Double)textLetterSpacing);
      Object textMaxWidth = map.get("textMaxWidth");
      pigeonResult.setTextMaxWidth((Double)textMaxWidth);
      Object textOffset = map.get("textOffset");
      pigeonResult.setTextOffset((List<Double>)textOffset);
      Object textRadialOffset = map.get("textRadialOffset");
      pigeonResult.setTextRadialOffset((Double)textRadialOffset);
      Object textRotate = map.get("textRotate");
      pigeonResult.setTextRotate((Double)textRotate);
      Object textSize = map.get("textSize");
      pigeonResult.setTextSize((Double)textSize);
      Object textTransform = map.get("textTransform");
      pigeonResult.setTextTransform(textTransform == null ? null : TextTransform.values()[(int)textTransform]);
      Object iconColor = map.get("iconColor");
      pigeonResult.setIconColor((iconColor == null) ? null : ((iconColor instanceof Integer) ? (Integer)iconColor : (Long)iconColor));
      Object iconHaloBlur = map.get("iconHaloBlur");
      pigeonResult.setIconHaloBlur((Double)iconHaloBlur);
      Object iconHaloColor = map.get("iconHaloColor");
      pigeonResult.setIconHaloColor((iconHaloColor == null) ? null : ((iconHaloColor instanceof Integer) ? (Integer)iconHaloColor : (Long)iconHaloColor));
      Object iconHaloWidth = map.get("iconHaloWidth");
      pigeonResult.setIconHaloWidth((Double)iconHaloWidth);
      Object iconOpacity = map.get("iconOpacity");
      pigeonResult.setIconOpacity((Double)iconOpacity);
      Object textColor = map.get("textColor");
      pigeonResult.setTextColor((textColor == null) ? null : ((textColor instanceof Integer) ? (Integer)textColor : (Long)textColor));
      Object textHaloBlur = map.get("textHaloBlur");
      pigeonResult.setTextHaloBlur((Double)textHaloBlur);
      Object textHaloColor = map.get("textHaloColor");
      pigeonResult.setTextHaloColor((textHaloColor == null) ? null : ((textHaloColor instanceof Integer) ? (Integer)textHaloColor : (Long)textHaloColor));
      Object textHaloWidth = map.get("textHaloWidth");
      pigeonResult.setTextHaloWidth((Double)textHaloWidth);
      Object textOpacity = map.get("textOpacity");
      pigeonResult.setTextOpacity((Double)textOpacity);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PointAnnotationOptions {
    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable byte[] image;
    public @Nullable byte[] getImage() { return image; }
    public void setImage(@Nullable byte[] setterArg) {
      this.image = setterArg;
    }

    private @Nullable IconAnchor iconAnchor;
    public @Nullable IconAnchor getIconAnchor() { return iconAnchor; }
    public void setIconAnchor(@Nullable IconAnchor setterArg) {
      this.iconAnchor = setterArg;
    }

    private @Nullable String iconImage;
    public @Nullable String getIconImage() { return iconImage; }
    public void setIconImage(@Nullable String setterArg) {
      this.iconImage = setterArg;
    }

    private @Nullable List<Double> iconOffset;
    public @Nullable List<Double> getIconOffset() { return iconOffset; }
    public void setIconOffset(@Nullable List<Double> setterArg) {
      this.iconOffset = setterArg;
    }

    private @Nullable Double iconRotate;
    public @Nullable Double getIconRotate() { return iconRotate; }
    public void setIconRotate(@Nullable Double setterArg) {
      this.iconRotate = setterArg;
    }

    private @Nullable Double iconSize;
    public @Nullable Double getIconSize() { return iconSize; }
    public void setIconSize(@Nullable Double setterArg) {
      this.iconSize = setterArg;
    }

    private @Nullable Double symbolSortKey;
    public @Nullable Double getSymbolSortKey() { return symbolSortKey; }
    public void setSymbolSortKey(@Nullable Double setterArg) {
      this.symbolSortKey = setterArg;
    }

    private @Nullable TextAnchor textAnchor;
    public @Nullable TextAnchor getTextAnchor() { return textAnchor; }
    public void setTextAnchor(@Nullable TextAnchor setterArg) {
      this.textAnchor = setterArg;
    }

    private @Nullable String textField;
    public @Nullable String getTextField() { return textField; }
    public void setTextField(@Nullable String setterArg) {
      this.textField = setterArg;
    }

    private @Nullable TextJustify textJustify;
    public @Nullable TextJustify getTextJustify() { return textJustify; }
    public void setTextJustify(@Nullable TextJustify setterArg) {
      this.textJustify = setterArg;
    }

    private @Nullable Double textLetterSpacing;
    public @Nullable Double getTextLetterSpacing() { return textLetterSpacing; }
    public void setTextLetterSpacing(@Nullable Double setterArg) {
      this.textLetterSpacing = setterArg;
    }

    private @Nullable Double textMaxWidth;
    public @Nullable Double getTextMaxWidth() { return textMaxWidth; }
    public void setTextMaxWidth(@Nullable Double setterArg) {
      this.textMaxWidth = setterArg;
    }

    private @Nullable List<Double> textOffset;
    public @Nullable List<Double> getTextOffset() { return textOffset; }
    public void setTextOffset(@Nullable List<Double> setterArg) {
      this.textOffset = setterArg;
    }

    private @Nullable Double textRadialOffset;
    public @Nullable Double getTextRadialOffset() { return textRadialOffset; }
    public void setTextRadialOffset(@Nullable Double setterArg) {
      this.textRadialOffset = setterArg;
    }

    private @Nullable Double textRotate;
    public @Nullable Double getTextRotate() { return textRotate; }
    public void setTextRotate(@Nullable Double setterArg) {
      this.textRotate = setterArg;
    }

    private @Nullable Double textSize;
    public @Nullable Double getTextSize() { return textSize; }
    public void setTextSize(@Nullable Double setterArg) {
      this.textSize = setterArg;
    }

    private @Nullable TextTransform textTransform;
    public @Nullable TextTransform getTextTransform() { return textTransform; }
    public void setTextTransform(@Nullable TextTransform setterArg) {
      this.textTransform = setterArg;
    }

    private @Nullable Long iconColor;
    public @Nullable Long getIconColor() { return iconColor; }
    public void setIconColor(@Nullable Long setterArg) {
      this.iconColor = setterArg;
    }

    private @Nullable Double iconHaloBlur;
    public @Nullable Double getIconHaloBlur() { return iconHaloBlur; }
    public void setIconHaloBlur(@Nullable Double setterArg) {
      this.iconHaloBlur = setterArg;
    }

    private @Nullable Long iconHaloColor;
    public @Nullable Long getIconHaloColor() { return iconHaloColor; }
    public void setIconHaloColor(@Nullable Long setterArg) {
      this.iconHaloColor = setterArg;
    }

    private @Nullable Double iconHaloWidth;
    public @Nullable Double getIconHaloWidth() { return iconHaloWidth; }
    public void setIconHaloWidth(@Nullable Double setterArg) {
      this.iconHaloWidth = setterArg;
    }

    private @Nullable Double iconOpacity;
    public @Nullable Double getIconOpacity() { return iconOpacity; }
    public void setIconOpacity(@Nullable Double setterArg) {
      this.iconOpacity = setterArg;
    }

    private @Nullable Long textColor;
    public @Nullable Long getTextColor() { return textColor; }
    public void setTextColor(@Nullable Long setterArg) {
      this.textColor = setterArg;
    }

    private @Nullable Double textHaloBlur;
    public @Nullable Double getTextHaloBlur() { return textHaloBlur; }
    public void setTextHaloBlur(@Nullable Double setterArg) {
      this.textHaloBlur = setterArg;
    }

    private @Nullable Long textHaloColor;
    public @Nullable Long getTextHaloColor() { return textHaloColor; }
    public void setTextHaloColor(@Nullable Long setterArg) {
      this.textHaloColor = setterArg;
    }

    private @Nullable Double textHaloWidth;
    public @Nullable Double getTextHaloWidth() { return textHaloWidth; }
    public void setTextHaloWidth(@Nullable Double setterArg) {
      this.textHaloWidth = setterArg;
    }

    private @Nullable Double textOpacity;
    public @Nullable Double getTextOpacity() { return textOpacity; }
    public void setTextOpacity(@Nullable Double setterArg) {
      this.textOpacity = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable byte[] image;
      public @NonNull Builder setImage(@Nullable byte[] setterArg) {
        this.image = setterArg;
        return this;
      }
      private @Nullable IconAnchor iconAnchor;
      public @NonNull Builder setIconAnchor(@Nullable IconAnchor setterArg) {
        this.iconAnchor = setterArg;
        return this;
      }
      private @Nullable String iconImage;
      public @NonNull Builder setIconImage(@Nullable String setterArg) {
        this.iconImage = setterArg;
        return this;
      }
      private @Nullable List<Double> iconOffset;
      public @NonNull Builder setIconOffset(@Nullable List<Double> setterArg) {
        this.iconOffset = setterArg;
        return this;
      }
      private @Nullable Double iconRotate;
      public @NonNull Builder setIconRotate(@Nullable Double setterArg) {
        this.iconRotate = setterArg;
        return this;
      }
      private @Nullable Double iconSize;
      public @NonNull Builder setIconSize(@Nullable Double setterArg) {
        this.iconSize = setterArg;
        return this;
      }
      private @Nullable Double symbolSortKey;
      public @NonNull Builder setSymbolSortKey(@Nullable Double setterArg) {
        this.symbolSortKey = setterArg;
        return this;
      }
      private @Nullable TextAnchor textAnchor;
      public @NonNull Builder setTextAnchor(@Nullable TextAnchor setterArg) {
        this.textAnchor = setterArg;
        return this;
      }
      private @Nullable String textField;
      public @NonNull Builder setTextField(@Nullable String setterArg) {
        this.textField = setterArg;
        return this;
      }
      private @Nullable TextJustify textJustify;
      public @NonNull Builder setTextJustify(@Nullable TextJustify setterArg) {
        this.textJustify = setterArg;
        return this;
      }
      private @Nullable Double textLetterSpacing;
      public @NonNull Builder setTextLetterSpacing(@Nullable Double setterArg) {
        this.textLetterSpacing = setterArg;
        return this;
      }
      private @Nullable Double textMaxWidth;
      public @NonNull Builder setTextMaxWidth(@Nullable Double setterArg) {
        this.textMaxWidth = setterArg;
        return this;
      }
      private @Nullable List<Double> textOffset;
      public @NonNull Builder setTextOffset(@Nullable List<Double> setterArg) {
        this.textOffset = setterArg;
        return this;
      }
      private @Nullable Double textRadialOffset;
      public @NonNull Builder setTextRadialOffset(@Nullable Double setterArg) {
        this.textRadialOffset = setterArg;
        return this;
      }
      private @Nullable Double textRotate;
      public @NonNull Builder setTextRotate(@Nullable Double setterArg) {
        this.textRotate = setterArg;
        return this;
      }
      private @Nullable Double textSize;
      public @NonNull Builder setTextSize(@Nullable Double setterArg) {
        this.textSize = setterArg;
        return this;
      }
      private @Nullable TextTransform textTransform;
      public @NonNull Builder setTextTransform(@Nullable TextTransform setterArg) {
        this.textTransform = setterArg;
        return this;
      }
      private @Nullable Long iconColor;
      public @NonNull Builder setIconColor(@Nullable Long setterArg) {
        this.iconColor = setterArg;
        return this;
      }
      private @Nullable Double iconHaloBlur;
      public @NonNull Builder setIconHaloBlur(@Nullable Double setterArg) {
        this.iconHaloBlur = setterArg;
        return this;
      }
      private @Nullable Long iconHaloColor;
      public @NonNull Builder setIconHaloColor(@Nullable Long setterArg) {
        this.iconHaloColor = setterArg;
        return this;
      }
      private @Nullable Double iconHaloWidth;
      public @NonNull Builder setIconHaloWidth(@Nullable Double setterArg) {
        this.iconHaloWidth = setterArg;
        return this;
      }
      private @Nullable Double iconOpacity;
      public @NonNull Builder setIconOpacity(@Nullable Double setterArg) {
        this.iconOpacity = setterArg;
        return this;
      }
      private @Nullable Long textColor;
      public @NonNull Builder setTextColor(@Nullable Long setterArg) {
        this.textColor = setterArg;
        return this;
      }
      private @Nullable Double textHaloBlur;
      public @NonNull Builder setTextHaloBlur(@Nullable Double setterArg) {
        this.textHaloBlur = setterArg;
        return this;
      }
      private @Nullable Long textHaloColor;
      public @NonNull Builder setTextHaloColor(@Nullable Long setterArg) {
        this.textHaloColor = setterArg;
        return this;
      }
      private @Nullable Double textHaloWidth;
      public @NonNull Builder setTextHaloWidth(@Nullable Double setterArg) {
        this.textHaloWidth = setterArg;
        return this;
      }
      private @Nullable Double textOpacity;
      public @NonNull Builder setTextOpacity(@Nullable Double setterArg) {
        this.textOpacity = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PointAnnotationOptions build() {
        PointAnnotationOptions pigeonReturn = new PointAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setImage(image);
        pigeonReturn.setIconAnchor(iconAnchor);
        pigeonReturn.setIconImage(iconImage);
        pigeonReturn.setIconOffset(iconOffset);
        pigeonReturn.setIconRotate(iconRotate);
        pigeonReturn.setIconSize(iconSize);
        pigeonReturn.setSymbolSortKey(symbolSortKey);
        pigeonReturn.setTextAnchor(textAnchor);
        pigeonReturn.setTextField(textField);
        pigeonReturn.setTextJustify(textJustify);
        pigeonReturn.setTextLetterSpacing(textLetterSpacing);
        pigeonReturn.setTextMaxWidth(textMaxWidth);
        pigeonReturn.setTextOffset(textOffset);
        pigeonReturn.setTextRadialOffset(textRadialOffset);
        pigeonReturn.setTextRotate(textRotate);
        pigeonReturn.setTextSize(textSize);
        pigeonReturn.setTextTransform(textTransform);
        pigeonReturn.setIconColor(iconColor);
        pigeonReturn.setIconHaloBlur(iconHaloBlur);
        pigeonReturn.setIconHaloColor(iconHaloColor);
        pigeonReturn.setIconHaloWidth(iconHaloWidth);
        pigeonReturn.setIconOpacity(iconOpacity);
        pigeonReturn.setTextColor(textColor);
        pigeonReturn.setTextHaloBlur(textHaloBlur);
        pigeonReturn.setTextHaloColor(textHaloColor);
        pigeonReturn.setTextHaloWidth(textHaloWidth);
        pigeonReturn.setTextOpacity(textOpacity);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("geometry", geometry);
      toMapResult.put("image", image);
      toMapResult.put("iconAnchor", iconAnchor == null ? null : iconAnchor.index);
      toMapResult.put("iconImage", iconImage);
      toMapResult.put("iconOffset", iconOffset);
      toMapResult.put("iconRotate", iconRotate);
      toMapResult.put("iconSize", iconSize);
      toMapResult.put("symbolSortKey", symbolSortKey);
      toMapResult.put("textAnchor", textAnchor == null ? null : textAnchor.index);
      toMapResult.put("textField", textField);
      toMapResult.put("textJustify", textJustify == null ? null : textJustify.index);
      toMapResult.put("textLetterSpacing", textLetterSpacing);
      toMapResult.put("textMaxWidth", textMaxWidth);
      toMapResult.put("textOffset", textOffset);
      toMapResult.put("textRadialOffset", textRadialOffset);
      toMapResult.put("textRotate", textRotate);
      toMapResult.put("textSize", textSize);
      toMapResult.put("textTransform", textTransform == null ? null : textTransform.index);
      toMapResult.put("iconColor", iconColor);
      toMapResult.put("iconHaloBlur", iconHaloBlur);
      toMapResult.put("iconHaloColor", iconHaloColor);
      toMapResult.put("iconHaloWidth", iconHaloWidth);
      toMapResult.put("iconOpacity", iconOpacity);
      toMapResult.put("textColor", textColor);
      toMapResult.put("textHaloBlur", textHaloBlur);
      toMapResult.put("textHaloColor", textHaloColor);
      toMapResult.put("textHaloWidth", textHaloWidth);
      toMapResult.put("textOpacity", textOpacity);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PointAnnotationOptions fromMap(@NonNull Map<String, Object> map) {
      PointAnnotationOptions pigeonResult = new PointAnnotationOptions();
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object image = map.get("image");
      pigeonResult.setImage((byte[])image);
      Object iconAnchor = map.get("iconAnchor");
      pigeonResult.setIconAnchor(iconAnchor == null ? null : IconAnchor.values()[(int)iconAnchor]);
      Object iconImage = map.get("iconImage");
      pigeonResult.setIconImage((String)iconImage);
      Object iconOffset = map.get("iconOffset");
      pigeonResult.setIconOffset((List<Double>)iconOffset);
      Object iconRotate = map.get("iconRotate");
      pigeonResult.setIconRotate((Double)iconRotate);
      Object iconSize = map.get("iconSize");
      pigeonResult.setIconSize((Double)iconSize);
      Object symbolSortKey = map.get("symbolSortKey");
      pigeonResult.setSymbolSortKey((Double)symbolSortKey);
      Object textAnchor = map.get("textAnchor");
      pigeonResult.setTextAnchor(textAnchor == null ? null : TextAnchor.values()[(int)textAnchor]);
      Object textField = map.get("textField");
      pigeonResult.setTextField((String)textField);
      Object textJustify = map.get("textJustify");
      pigeonResult.setTextJustify(textJustify == null ? null : TextJustify.values()[(int)textJustify]);
      Object textLetterSpacing = map.get("textLetterSpacing");
      pigeonResult.setTextLetterSpacing((Double)textLetterSpacing);
      Object textMaxWidth = map.get("textMaxWidth");
      pigeonResult.setTextMaxWidth((Double)textMaxWidth);
      Object textOffset = map.get("textOffset");
      pigeonResult.setTextOffset((List<Double>)textOffset);
      Object textRadialOffset = map.get("textRadialOffset");
      pigeonResult.setTextRadialOffset((Double)textRadialOffset);
      Object textRotate = map.get("textRotate");
      pigeonResult.setTextRotate((Double)textRotate);
      Object textSize = map.get("textSize");
      pigeonResult.setTextSize((Double)textSize);
      Object textTransform = map.get("textTransform");
      pigeonResult.setTextTransform(textTransform == null ? null : TextTransform.values()[(int)textTransform]);
      Object iconColor = map.get("iconColor");
      pigeonResult.setIconColor((iconColor == null) ? null : ((iconColor instanceof Integer) ? (Integer)iconColor : (Long)iconColor));
      Object iconHaloBlur = map.get("iconHaloBlur");
      pigeonResult.setIconHaloBlur((Double)iconHaloBlur);
      Object iconHaloColor = map.get("iconHaloColor");
      pigeonResult.setIconHaloColor((iconHaloColor == null) ? null : ((iconHaloColor instanceof Integer) ? (Integer)iconHaloColor : (Long)iconHaloColor));
      Object iconHaloWidth = map.get("iconHaloWidth");
      pigeonResult.setIconHaloWidth((Double)iconHaloWidth);
      Object iconOpacity = map.get("iconOpacity");
      pigeonResult.setIconOpacity((Double)iconOpacity);
      Object textColor = map.get("textColor");
      pigeonResult.setTextColor((textColor == null) ? null : ((textColor instanceof Integer) ? (Integer)textColor : (Long)textColor));
      Object textHaloBlur = map.get("textHaloBlur");
      pigeonResult.setTextHaloBlur((Double)textHaloBlur);
      Object textHaloColor = map.get("textHaloColor");
      pigeonResult.setTextHaloColor((textHaloColor == null) ? null : ((textHaloColor instanceof Integer) ? (Integer)textHaloColor : (Long)textHaloColor));
      Object textHaloWidth = map.get("textHaloWidth");
      pigeonResult.setTextHaloWidth((Double)textHaloWidth);
      Object textOpacity = map.get("textOpacity");
      pigeonResult.setTextOpacity((Double)textOpacity);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OnPointAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnPointAnnotationClickListenerCodec INSTANCE = new OnPointAnnotationClickListenerCodec();
    private OnPointAnnotationClickListenerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PointAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PointAnnotation) {
        stream.write(128);
        writeValue(stream, ((PointAnnotation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class OnPointAnnotationClickListener {
    private final BinaryMessenger binaryMessenger;
    public OnPointAnnotationClickListener(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return OnPointAnnotationClickListenerCodec.INSTANCE;
    }

    public void onPointAnnotationClick(@NonNull PointAnnotation annotationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OnPointAnnotationClickListener.onPointAnnotationClick", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(annotationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class _PointAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _PointAnnotationMessagerCodec INSTANCE = new _PointAnnotationMessagerCodec();
    private _PointAnnotationMessagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PointAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PointAnnotationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PointAnnotation) {
        stream.write(128);
        writeValue(stream, ((PointAnnotation) value).toMap());
      } else 
      if (value instanceof PointAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((PointAnnotationOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _PointAnnotationMessager {
    void create(@NonNull String managerId, @NonNull PointAnnotationOptions annotationOption, Result<PointAnnotation> result);
    void createMulti(@NonNull String managerId, @NonNull List<PointAnnotationOptions> annotationOptions, Result<List<PointAnnotation>> result);
    void update(@NonNull String managerId, @NonNull PointAnnotation annotation, Result<Void> result);
    void delete(@NonNull String managerId, @NonNull PointAnnotation annotation, Result<Void> result);
    void deleteAll(@NonNull String managerId, Result<Void> result);
    void getAnnotations(@NonNull String managerId, Result<List<PointAnnotation>> result);
    void setIconAllowOverlap(@NonNull String managerId, @NonNull Boolean iconAllowOverlap, Result<Void> result);
    void getIconAllowOverlap(@NonNull String managerId, Result<Boolean> result);
    void setIconIgnorePlacement(@NonNull String managerId, @NonNull Boolean iconIgnorePlacement, Result<Void> result);
    void getIconIgnorePlacement(@NonNull String managerId, Result<Boolean> result);
    void setIconKeepUpright(@NonNull String managerId, @NonNull Boolean iconKeepUpright, Result<Void> result);
    void getIconKeepUpright(@NonNull String managerId, Result<Boolean> result);
    void setIconOptional(@NonNull String managerId, @NonNull Boolean iconOptional, Result<Void> result);
    void getIconOptional(@NonNull String managerId, Result<Boolean> result);
    void setIconPadding(@NonNull String managerId, @NonNull Double iconPadding, Result<Void> result);
    void getIconPadding(@NonNull String managerId, Result<Double> result);
    void setIconPitchAlignment(@NonNull String managerId, @NonNull IconPitchAlignment iconPitchAlignment, Result<Void> result);
    void getIconPitchAlignment(@NonNull String managerId, Result<Long> result);
    void setIconRotationAlignment(@NonNull String managerId, @NonNull IconRotationAlignment iconRotationAlignment, Result<Void> result);
    void getIconRotationAlignment(@NonNull String managerId, Result<Long> result);
    void setIconTextFit(@NonNull String managerId, @NonNull IconTextFit iconTextFit, Result<Void> result);
    void getIconTextFit(@NonNull String managerId, Result<Long> result);
    void setIconTextFitPadding(@NonNull String managerId, @NonNull List<Double> iconTextFitPadding, Result<Void> result);
    void getIconTextFitPadding(@NonNull String managerId, Result<List<Double>> result);
    void setSymbolAvoidEdges(@NonNull String managerId, @NonNull Boolean symbolAvoidEdges, Result<Void> result);
    void getSymbolAvoidEdges(@NonNull String managerId, Result<Boolean> result);
    void setSymbolPlacement(@NonNull String managerId, @NonNull SymbolPlacement symbolPlacement, Result<Void> result);
    void getSymbolPlacement(@NonNull String managerId, Result<Long> result);
    void setSymbolSpacing(@NonNull String managerId, @NonNull Double symbolSpacing, Result<Void> result);
    void getSymbolSpacing(@NonNull String managerId, Result<Double> result);
    void setSymbolZOrder(@NonNull String managerId, @NonNull SymbolZOrder symbolZOrder, Result<Void> result);
    void getSymbolZOrder(@NonNull String managerId, Result<Long> result);
    void setTextAllowOverlap(@NonNull String managerId, @NonNull Boolean textAllowOverlap, Result<Void> result);
    void getTextAllowOverlap(@NonNull String managerId, Result<Boolean> result);
    void setTextFont(@NonNull String managerId, @NonNull List<String> textFont, Result<Void> result);
    void getTextFont(@NonNull String managerId, Result<List<String>> result);
    void setTextIgnorePlacement(@NonNull String managerId, @NonNull Boolean textIgnorePlacement, Result<Void> result);
    void getTextIgnorePlacement(@NonNull String managerId, Result<Boolean> result);
    void setTextKeepUpright(@NonNull String managerId, @NonNull Boolean textKeepUpright, Result<Void> result);
    void getTextKeepUpright(@NonNull String managerId, Result<Boolean> result);
    void setTextLineHeight(@NonNull String managerId, @NonNull Double textLineHeight, Result<Void> result);
    void getTextLineHeight(@NonNull String managerId, Result<Double> result);
    void setTextMaxAngle(@NonNull String managerId, @NonNull Double textMaxAngle, Result<Void> result);
    void getTextMaxAngle(@NonNull String managerId, Result<Double> result);
    void setTextOptional(@NonNull String managerId, @NonNull Boolean textOptional, Result<Void> result);
    void getTextOptional(@NonNull String managerId, Result<Boolean> result);
    void setTextPadding(@NonNull String managerId, @NonNull Double textPadding, Result<Void> result);
    void getTextPadding(@NonNull String managerId, Result<Double> result);
    void setTextPitchAlignment(@NonNull String managerId, @NonNull TextPitchAlignment textPitchAlignment, Result<Void> result);
    void getTextPitchAlignment(@NonNull String managerId, Result<Long> result);
    void setTextRotationAlignment(@NonNull String managerId, @NonNull TextRotationAlignment textRotationAlignment, Result<Void> result);
    void getTextRotationAlignment(@NonNull String managerId, Result<Long> result);
    void setIconTranslate(@NonNull String managerId, @NonNull List<Double> iconTranslate, Result<Void> result);
    void getIconTranslate(@NonNull String managerId, Result<List<Double>> result);
    void setIconTranslateAnchor(@NonNull String managerId, @NonNull IconTranslateAnchor iconTranslateAnchor, Result<Void> result);
    void getIconTranslateAnchor(@NonNull String managerId, Result<Long> result);
    void setTextTranslate(@NonNull String managerId, @NonNull List<Double> textTranslate, Result<Void> result);
    void getTextTranslate(@NonNull String managerId, Result<List<Double>> result);
    void setTextTranslateAnchor(@NonNull String managerId, @NonNull TextTranslateAnchor textTranslateAnchor, Result<Void> result);
    void getTextTranslateAnchor(@NonNull String managerId, Result<Long> result);

    /** The codec used by _PointAnnotationMessager. */
    static MessageCodec<Object> getCodec() {
      return _PointAnnotationMessagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_PointAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _PointAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PointAnnotationOptions annotationOptionArg = (PointAnnotationOptions)args.get(1);
              if (annotationOptionArg == null) {
                throw new NullPointerException("annotationOptionArg unexpectedly null.");
              }
              Result<PointAnnotation> resultCallback = new Result<PointAnnotation>() {
                public void success(PointAnnotation result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(managerIdArg, annotationOptionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<PointAnnotationOptions> annotationOptionsArg = (List<PointAnnotationOptions>)args.get(1);
              if (annotationOptionsArg == null) {
                throw new NullPointerException("annotationOptionsArg unexpectedly null.");
              }
              Result<List<PointAnnotation>> resultCallback = new Result<List<PointAnnotation>>() {
                public void success(List<PointAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PointAnnotation annotationArg = (PointAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.update(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PointAnnotation annotationArg = (PointAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.delete(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.deleteAll(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getAnnotations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<PointAnnotation>> resultCallback = new Result<List<PointAnnotation>>() {
                public void success(List<PointAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAnnotations(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconAllowOverlap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean iconAllowOverlapArg = (Boolean)args.get(1);
              if (iconAllowOverlapArg == null) {
                throw new NullPointerException("iconAllowOverlapArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconAllowOverlap(managerIdArg, iconAllowOverlapArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconAllowOverlap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconAllowOverlap(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconIgnorePlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean iconIgnorePlacementArg = (Boolean)args.get(1);
              if (iconIgnorePlacementArg == null) {
                throw new NullPointerException("iconIgnorePlacementArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconIgnorePlacement(managerIdArg, iconIgnorePlacementArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconIgnorePlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconIgnorePlacement(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconKeepUpright", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean iconKeepUprightArg = (Boolean)args.get(1);
              if (iconKeepUprightArg == null) {
                throw new NullPointerException("iconKeepUprightArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconKeepUpright(managerIdArg, iconKeepUprightArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconKeepUpright", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconKeepUpright(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconOptional", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean iconOptionalArg = (Boolean)args.get(1);
              if (iconOptionalArg == null) {
                throw new NullPointerException("iconOptionalArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconOptional(managerIdArg, iconOptionalArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconOptional", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconOptional(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double iconPaddingArg = (Double)args.get(1);
              if (iconPaddingArg == null) {
                throw new NullPointerException("iconPaddingArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconPadding(managerIdArg, iconPaddingArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconPadding(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconPitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              IconPitchAlignment iconPitchAlignmentArg = args.get(1) == null ? null : IconPitchAlignment.values()[(int)args.get(1)];
              if (iconPitchAlignmentArg == null) {
                throw new NullPointerException("iconPitchAlignmentArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconPitchAlignment(managerIdArg, iconPitchAlignmentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconPitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconPitchAlignment(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconRotationAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              IconRotationAlignment iconRotationAlignmentArg = args.get(1) == null ? null : IconRotationAlignment.values()[(int)args.get(1)];
              if (iconRotationAlignmentArg == null) {
                throw new NullPointerException("iconRotationAlignmentArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconRotationAlignment(managerIdArg, iconRotationAlignmentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconRotationAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconRotationAlignment(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconTextFit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              IconTextFit iconTextFitArg = args.get(1) == null ? null : IconTextFit.values()[(int)args.get(1)];
              if (iconTextFitArg == null) {
                throw new NullPointerException("iconTextFitArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconTextFit(managerIdArg, iconTextFitArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconTextFit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconTextFit(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconTextFitPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> iconTextFitPaddingArg = (List<Double>)args.get(1);
              if (iconTextFitPaddingArg == null) {
                throw new NullPointerException("iconTextFitPaddingArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconTextFitPadding(managerIdArg, iconTextFitPaddingArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconTextFitPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconTextFitPadding(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setSymbolAvoidEdges", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean symbolAvoidEdgesArg = (Boolean)args.get(1);
              if (symbolAvoidEdgesArg == null) {
                throw new NullPointerException("symbolAvoidEdgesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setSymbolAvoidEdges(managerIdArg, symbolAvoidEdgesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getSymbolAvoidEdges", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSymbolAvoidEdges(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setSymbolPlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              SymbolPlacement symbolPlacementArg = args.get(1) == null ? null : SymbolPlacement.values()[(int)args.get(1)];
              if (symbolPlacementArg == null) {
                throw new NullPointerException("symbolPlacementArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setSymbolPlacement(managerIdArg, symbolPlacementArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getSymbolPlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSymbolPlacement(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setSymbolSpacing", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double symbolSpacingArg = (Double)args.get(1);
              if (symbolSpacingArg == null) {
                throw new NullPointerException("symbolSpacingArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setSymbolSpacing(managerIdArg, symbolSpacingArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getSymbolSpacing", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSymbolSpacing(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setSymbolZOrder", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              SymbolZOrder symbolZOrderArg = args.get(1) == null ? null : SymbolZOrder.values()[(int)args.get(1)];
              if (symbolZOrderArg == null) {
                throw new NullPointerException("symbolZOrderArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setSymbolZOrder(managerIdArg, symbolZOrderArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getSymbolZOrder", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSymbolZOrder(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextAllowOverlap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean textAllowOverlapArg = (Boolean)args.get(1);
              if (textAllowOverlapArg == null) {
                throw new NullPointerException("textAllowOverlapArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextAllowOverlap(managerIdArg, textAllowOverlapArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextAllowOverlap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextAllowOverlap(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextFont", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<String> textFontArg = (List<String>)args.get(1);
              if (textFontArg == null) {
                throw new NullPointerException("textFontArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextFont(managerIdArg, textFontArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextFont", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<String>> resultCallback = new Result<List<String>>() {
                public void success(List<String> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextFont(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextIgnorePlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean textIgnorePlacementArg = (Boolean)args.get(1);
              if (textIgnorePlacementArg == null) {
                throw new NullPointerException("textIgnorePlacementArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextIgnorePlacement(managerIdArg, textIgnorePlacementArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextIgnorePlacement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextIgnorePlacement(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextKeepUpright", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean textKeepUprightArg = (Boolean)args.get(1);
              if (textKeepUprightArg == null) {
                throw new NullPointerException("textKeepUprightArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextKeepUpright(managerIdArg, textKeepUprightArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextKeepUpright", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextKeepUpright(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextLineHeight", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double textLineHeightArg = (Double)args.get(1);
              if (textLineHeightArg == null) {
                throw new NullPointerException("textLineHeightArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextLineHeight(managerIdArg, textLineHeightArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextLineHeight", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextLineHeight(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextMaxAngle", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double textMaxAngleArg = (Double)args.get(1);
              if (textMaxAngleArg == null) {
                throw new NullPointerException("textMaxAngleArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextMaxAngle(managerIdArg, textMaxAngleArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextMaxAngle", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextMaxAngle(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextOptional", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Boolean textOptionalArg = (Boolean)args.get(1);
              if (textOptionalArg == null) {
                throw new NullPointerException("textOptionalArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextOptional(managerIdArg, textOptionalArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextOptional", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextOptional(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double textPaddingArg = (Double)args.get(1);
              if (textPaddingArg == null) {
                throw new NullPointerException("textPaddingArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextPadding(managerIdArg, textPaddingArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextPadding", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextPadding(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextPitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              TextPitchAlignment textPitchAlignmentArg = args.get(1) == null ? null : TextPitchAlignment.values()[(int)args.get(1)];
              if (textPitchAlignmentArg == null) {
                throw new NullPointerException("textPitchAlignmentArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextPitchAlignment(managerIdArg, textPitchAlignmentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextPitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextPitchAlignment(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextRotationAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              TextRotationAlignment textRotationAlignmentArg = args.get(1) == null ? null : TextRotationAlignment.values()[(int)args.get(1)];
              if (textRotationAlignmentArg == null) {
                throw new NullPointerException("textRotationAlignmentArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextRotationAlignment(managerIdArg, textRotationAlignmentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextRotationAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextRotationAlignment(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> iconTranslateArg = (List<Double>)args.get(1);
              if (iconTranslateArg == null) {
                throw new NullPointerException("iconTranslateArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconTranslate(managerIdArg, iconTranslateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconTranslate(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setIconTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              IconTranslateAnchor iconTranslateAnchorArg = args.get(1) == null ? null : IconTranslateAnchor.values()[(int)args.get(1)];
              if (iconTranslateAnchorArg == null) {
                throw new NullPointerException("iconTranslateAnchorArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setIconTranslateAnchor(managerIdArg, iconTranslateAnchorArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getIconTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getIconTranslateAnchor(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> textTranslateArg = (List<Double>)args.get(1);
              if (textTranslateArg == null) {
                throw new NullPointerException("textTranslateArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextTranslate(managerIdArg, textTranslateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextTranslate(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.setTextTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              TextTranslateAnchor textTranslateAnchorArg = args.get(1) == null ? null : TextTranslateAnchor.values()[(int)args.get(1)];
              if (textTranslateAnchorArg == null) {
                throw new NullPointerException("textTranslateAnchorArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setTextTranslateAnchor(managerIdArg, textTranslateAnchorArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PointAnnotationMessager.getTextTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTextTranslateAnchor(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
