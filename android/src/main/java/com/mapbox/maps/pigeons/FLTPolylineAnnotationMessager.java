// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTPolylineAnnotationMessager {

  public enum LineCap {
    BUTT(0),
    ROUND(1),
    SQUARE(2);

    private int index;
    private LineCap(final int index) {
      this.index = index;
    }
  }

  public enum LineJoin {
    BEVEL(0),
    ROUND(1),
    MITER(2);

    private int index;
    private LineJoin(final int index) {
      this.index = index;
    }
  }

  public enum LineTranslateAnchor {
    MAP(0),
    VIEWPORT(1);

    private int index;
    private LineTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PolylineAnnotation {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable LineJoin lineJoin;
    public @Nullable LineJoin getLineJoin() { return lineJoin; }
    public void setLineJoin(@Nullable LineJoin setterArg) {
      this.lineJoin = setterArg;
    }

    private @Nullable Double lineSortKey;
    public @Nullable Double getLineSortKey() { return lineSortKey; }
    public void setLineSortKey(@Nullable Double setterArg) {
      this.lineSortKey = setterArg;
    }

    private @Nullable Double lineBlur;
    public @Nullable Double getLineBlur() { return lineBlur; }
    public void setLineBlur(@Nullable Double setterArg) {
      this.lineBlur = setterArg;
    }

    private @Nullable Long lineColor;
    public @Nullable Long getLineColor() { return lineColor; }
    public void setLineColor(@Nullable Long setterArg) {
      this.lineColor = setterArg;
    }

    private @Nullable Double lineGapWidth;
    public @Nullable Double getLineGapWidth() { return lineGapWidth; }
    public void setLineGapWidth(@Nullable Double setterArg) {
      this.lineGapWidth = setterArg;
    }

    private @Nullable Double lineOffset;
    public @Nullable Double getLineOffset() { return lineOffset; }
    public void setLineOffset(@Nullable Double setterArg) {
      this.lineOffset = setterArg;
    }

    private @Nullable Double lineOpacity;
    public @Nullable Double getLineOpacity() { return lineOpacity; }
    public void setLineOpacity(@Nullable Double setterArg) {
      this.lineOpacity = setterArg;
    }

    private @Nullable String linePattern;
    public @Nullable String getLinePattern() { return linePattern; }
    public void setLinePattern(@Nullable String setterArg) {
      this.linePattern = setterArg;
    }

    private @Nullable Double lineWidth;
    public @Nullable Double getLineWidth() { return lineWidth; }
    public void setLineWidth(@Nullable Double setterArg) {
      this.lineWidth = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PolylineAnnotation() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable LineJoin lineJoin;
      public @NonNull Builder setLineJoin(@Nullable LineJoin setterArg) {
        this.lineJoin = setterArg;
        return this;
      }
      private @Nullable Double lineSortKey;
      public @NonNull Builder setLineSortKey(@Nullable Double setterArg) {
        this.lineSortKey = setterArg;
        return this;
      }
      private @Nullable Double lineBlur;
      public @NonNull Builder setLineBlur(@Nullable Double setterArg) {
        this.lineBlur = setterArg;
        return this;
      }
      private @Nullable Long lineColor;
      public @NonNull Builder setLineColor(@Nullable Long setterArg) {
        this.lineColor = setterArg;
        return this;
      }
      private @Nullable Double lineGapWidth;
      public @NonNull Builder setLineGapWidth(@Nullable Double setterArg) {
        this.lineGapWidth = setterArg;
        return this;
      }
      private @Nullable Double lineOffset;
      public @NonNull Builder setLineOffset(@Nullable Double setterArg) {
        this.lineOffset = setterArg;
        return this;
      }
      private @Nullable Double lineOpacity;
      public @NonNull Builder setLineOpacity(@Nullable Double setterArg) {
        this.lineOpacity = setterArg;
        return this;
      }
      private @Nullable String linePattern;
      public @NonNull Builder setLinePattern(@Nullable String setterArg) {
        this.linePattern = setterArg;
        return this;
      }
      private @Nullable Double lineWidth;
      public @NonNull Builder setLineWidth(@Nullable Double setterArg) {
        this.lineWidth = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PolylineAnnotation build() {
        PolylineAnnotation pigeonReturn = new PolylineAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setLineJoin(lineJoin);
        pigeonReturn.setLineSortKey(lineSortKey);
        pigeonReturn.setLineBlur(lineBlur);
        pigeonReturn.setLineColor(lineColor);
        pigeonReturn.setLineGapWidth(lineGapWidth);
        pigeonReturn.setLineOffset(lineOffset);
        pigeonReturn.setLineOpacity(lineOpacity);
        pigeonReturn.setLinePattern(linePattern);
        pigeonReturn.setLineWidth(lineWidth);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("geometry", geometry);
      toMapResult.put("lineJoin", lineJoin == null ? null : lineJoin.index);
      toMapResult.put("lineSortKey", lineSortKey);
      toMapResult.put("lineBlur", lineBlur);
      toMapResult.put("lineColor", lineColor);
      toMapResult.put("lineGapWidth", lineGapWidth);
      toMapResult.put("lineOffset", lineOffset);
      toMapResult.put("lineOpacity", lineOpacity);
      toMapResult.put("linePattern", linePattern);
      toMapResult.put("lineWidth", lineWidth);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PolylineAnnotation fromMap(@NonNull Map<String, Object> map) {
      PolylineAnnotation pigeonResult = new PolylineAnnotation();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object lineJoin = map.get("lineJoin");
      pigeonResult.setLineJoin(lineJoin == null ? null : LineJoin.values()[(int)lineJoin]);
      Object lineSortKey = map.get("lineSortKey");
      pigeonResult.setLineSortKey((Double)lineSortKey);
      Object lineBlur = map.get("lineBlur");
      pigeonResult.setLineBlur((Double)lineBlur);
      Object lineColor = map.get("lineColor");
      pigeonResult.setLineColor((lineColor == null) ? null : ((lineColor instanceof Integer) ? (Integer)lineColor : (Long)lineColor));
      Object lineGapWidth = map.get("lineGapWidth");
      pigeonResult.setLineGapWidth((Double)lineGapWidth);
      Object lineOffset = map.get("lineOffset");
      pigeonResult.setLineOffset((Double)lineOffset);
      Object lineOpacity = map.get("lineOpacity");
      pigeonResult.setLineOpacity((Double)lineOpacity);
      Object linePattern = map.get("linePattern");
      pigeonResult.setLinePattern((String)linePattern);
      Object lineWidth = map.get("lineWidth");
      pigeonResult.setLineWidth((Double)lineWidth);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PolylineAnnotationOptions {
    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    private @Nullable LineJoin lineJoin;
    public @Nullable LineJoin getLineJoin() { return lineJoin; }
    public void setLineJoin(@Nullable LineJoin setterArg) {
      this.lineJoin = setterArg;
    }

    private @Nullable Double lineSortKey;
    public @Nullable Double getLineSortKey() { return lineSortKey; }
    public void setLineSortKey(@Nullable Double setterArg) {
      this.lineSortKey = setterArg;
    }

    private @Nullable Double lineBlur;
    public @Nullable Double getLineBlur() { return lineBlur; }
    public void setLineBlur(@Nullable Double setterArg) {
      this.lineBlur = setterArg;
    }

    private @Nullable Long lineColor;
    public @Nullable Long getLineColor() { return lineColor; }
    public void setLineColor(@Nullable Long setterArg) {
      this.lineColor = setterArg;
    }

    private @Nullable Double lineGapWidth;
    public @Nullable Double getLineGapWidth() { return lineGapWidth; }
    public void setLineGapWidth(@Nullable Double setterArg) {
      this.lineGapWidth = setterArg;
    }

    private @Nullable Double lineOffset;
    public @Nullable Double getLineOffset() { return lineOffset; }
    public void setLineOffset(@Nullable Double setterArg) {
      this.lineOffset = setterArg;
    }

    private @Nullable Double lineOpacity;
    public @Nullable Double getLineOpacity() { return lineOpacity; }
    public void setLineOpacity(@Nullable Double setterArg) {
      this.lineOpacity = setterArg;
    }

    private @Nullable String linePattern;
    public @Nullable String getLinePattern() { return linePattern; }
    public void setLinePattern(@Nullable String setterArg) {
      this.linePattern = setterArg;
    }

    private @Nullable Double lineWidth;
    public @Nullable Double getLineWidth() { return lineWidth; }
    public void setLineWidth(@Nullable Double setterArg) {
      this.lineWidth = setterArg;
    }

    private @Nullable Map<String, Object> userInfo;
    public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
    public void setUserInfo(@Nullable Map<String, Object> setterArg) {
      this.userInfo = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable LineJoin lineJoin;
      public @NonNull Builder setLineJoin(@Nullable LineJoin setterArg) {
        this.lineJoin = setterArg;
        return this;
      }
      private @Nullable Double lineSortKey;
      public @NonNull Builder setLineSortKey(@Nullable Double setterArg) {
        this.lineSortKey = setterArg;
        return this;
      }
      private @Nullable Double lineBlur;
      public @NonNull Builder setLineBlur(@Nullable Double setterArg) {
        this.lineBlur = setterArg;
        return this;
      }
      private @Nullable Long lineColor;
      public @NonNull Builder setLineColor(@Nullable Long setterArg) {
        this.lineColor = setterArg;
        return this;
      }
      private @Nullable Double lineGapWidth;
      public @NonNull Builder setLineGapWidth(@Nullable Double setterArg) {
        this.lineGapWidth = setterArg;
        return this;
      }
      private @Nullable Double lineOffset;
      public @NonNull Builder setLineOffset(@Nullable Double setterArg) {
        this.lineOffset = setterArg;
        return this;
      }
      private @Nullable Double lineOpacity;
      public @NonNull Builder setLineOpacity(@Nullable Double setterArg) {
        this.lineOpacity = setterArg;
        return this;
      }
      private @Nullable String linePattern;
      public @NonNull Builder setLinePattern(@Nullable String setterArg) {
        this.linePattern = setterArg;
        return this;
      }
      private @Nullable Double lineWidth;
      public @NonNull Builder setLineWidth(@Nullable Double setterArg) {
        this.lineWidth = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> userInfo;
      public @Nullable Map<String, Object> getUserInfo() { return userInfo; }
      public Builder setUserInfo(@Nullable Map<String, Object> setterArg) {
        this.userInfo = setterArg;
        return this;
      }
      public @NonNull PolylineAnnotationOptions build() {
        PolylineAnnotationOptions pigeonReturn = new PolylineAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setLineJoin(lineJoin);
        pigeonReturn.setLineSortKey(lineSortKey);
        pigeonReturn.setLineBlur(lineBlur);
        pigeonReturn.setLineColor(lineColor);
        pigeonReturn.setLineGapWidth(lineGapWidth);
        pigeonReturn.setLineOffset(lineOffset);
        pigeonReturn.setLineOpacity(lineOpacity);
        pigeonReturn.setLinePattern(linePattern);
        pigeonReturn.setLineWidth(lineWidth);
        pigeonReturn.setUserInfo(userInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("geometry", geometry);
      toMapResult.put("lineJoin", lineJoin == null ? null : lineJoin.index);
      toMapResult.put("lineSortKey", lineSortKey);
      toMapResult.put("lineBlur", lineBlur);
      toMapResult.put("lineColor", lineColor);
      toMapResult.put("lineGapWidth", lineGapWidth);
      toMapResult.put("lineOffset", lineOffset);
      toMapResult.put("lineOpacity", lineOpacity);
      toMapResult.put("linePattern", linePattern);
      toMapResult.put("lineWidth", lineWidth);
      toMapResult.put("userInfo", userInfo);
      return toMapResult;
    }
    static @NonNull PolylineAnnotationOptions fromMap(@NonNull Map<String, Object> map) {
      PolylineAnnotationOptions pigeonResult = new PolylineAnnotationOptions();
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object lineJoin = map.get("lineJoin");
      pigeonResult.setLineJoin(lineJoin == null ? null : LineJoin.values()[(int)lineJoin]);
      Object lineSortKey = map.get("lineSortKey");
      pigeonResult.setLineSortKey((Double)lineSortKey);
      Object lineBlur = map.get("lineBlur");
      pigeonResult.setLineBlur((Double)lineBlur);
      Object lineColor = map.get("lineColor");
      pigeonResult.setLineColor((lineColor == null) ? null : ((lineColor instanceof Integer) ? (Integer)lineColor : (Long)lineColor));
      Object lineGapWidth = map.get("lineGapWidth");
      pigeonResult.setLineGapWidth((Double)lineGapWidth);
      Object lineOffset = map.get("lineOffset");
      pigeonResult.setLineOffset((Double)lineOffset);
      Object lineOpacity = map.get("lineOpacity");
      pigeonResult.setLineOpacity((Double)lineOpacity);
      Object linePattern = map.get("linePattern");
      pigeonResult.setLinePattern((String)linePattern);
      Object lineWidth = map.get("lineWidth");
      pigeonResult.setLineWidth((Double)lineWidth);
      Object userInfo = map.get("userInfo");
      pigeonResult.setUserInfo((Map<String, Object>)userInfo);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OnPolylineAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnPolylineAnnotationClickListenerCodec INSTANCE = new OnPolylineAnnotationClickListenerCodec();
    private OnPolylineAnnotationClickListenerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PolylineAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PolylineAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolylineAnnotation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class OnPolylineAnnotationClickListener {
    private final BinaryMessenger binaryMessenger;
    public OnPolylineAnnotationClickListener(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return OnPolylineAnnotationClickListenerCodec.INSTANCE;
    }

    public void onPolylineAnnotationClick(@NonNull PolylineAnnotation annotationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OnPolylineAnnotationClickListener.onPolylineAnnotationClick", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(annotationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class _PolylineAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _PolylineAnnotationMessagerCodec INSTANCE = new _PolylineAnnotationMessagerCodec();
    private _PolylineAnnotationMessagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PolylineAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PolylineAnnotationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PolylineAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolylineAnnotation) value).toMap());
      } else 
      if (value instanceof PolylineAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((PolylineAnnotationOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _PolylineAnnotationMessager {
    void create(@NonNull String managerId, @NonNull PolylineAnnotationOptions annotationOption, Result<PolylineAnnotation> result);
    void createMulti(@NonNull String managerId, @NonNull List<PolylineAnnotationOptions> annotationOptions, Result<List<PolylineAnnotation>> result);
    void update(@NonNull String managerId, @NonNull PolylineAnnotation annotation, Result<Void> result);
    void delete(@NonNull String managerId, @NonNull PolylineAnnotation annotation, Result<Void> result);
    void deleteAll(@NonNull String managerId, Result<Void> result);
    void getAnnotations(@NonNull String managerId, Result<List<PolylineAnnotation>> result);
    void setLineCap(@NonNull String managerId, @NonNull LineCap lineCap, Result<Void> result);
    void getLineCap(@NonNull String managerId, Result<Long> result);
    void setLineMiterLimit(@NonNull String managerId, @NonNull Double lineMiterLimit, Result<Void> result);
    void getLineMiterLimit(@NonNull String managerId, Result<Double> result);
    void setLineRoundLimit(@NonNull String managerId, @NonNull Double lineRoundLimit, Result<Void> result);
    void getLineRoundLimit(@NonNull String managerId, Result<Double> result);
    void setLineDasharray(@NonNull String managerId, @NonNull List<Double> lineDasharray, Result<Void> result);
    void getLineDasharray(@NonNull String managerId, Result<List<Double>> result);
    void setLineTranslate(@NonNull String managerId, @NonNull List<Double> lineTranslate, Result<Void> result);
    void getLineTranslate(@NonNull String managerId, Result<List<Double>> result);
    void setLineTranslateAnchor(@NonNull String managerId, @NonNull LineTranslateAnchor lineTranslateAnchor, Result<Void> result);
    void getLineTranslateAnchor(@NonNull String managerId, Result<Long> result);
    void setLineTrimOffset(@NonNull String managerId, @NonNull List<Double> lineTrimOffset, Result<Void> result);
    void getLineTrimOffset(@NonNull String managerId, Result<List<Double>> result);

    /** The codec used by _PolylineAnnotationMessager. */
    static MessageCodec<Object> getCodec() {
      return _PolylineAnnotationMessagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_PolylineAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _PolylineAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolylineAnnotationOptions annotationOptionArg = (PolylineAnnotationOptions)args.get(1);
              if (annotationOptionArg == null) {
                throw new NullPointerException("annotationOptionArg unexpectedly null.");
              }
              Result<PolylineAnnotation> resultCallback = new Result<PolylineAnnotation>() {
                public void success(PolylineAnnotation result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(managerIdArg, annotationOptionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<PolylineAnnotationOptions> annotationOptionsArg = (List<PolylineAnnotationOptions>)args.get(1);
              if (annotationOptionsArg == null) {
                throw new NullPointerException("annotationOptionsArg unexpectedly null.");
              }
              Result<List<PolylineAnnotation>> resultCallback = new Result<List<PolylineAnnotation>>() {
                public void success(List<PolylineAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolylineAnnotation annotationArg = (PolylineAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.update(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              PolylineAnnotation annotationArg = (PolylineAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.delete(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.deleteAll(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getAnnotations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<PolylineAnnotation>> resultCallback = new Result<List<PolylineAnnotation>>() {
                public void success(List<PolylineAnnotation> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAnnotations(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineCap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              LineCap lineCapArg = args.get(1) == null ? null : LineCap.values()[(int)args.get(1)];
              if (lineCapArg == null) {
                throw new NullPointerException("lineCapArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineCap(managerIdArg, lineCapArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineCap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineCap(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineMiterLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double lineMiterLimitArg = (Double)args.get(1);
              if (lineMiterLimitArg == null) {
                throw new NullPointerException("lineMiterLimitArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineMiterLimit(managerIdArg, lineMiterLimitArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineMiterLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineMiterLimit(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineRoundLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Double lineRoundLimitArg = (Double)args.get(1);
              if (lineRoundLimitArg == null) {
                throw new NullPointerException("lineRoundLimitArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineRoundLimit(managerIdArg, lineRoundLimitArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineRoundLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Double> resultCallback = new Result<Double>() {
                public void success(Double result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineRoundLimit(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineDasharray", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> lineDasharrayArg = (List<Double>)args.get(1);
              if (lineDasharrayArg == null) {
                throw new NullPointerException("lineDasharrayArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineDasharray(managerIdArg, lineDasharrayArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineDasharray", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineDasharray(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> lineTranslateArg = (List<Double>)args.get(1);
              if (lineTranslateArg == null) {
                throw new NullPointerException("lineTranslateArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineTranslate(managerIdArg, lineTranslateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineTranslate(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              LineTranslateAnchor lineTranslateAnchorArg = args.get(1) == null ? null : LineTranslateAnchor.values()[(int)args.get(1)];
              if (lineTranslateAnchorArg == null) {
                throw new NullPointerException("lineTranslateAnchorArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineTranslateAnchor(managerIdArg, lineTranslateAnchorArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineTranslateAnchor(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.setLineTrimOffset", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              List<Double> lineTrimOffsetArg = (List<Double>)args.get(1);
              if (lineTrimOffsetArg == null) {
                throw new NullPointerException("lineTrimOffsetArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLineTrimOffset(managerIdArg, lineTrimOffsetArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._PolylineAnnotationMessager.getLineTrimOffset", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              Result<List<Double>> resultCallback = new Result<List<Double>>() {
                public void success(List<Double> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLineTrimOffset(managerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
