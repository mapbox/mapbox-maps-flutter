// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTPolylineAnnotationMessager {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** The display of line endings. */
  public enum LineCap {
    /** A cap with a squared-off end which is drawn to the exact endpoint of the line. */
    BUTT(0),
    /** A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line. */
    ROUND(1),
    /** A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width. */
    SQUARE(2);

    final int index;

    private LineCap(final int index) {
      this.index = index;
    }
  }

  /** The display of lines when joining. */
  public enum LineJoin {
    /** A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width. */
    BEVEL(0),
    /** A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line. */
    ROUND(1),
    /** A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet. */
    MITER(2);

    final int index;

    private LineJoin(final int index) {
      this.index = index;
    }
  }

  /** Controls the frame of reference for `line-translate`. */
  public enum LineTranslateAnchor {
    /** The line is translated relative to the map. */
    MAP(0),
    /** The line is translated relative to the viewport. */
    VIEWPORT(1);

    final int index;

    private LineTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PolylineAnnotation {
    /** The id for annotation */
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** The geometry that determines the location/shape of this annotation */
    private @Nullable Map<String, Object> geometry;

    public @Nullable Map<String, Object> getGeometry() {
      return geometry;
    }

    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    /** The display of lines when joining. */
    private @Nullable LineJoin lineJoin;

    public @Nullable LineJoin getLineJoin() {
      return lineJoin;
    }

    public void setLineJoin(@Nullable LineJoin setterArg) {
      this.lineJoin = setterArg;
    }

    /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
    private @Nullable Double lineSortKey;

    public @Nullable Double getLineSortKey() {
      return lineSortKey;
    }

    public void setLineSortKey(@Nullable Double setterArg) {
      this.lineSortKey = setterArg;
    }

    /** Blur applied to the line, in pixels. */
    private @Nullable Double lineBlur;

    public @Nullable Double getLineBlur() {
      return lineBlur;
    }

    public void setLineBlur(@Nullable Double setterArg) {
      this.lineBlur = setterArg;
    }

    /** The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color. */
    private @Nullable Long lineBorderColor;

    public @Nullable Long getLineBorderColor() {
      return lineBorderColor;
    }

    public void setLineBorderColor(@Nullable Long setterArg) {
      this.lineBorderColor = setterArg;
    }

    /** The width of the line border. A value of zero means no border. */
    private @Nullable Double lineBorderWidth;

    public @Nullable Double getLineBorderWidth() {
      return lineBorderWidth;
    }

    public void setLineBorderWidth(@Nullable Double setterArg) {
      this.lineBorderWidth = setterArg;
    }

    /** The color with which the line will be drawn. */
    private @Nullable Long lineColor;

    public @Nullable Long getLineColor() {
      return lineColor;
    }

    public void setLineColor(@Nullable Long setterArg) {
      this.lineColor = setterArg;
    }

    /** Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap. */
    private @Nullable Double lineGapWidth;

    public @Nullable Double getLineGapWidth() {
      return lineGapWidth;
    }

    public void setLineGapWidth(@Nullable Double setterArg) {
      this.lineGapWidth = setterArg;
    }

    /** The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset. */
    private @Nullable Double lineOffset;

    public @Nullable Double getLineOffset() {
      return lineOffset;
    }

    public void setLineOffset(@Nullable Double setterArg) {
      this.lineOffset = setterArg;
    }

    /** The opacity at which the line will be drawn. */
    private @Nullable Double lineOpacity;

    public @Nullable Double getLineOpacity() {
      return lineOpacity;
    }

    public void setLineOpacity(@Nullable Double setterArg) {
      this.lineOpacity = setterArg;
    }

    /** Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels. */
    private @Nullable String linePattern;

    public @Nullable String getLinePattern() {
      return linePattern;
    }

    public void setLinePattern(@Nullable String setterArg) {
      this.linePattern = setterArg;
    }

    /** Stroke thickness. */
    private @Nullable Double lineWidth;

    public @Nullable Double getLineWidth() {
      return lineWidth;
    }

    public void setLineWidth(@Nullable Double setterArg) {
      this.lineWidth = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PolylineAnnotation() {}

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> geometry;

      @CanIgnoreReturnValue
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }

      private @Nullable LineJoin lineJoin;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineJoin(@Nullable LineJoin setterArg) {
        this.lineJoin = setterArg;
        return this;
      }

      private @Nullable Double lineSortKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineSortKey(@Nullable Double setterArg) {
        this.lineSortKey = setterArg;
        return this;
      }

      private @Nullable Double lineBlur;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBlur(@Nullable Double setterArg) {
        this.lineBlur = setterArg;
        return this;
      }

      private @Nullable Long lineBorderColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBorderColor(@Nullable Long setterArg) {
        this.lineBorderColor = setterArg;
        return this;
      }

      private @Nullable Double lineBorderWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBorderWidth(@Nullable Double setterArg) {
        this.lineBorderWidth = setterArg;
        return this;
      }

      private @Nullable Long lineColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineColor(@Nullable Long setterArg) {
        this.lineColor = setterArg;
        return this;
      }

      private @Nullable Double lineGapWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineGapWidth(@Nullable Double setterArg) {
        this.lineGapWidth = setterArg;
        return this;
      }

      private @Nullable Double lineOffset;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineOffset(@Nullable Double setterArg) {
        this.lineOffset = setterArg;
        return this;
      }

      private @Nullable Double lineOpacity;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineOpacity(@Nullable Double setterArg) {
        this.lineOpacity = setterArg;
        return this;
      }

      private @Nullable String linePattern;

      @CanIgnoreReturnValue
      public @NonNull Builder setLinePattern(@Nullable String setterArg) {
        this.linePattern = setterArg;
        return this;
      }

      private @Nullable Double lineWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineWidth(@Nullable Double setterArg) {
        this.lineWidth = setterArg;
        return this;
      }

      public @NonNull PolylineAnnotation build() {
        PolylineAnnotation pigeonReturn = new PolylineAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setLineJoin(lineJoin);
        pigeonReturn.setLineSortKey(lineSortKey);
        pigeonReturn.setLineBlur(lineBlur);
        pigeonReturn.setLineBorderColor(lineBorderColor);
        pigeonReturn.setLineBorderWidth(lineBorderWidth);
        pigeonReturn.setLineColor(lineColor);
        pigeonReturn.setLineGapWidth(lineGapWidth);
        pigeonReturn.setLineOffset(lineOffset);
        pigeonReturn.setLineOpacity(lineOpacity);
        pigeonReturn.setLinePattern(linePattern);
        pigeonReturn.setLineWidth(lineWidth);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(id);
      toListResult.add(geometry);
      toListResult.add(lineJoin == null ? null : lineJoin.index);
      toListResult.add(lineSortKey);
      toListResult.add(lineBlur);
      toListResult.add(lineBorderColor);
      toListResult.add(lineBorderWidth);
      toListResult.add(lineColor);
      toListResult.add(lineGapWidth);
      toListResult.add(lineOffset);
      toListResult.add(lineOpacity);
      toListResult.add(linePattern);
      toListResult.add(lineWidth);
      return toListResult;
    }

    static @NonNull PolylineAnnotation fromList(@NonNull ArrayList<Object> list) {
      PolylineAnnotation pigeonResult = new PolylineAnnotation();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object geometry = list.get(1);
      pigeonResult.setGeometry((Map<String, Object>) geometry);
      Object lineJoin = list.get(2);
      pigeonResult.setLineJoin(lineJoin == null ? null : LineJoin.values()[(int) lineJoin]);
      Object lineSortKey = list.get(3);
      pigeonResult.setLineSortKey((Double) lineSortKey);
      Object lineBlur = list.get(4);
      pigeonResult.setLineBlur((Double) lineBlur);
      Object lineBorderColor = list.get(5);
      pigeonResult.setLineBorderColor((lineBorderColor == null) ? null : ((lineBorderColor instanceof Integer) ? (Integer) lineBorderColor : (Long) lineBorderColor));
      Object lineBorderWidth = list.get(6);
      pigeonResult.setLineBorderWidth((Double) lineBorderWidth);
      Object lineColor = list.get(7);
      pigeonResult.setLineColor((lineColor == null) ? null : ((lineColor instanceof Integer) ? (Integer) lineColor : (Long) lineColor));
      Object lineGapWidth = list.get(8);
      pigeonResult.setLineGapWidth((Double) lineGapWidth);
      Object lineOffset = list.get(9);
      pigeonResult.setLineOffset((Double) lineOffset);
      Object lineOpacity = list.get(10);
      pigeonResult.setLineOpacity((Double) lineOpacity);
      Object linePattern = list.get(11);
      pigeonResult.setLinePattern((String) linePattern);
      Object lineWidth = list.get(12);
      pigeonResult.setLineWidth((Double) lineWidth);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PolylineAnnotationOptions {
    /** The geometry that determines the location/shape of this annotation */
    private @Nullable Map<String, Object> geometry;

    public @Nullable Map<String, Object> getGeometry() {
      return geometry;
    }

    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    /** The display of lines when joining. */
    private @Nullable LineJoin lineJoin;

    public @Nullable LineJoin getLineJoin() {
      return lineJoin;
    }

    public void setLineJoin(@Nullable LineJoin setterArg) {
      this.lineJoin = setterArg;
    }

    /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
    private @Nullable Double lineSortKey;

    public @Nullable Double getLineSortKey() {
      return lineSortKey;
    }

    public void setLineSortKey(@Nullable Double setterArg) {
      this.lineSortKey = setterArg;
    }

    /** Blur applied to the line, in pixels. */
    private @Nullable Double lineBlur;

    public @Nullable Double getLineBlur() {
      return lineBlur;
    }

    public void setLineBlur(@Nullable Double setterArg) {
      this.lineBlur = setterArg;
    }

    /** The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color. */
    private @Nullable Long lineBorderColor;

    public @Nullable Long getLineBorderColor() {
      return lineBorderColor;
    }

    public void setLineBorderColor(@Nullable Long setterArg) {
      this.lineBorderColor = setterArg;
    }

    /** The width of the line border. A value of zero means no border. */
    private @Nullable Double lineBorderWidth;

    public @Nullable Double getLineBorderWidth() {
      return lineBorderWidth;
    }

    public void setLineBorderWidth(@Nullable Double setterArg) {
      this.lineBorderWidth = setterArg;
    }

    /** The color with which the line will be drawn. */
    private @Nullable Long lineColor;

    public @Nullable Long getLineColor() {
      return lineColor;
    }

    public void setLineColor(@Nullable Long setterArg) {
      this.lineColor = setterArg;
    }

    /** Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap. */
    private @Nullable Double lineGapWidth;

    public @Nullable Double getLineGapWidth() {
      return lineGapWidth;
    }

    public void setLineGapWidth(@Nullable Double setterArg) {
      this.lineGapWidth = setterArg;
    }

    /** The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset. */
    private @Nullable Double lineOffset;

    public @Nullable Double getLineOffset() {
      return lineOffset;
    }

    public void setLineOffset(@Nullable Double setterArg) {
      this.lineOffset = setterArg;
    }

    /** The opacity at which the line will be drawn. */
    private @Nullable Double lineOpacity;

    public @Nullable Double getLineOpacity() {
      return lineOpacity;
    }

    public void setLineOpacity(@Nullable Double setterArg) {
      this.lineOpacity = setterArg;
    }

    /** Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels. */
    private @Nullable String linePattern;

    public @Nullable String getLinePattern() {
      return linePattern;
    }

    public void setLinePattern(@Nullable String setterArg) {
      this.linePattern = setterArg;
    }

    /** Stroke thickness. */
    private @Nullable Double lineWidth;

    public @Nullable Double getLineWidth() {
      return lineWidth;
    }

    public void setLineWidth(@Nullable Double setterArg) {
      this.lineWidth = setterArg;
    }

    public static final class Builder {

      private @Nullable Map<String, Object> geometry;

      @CanIgnoreReturnValue
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }

      private @Nullable LineJoin lineJoin;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineJoin(@Nullable LineJoin setterArg) {
        this.lineJoin = setterArg;
        return this;
      }

      private @Nullable Double lineSortKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineSortKey(@Nullable Double setterArg) {
        this.lineSortKey = setterArg;
        return this;
      }

      private @Nullable Double lineBlur;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBlur(@Nullable Double setterArg) {
        this.lineBlur = setterArg;
        return this;
      }

      private @Nullable Long lineBorderColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBorderColor(@Nullable Long setterArg) {
        this.lineBorderColor = setterArg;
        return this;
      }

      private @Nullable Double lineBorderWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineBorderWidth(@Nullable Double setterArg) {
        this.lineBorderWidth = setterArg;
        return this;
      }

      private @Nullable Long lineColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineColor(@Nullable Long setterArg) {
        this.lineColor = setterArg;
        return this;
      }

      private @Nullable Double lineGapWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineGapWidth(@Nullable Double setterArg) {
        this.lineGapWidth = setterArg;
        return this;
      }

      private @Nullable Double lineOffset;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineOffset(@Nullable Double setterArg) {
        this.lineOffset = setterArg;
        return this;
      }

      private @Nullable Double lineOpacity;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineOpacity(@Nullable Double setterArg) {
        this.lineOpacity = setterArg;
        return this;
      }

      private @Nullable String linePattern;

      @CanIgnoreReturnValue
      public @NonNull Builder setLinePattern(@Nullable String setterArg) {
        this.linePattern = setterArg;
        return this;
      }

      private @Nullable Double lineWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setLineWidth(@Nullable Double setterArg) {
        this.lineWidth = setterArg;
        return this;
      }

      public @NonNull PolylineAnnotationOptions build() {
        PolylineAnnotationOptions pigeonReturn = new PolylineAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setLineJoin(lineJoin);
        pigeonReturn.setLineSortKey(lineSortKey);
        pigeonReturn.setLineBlur(lineBlur);
        pigeonReturn.setLineBorderColor(lineBorderColor);
        pigeonReturn.setLineBorderWidth(lineBorderWidth);
        pigeonReturn.setLineColor(lineColor);
        pigeonReturn.setLineGapWidth(lineGapWidth);
        pigeonReturn.setLineOffset(lineOffset);
        pigeonReturn.setLineOpacity(lineOpacity);
        pigeonReturn.setLinePattern(linePattern);
        pigeonReturn.setLineWidth(lineWidth);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(geometry);
      toListResult.add(lineJoin == null ? null : lineJoin.index);
      toListResult.add(lineSortKey);
      toListResult.add(lineBlur);
      toListResult.add(lineBorderColor);
      toListResult.add(lineBorderWidth);
      toListResult.add(lineColor);
      toListResult.add(lineGapWidth);
      toListResult.add(lineOffset);
      toListResult.add(lineOpacity);
      toListResult.add(linePattern);
      toListResult.add(lineWidth);
      return toListResult;
    }

    static @NonNull PolylineAnnotationOptions fromList(@NonNull ArrayList<Object> list) {
      PolylineAnnotationOptions pigeonResult = new PolylineAnnotationOptions();
      Object geometry = list.get(0);
      pigeonResult.setGeometry((Map<String, Object>) geometry);
      Object lineJoin = list.get(1);
      pigeonResult.setLineJoin(lineJoin == null ? null : LineJoin.values()[(int) lineJoin]);
      Object lineSortKey = list.get(2);
      pigeonResult.setLineSortKey((Double) lineSortKey);
      Object lineBlur = list.get(3);
      pigeonResult.setLineBlur((Double) lineBlur);
      Object lineBorderColor = list.get(4);
      pigeonResult.setLineBorderColor((lineBorderColor == null) ? null : ((lineBorderColor instanceof Integer) ? (Integer) lineBorderColor : (Long) lineBorderColor));
      Object lineBorderWidth = list.get(5);
      pigeonResult.setLineBorderWidth((Double) lineBorderWidth);
      Object lineColor = list.get(6);
      pigeonResult.setLineColor((lineColor == null) ? null : ((lineColor instanceof Integer) ? (Integer) lineColor : (Long) lineColor));
      Object lineGapWidth = list.get(7);
      pigeonResult.setLineGapWidth((Double) lineGapWidth);
      Object lineOffset = list.get(8);
      pigeonResult.setLineOffset((Double) lineOffset);
      Object lineOpacity = list.get(9);
      pigeonResult.setLineOpacity((Double) lineOpacity);
      Object linePattern = list.get(10);
      pigeonResult.setLinePattern((String) linePattern);
      Object lineWidth = list.get(11);
      pigeonResult.setLineWidth((Double) lineWidth);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class OnPolylineAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnPolylineAnnotationClickListenerCodec INSTANCE = new OnPolylineAnnotationClickListenerCodec();

    private OnPolylineAnnotationClickListenerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PolylineAnnotation.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PolylineAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolylineAnnotation) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OnPolylineAnnotationClickListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OnPolylineAnnotationClickListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by OnPolylineAnnotationClickListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return OnPolylineAnnotationClickListenerCodec.INSTANCE;
    }
    public void onPolylineAnnotationClick(@NonNull PolylineAnnotation annotationArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnPolylineAnnotationClickListener.onPolylineAnnotationClick";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(annotationArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }

  private static class _PolylineAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _PolylineAnnotationMessagerCodec INSTANCE = new _PolylineAnnotationMessagerCodec();

    private _PolylineAnnotationMessagerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PolylineAnnotation.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PolylineAnnotation.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PolylineAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PolylineAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PolylineAnnotation) {
        stream.write(128);
        writeValue(stream, ((PolylineAnnotation) value).toList());
      } else if (value instanceof PolylineAnnotation) {
        stream.write(129);
        writeValue(stream, ((PolylineAnnotation) value).toList());
      } else if (value instanceof PolylineAnnotationOptions) {
        stream.write(130);
        writeValue(stream, ((PolylineAnnotationOptions) value).toList());
      } else if (value instanceof PolylineAnnotationOptions) {
        stream.write(131);
        writeValue(stream, ((PolylineAnnotationOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface _PolylineAnnotationMessager {

    void create(@NonNull String managerId, @NonNull PolylineAnnotationOptions annotationOption, @NonNull Result<PolylineAnnotation> result);

    void createMulti(@NonNull String managerId, @NonNull List<PolylineAnnotationOptions> annotationOptions, @NonNull Result<List<PolylineAnnotation>> result);

    void update(@NonNull String managerId, @NonNull PolylineAnnotation annotation, @NonNull VoidResult result);

    void delete(@NonNull String managerId, @NonNull PolylineAnnotation annotation, @NonNull VoidResult result);

    void deleteAll(@NonNull String managerId, @NonNull VoidResult result);

    void setLineCap(@NonNull String managerId, @NonNull LineCap lineCap, @NonNull VoidResult result);

    void getLineCap(@NonNull String managerId, @NonNull NullableResult<LineCap> result);

    void setLineMiterLimit(@NonNull String managerId, @NonNull Double lineMiterLimit, @NonNull VoidResult result);

    void getLineMiterLimit(@NonNull String managerId, @NonNull NullableResult<Double> result);

    void setLineRoundLimit(@NonNull String managerId, @NonNull Double lineRoundLimit, @NonNull VoidResult result);

    void getLineRoundLimit(@NonNull String managerId, @NonNull NullableResult<Double> result);

    void setLineDasharray(@NonNull String managerId, @NonNull List<Double> lineDasharray, @NonNull VoidResult result);

    void getLineDasharray(@NonNull String managerId, @NonNull NullableResult<List<Double>> result);

    void setLineDepthOcclusionFactor(@NonNull String managerId, @NonNull Double lineDepthOcclusionFactor, @NonNull VoidResult result);

    void getLineDepthOcclusionFactor(@NonNull String managerId, @NonNull NullableResult<Double> result);

    void setLineEmissiveStrength(@NonNull String managerId, @NonNull Double lineEmissiveStrength, @NonNull VoidResult result);

    void getLineEmissiveStrength(@NonNull String managerId, @NonNull NullableResult<Double> result);

    void setLineTranslate(@NonNull String managerId, @NonNull List<Double> lineTranslate, @NonNull VoidResult result);

    void getLineTranslate(@NonNull String managerId, @NonNull NullableResult<List<Double>> result);

    void setLineTranslateAnchor(@NonNull String managerId, @NonNull LineTranslateAnchor lineTranslateAnchor, @NonNull VoidResult result);

    void getLineTranslateAnchor(@NonNull String managerId, @NonNull NullableResult<LineTranslateAnchor> result);

    void setLineTrimOffset(@NonNull String managerId, @NonNull List<Double> lineTrimOffset, @NonNull VoidResult result);

    void getLineTrimOffset(@NonNull String managerId, @NonNull NullableResult<List<Double>> result);

    /** The codec used by _PolylineAnnotationMessager. */
    static @NonNull MessageCodec<Object> getCodec() {
      return _PolylineAnnotationMessagerCodec.INSTANCE;
    }
    /**Sets up an instance of `_PolylineAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable _PolylineAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                PolylineAnnotationOptions annotationOptionArg = (PolylineAnnotationOptions) args.get(1);
                Result<PolylineAnnotation> resultCallback =
                    new Result<PolylineAnnotation>() {
                      public void success(PolylineAnnotation result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.create(managerIdArg, annotationOptionArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<PolylineAnnotationOptions> annotationOptionsArg = (List<PolylineAnnotationOptions>) args.get(1);
                Result<List<PolylineAnnotation>> resultCallback =
                    new Result<List<PolylineAnnotation>>() {
                      public void success(List<PolylineAnnotation> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                PolylineAnnotation annotationArg = (PolylineAnnotation) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.update(managerIdArg, annotationArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                PolylineAnnotation annotationArg = (PolylineAnnotation) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.delete(managerIdArg, annotationArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.deleteAll(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineCap", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                LineCap lineCapArg = LineCap.values()[(int) args.get(1)];
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineCap(managerIdArg, lineCapArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineCap", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<LineCap> resultCallback =
                    new NullableResult<LineCap>() {
                      public void success(LineCap result) {
                        wrapped.add(0, result == null ? null : result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineCap(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineMiterLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Double lineMiterLimitArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineMiterLimit(managerIdArg, lineMiterLimitArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineMiterLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<Double> resultCallback =
                    new NullableResult<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineMiterLimit(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineRoundLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Double lineRoundLimitArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineRoundLimit(managerIdArg, lineRoundLimitArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineRoundLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<Double> resultCallback =
                    new NullableResult<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineRoundLimit(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineDasharray", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<Double> lineDasharrayArg = (List<Double>) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineDasharray(managerIdArg, lineDasharrayArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineDasharray", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<List<Double>> resultCallback =
                    new NullableResult<List<Double>>() {
                      public void success(List<Double> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineDasharray(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineDepthOcclusionFactor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Double lineDepthOcclusionFactorArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineDepthOcclusionFactor(managerIdArg, lineDepthOcclusionFactorArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineDepthOcclusionFactor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<Double> resultCallback =
                    new NullableResult<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineDepthOcclusionFactor(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineEmissiveStrength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Double lineEmissiveStrengthArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineEmissiveStrength(managerIdArg, lineEmissiveStrengthArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineEmissiveStrength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<Double> resultCallback =
                    new NullableResult<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineEmissiveStrength(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<Double> lineTranslateArg = (List<Double>) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineTranslate(managerIdArg, lineTranslateArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<List<Double>> resultCallback =
                    new NullableResult<List<Double>>() {
                      public void success(List<Double> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineTranslate(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                LineTranslateAnchor lineTranslateAnchorArg = LineTranslateAnchor.values()[(int) args.get(1)];
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineTranslateAnchor(managerIdArg, lineTranslateAnchorArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<LineTranslateAnchor> resultCallback =
                    new NullableResult<LineTranslateAnchor>() {
                      public void success(LineTranslateAnchor result) {
                        wrapped.add(0, result == null ? null : result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineTranslateAnchor(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.setLineTrimOffset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<Double> lineTrimOffsetArg = (List<Double>) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLineTrimOffset(managerIdArg, lineTrimOffsetArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessager.getLineTrimOffset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                NullableResult<List<Double>> resultCallback =
                    new NullableResult<List<Double>>() {
                      public void success(List<Double> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLineTrimOffset(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
