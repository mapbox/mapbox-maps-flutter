// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.mapbox.maps.mapbox_maps.pigeons

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Options for recording the map when using MapRecorder.
 *
 * These recordings can be used to debug issues which require multiple steps to reproduce.
 * Additionally, playbacks can be used for performance testing custom scenarios.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MapRecorderOptions (
  /**
   * The maximum duration (in milliseconds) from the current time until API calls are kept.
   * If not specified, all API calls will be kept during the recording,
   * which can lead to significant memory consumption for long sessions.
   */
  val timeWindow: Long? = null,
  /** If set to true, the recorded API calls will be printed in the logs. */
  val loggingEnabled: Boolean,
  /** If set to true, the recorded output will be compressed with gzip. */
  val compressed: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MapRecorderOptions {
      val timeWindow = pigeonVar_list[0] as Long?
      val loggingEnabled = pigeonVar_list[1] as Boolean
      val compressed = pigeonVar_list[2] as Boolean
      return MapRecorderOptions(timeWindow, loggingEnabled, compressed)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      timeWindow,
      loggingEnabled,
      compressed,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MapRecorderOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return timeWindow == other.timeWindow
    && loggingEnabled == other.loggingEnabled
    && compressed == other.compressed
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Options for playback when using MapRecorder.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MapPlayerOptions (
  /** The number of times the sequence is played. If negative, the playback loops indefinitely. */
  val playbackCount: Long,
  /** Multiplies the speed of playback for faster or slower replays. (1 means no change.) */
  val playbackSpeedMultiplier: Double,
  /**
   * When set to true, the player will try to interpolate actions between short wait actions,
   * to continuously render during the playback.
   * This can help to maintain a consistent load during performance testing.
   */
  val avoidPlaybackPauses: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MapPlayerOptions {
      val playbackCount = pigeonVar_list[0] as Long
      val playbackSpeedMultiplier = pigeonVar_list[1] as Double
      val avoidPlaybackPauses = pigeonVar_list[2] as Boolean
      return MapPlayerOptions(playbackCount, playbackSpeedMultiplier, avoidPlaybackPauses)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playbackCount,
      playbackSpeedMultiplier,
      avoidPlaybackPauses,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MapPlayerOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return playbackCount == other.playbackCount
    && playbackSpeedMultiplier == other.playbackSpeedMultiplier
    && avoidPlaybackPauses == other.avoidPlaybackPauses
  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MapRecorderMessengerPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MapRecorderOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MapPlayerOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MapRecorderOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MapPlayerOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Interface for MapRecorder functionality.
 *
 * MapRecorder provides functions to record and replay API calls of a MapboxMap instance.
 * These recordings can be used to debug issues which require multiple steps to reproduce.
 * Additionally, playbacks can be used for performance testing custom scenarios.
 *
 * Note: The raw format produced by stopRecording is experimental and there is no guarantee
 * for version cross-compatibility when feeding it to replay.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface _MapRecorderMessenger {
  /**
   * Begins the recording session.
   *
   * @param options MapRecorderOptions to control recording.
   */
  fun startRecording(options: MapRecorderOptions)
  /**
   * Stops the current recording session.
   * Recorded section could be replayed with replay function.
   *
   * @return the Uint8List containing the recorded sequence in raw format.
   */
  fun stopRecording(callback: (Result<ByteArray>) -> Unit)
  /**
   * Replay a supplied sequence.
   *
   * @param recordedSequence Sequence recorded with stopRecording method.
   * @param options Options to customize the behaviour of the playback.
   */
  fun replay(recordedSequence: ByteArray, options: MapPlayerOptions, callback: (Result<Unit>) -> Unit)
  /** Temporarily pauses or resumes playback if already paused. */
  fun togglePauseReplay()
  /** Returns the string description of the current state of playback. */
  fun getPlaybackState(): String

  companion object {
    /** The codec used by _MapRecorderMessenger. */
    val codec: MessageCodec<Any?> by lazy {
      MapRecorderMessengerPigeonCodec()
    }
    /** Sets up an instance of `_MapRecorderMessenger` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _MapRecorderMessenger?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.startRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as MapRecorderOptions
            val wrapped: List<Any?> = try {
              api.startRecording(optionsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.stopRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopRecording{ result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.replay$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val recordedSequenceArg = args[0] as ByteArray
            val optionsArg = args[1] as MapPlayerOptions
            api.replay(recordedSequenceArg, optionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.togglePauseReplay$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.togglePauseReplay()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.getPlaybackState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPlaybackState())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
