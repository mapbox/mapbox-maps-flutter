// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.mapbox.maps.mapbox_maps.pigeons

import android.util.Log
import com.mapbox.geojson.Polygon
import com.mapbox.maps.mapbox_maps.mapping.turf.*
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Selects the base of fill-elevation. Some modes might require precomputed elevation data in the tileset.
 * Default value: "none".
 */
enum class FillElevationReference(val raw: Int) {
  /** Elevated rendering is disabled. */
  NONE(0),
  /** Elevate geometry relative to HD roads. Use this mode to describe base polygons of the road networks. */
  HD_ROAD_BASE(1),
  /** Elevated rendering is enabled. Use this mode to describe additive and stackable features such as 'hatched areas' that should exist only on top of road polygons. */
  HD_ROAD_MARKUP(2);

  companion object {
    fun ofRaw(raw: Int): FillElevationReference? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Controls the frame of reference for `fill-translate`.
 * Default value: "map".
 */
enum class FillTranslateAnchor(val raw: Int) {
  /** The fill is translated relative to the map. */
  MAP(0),
  /** The fill is translated relative to the viewport. */
  VIEWPORT(1);

  companion object {
    fun ofRaw(raw: Int): FillTranslateAnchor? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PolygonAnnotation(
  /** The id for annotation */
  val id: String,
  /** The geometry that determines the location/shape of this annotation */
  val geometry: Polygon,
  /**
   * Determines whether bridge guard rails are added for elevated roads.
   * Default value: "true".
   * @experimental
   */
  val fillConstructBridgeGuardRail: Boolean? = null,
  /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
  val fillSortKey: Double? = null,
  /**
   * The color of bridge guard rail.
   * Default value: "rgba(241, 236, 225, 255)".
   * @experimental
   */
  val fillBridgeGuardRailColor: Long? = null,
  /**
   * The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
   * Default value: "#000000".
   */
  val fillColor: Long? = null,
  /**
   * The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.
   * Default value: 1. Value range: [0, 1]
   */
  val fillOpacity: Double? = null,
  /** The outline color of the fill. Matches the value of `fill-color` if unspecified. */
  val fillOutlineColor: Long? = null,
  /** Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels. */
  val fillPattern: String? = null,
  /**
   * The color of tunnel structures (tunnel entrance and tunnel walls).
   * Default value: "rgba(241, 236, 225, 255)".
   * @experimental
   */
  val fillTunnelStructureColor: Long? = null,
  /**
   * Specifies an uniform elevation in meters. Note: If the value is zero, the layer will be rendered on the ground. Non-zero values will elevate the layer from the sea level, which can cause it to be rendered below the terrain.
   * Default value: 0. Minimum value: 0.
   * @experimental
   */
  val fillZOffset: Double? = null,
  /** Property to determine whether annotation can be manually moved around map. */
  val isDraggable: Boolean? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PolygonAnnotation {
      val id = pigeonVar_list[0] as String
      val geometry = pigeonVar_list[1] as Polygon
      val fillConstructBridgeGuardRail = pigeonVar_list[2] as Boolean?
      val fillSortKey = pigeonVar_list[3] as Double?
      val fillBridgeGuardRailColor = pigeonVar_list[4] as Long?
      val fillColor = pigeonVar_list[5] as Long?
      val fillOpacity = pigeonVar_list[6] as Double?
      val fillOutlineColor = pigeonVar_list[7] as Long?
      val fillPattern = pigeonVar_list[8] as String?
      val fillTunnelStructureColor = pigeonVar_list[9] as Long?
      val fillZOffset = pigeonVar_list[10] as Double?
      val isDraggable = pigeonVar_list[11] as Boolean?
      return PolygonAnnotation(id, geometry, fillConstructBridgeGuardRail, fillSortKey, fillBridgeGuardRailColor, fillColor, fillOpacity, fillOutlineColor, fillPattern, fillTunnelStructureColor, fillZOffset, isDraggable)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      geometry,
      fillConstructBridgeGuardRail,
      fillSortKey,
      fillBridgeGuardRailColor,
      fillColor,
      fillOpacity,
      fillOutlineColor,
      fillPattern,
      fillTunnelStructureColor,
      fillZOffset,
      isDraggable,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PolygonAnnotation) {
      return false
    }
    if (this === other) {
      return true
    }
    return id == other.id &&
      geometry == other.geometry &&
      fillConstructBridgeGuardRail == other.fillConstructBridgeGuardRail &&
      fillSortKey == other.fillSortKey &&
      fillBridgeGuardRailColor == other.fillBridgeGuardRailColor &&
      fillColor == other.fillColor &&
      fillOpacity == other.fillOpacity &&
      fillOutlineColor == other.fillOutlineColor &&
      fillPattern == other.fillPattern &&
      fillTunnelStructureColor == other.fillTunnelStructureColor &&
      fillZOffset == other.fillZOffset &&
      isDraggable == other.isDraggable
  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PolygonAnnotationOptions(
  /** The geometry that determines the location/shape of this annotation */
  val geometry: Polygon,
  /**
   * Determines whether bridge guard rails are added for elevated roads.
   * Default value: "true".
   * @experimental
   */
  val fillConstructBridgeGuardRail: Boolean? = null,
  /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
  val fillSortKey: Double? = null,
  /**
   * The color of bridge guard rail.
   * Default value: "rgba(241, 236, 225, 255)".
   * @experimental
   */
  val fillBridgeGuardRailColor: Long? = null,
  /**
   * The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
   * Default value: "#000000".
   */
  val fillColor: Long? = null,
  /**
   * The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.
   * Default value: 1. Value range: [0, 1]
   */
  val fillOpacity: Double? = null,
  /** The outline color of the fill. Matches the value of `fill-color` if unspecified. */
  val fillOutlineColor: Long? = null,
  /** Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels. */
  val fillPattern: String? = null,
  /**
   * The color of tunnel structures (tunnel entrance and tunnel walls).
   * Default value: "rgba(241, 236, 225, 255)".
   * @experimental
   */
  val fillTunnelStructureColor: Long? = null,
  /**
   * Specifies an uniform elevation in meters. Note: If the value is zero, the layer will be rendered on the ground. Non-zero values will elevate the layer from the sea level, which can cause it to be rendered below the terrain.
   * Default value: 0. Minimum value: 0.
   * @experimental
   */
  val fillZOffset: Double? = null,
  /** Property to determine whether annotation can be manually moved around map. */
  val isDraggable: Boolean? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PolygonAnnotationOptions {
      val geometry = pigeonVar_list[0] as Polygon
      val fillConstructBridgeGuardRail = pigeonVar_list[1] as Boolean?
      val fillSortKey = pigeonVar_list[2] as Double?
      val fillBridgeGuardRailColor = pigeonVar_list[3] as Long?
      val fillColor = pigeonVar_list[4] as Long?
      val fillOpacity = pigeonVar_list[5] as Double?
      val fillOutlineColor = pigeonVar_list[6] as Long?
      val fillPattern = pigeonVar_list[7] as String?
      val fillTunnelStructureColor = pigeonVar_list[8] as Long?
      val fillZOffset = pigeonVar_list[9] as Double?
      val isDraggable = pigeonVar_list[10] as Boolean?
      return PolygonAnnotationOptions(geometry, fillConstructBridgeGuardRail, fillSortKey, fillBridgeGuardRailColor, fillColor, fillOpacity, fillOutlineColor, fillPattern, fillTunnelStructureColor, fillZOffset, isDraggable)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      geometry,
      fillConstructBridgeGuardRail,
      fillSortKey,
      fillBridgeGuardRailColor,
      fillColor,
      fillOpacity,
      fillOutlineColor,
      fillPattern,
      fillTunnelStructureColor,
      fillZOffset,
      isDraggable,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PolygonAnnotationOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return geometry == other.geometry &&
      fillConstructBridgeGuardRail == other.fillConstructBridgeGuardRail &&
      fillSortKey == other.fillSortKey &&
      fillBridgeGuardRailColor == other.fillBridgeGuardRailColor &&
      fillColor == other.fillColor &&
      fillOpacity == other.fillOpacity &&
      fillOutlineColor == other.fillOutlineColor &&
      fillPattern == other.fillPattern &&
      fillTunnelStructureColor == other.fillTunnelStructureColor &&
      fillZOffset == other.fillZOffset &&
      isDraggable == other.isDraggable
  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class PolygonAnnotationMessengerPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FillElevationReference.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FillTranslateAnchor.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PolygonDecoder.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PolygonAnnotation.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PolygonAnnotationOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is FillElevationReference -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is FillTranslateAnchor -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is Polygon -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PolygonAnnotation -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PolygonAnnotationOptions -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class OnPolygonAnnotationClickListener(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by OnPolygonAnnotationClickListener. */
    val codec: MessageCodec<Any?> by lazy {
      PolygonAnnotationMessengerPigeonCodec()
    }
  }
  fun onPolygonAnnotationClick(annotationArg: PolygonAnnotation, callback: (Result<Unit>) -> Unit) {
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnPolygonAnnotationClickListener.onPolygonAnnotationClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(annotationArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _PolygonAnnotationMessenger {
  fun create(managerId: String, annotationOption: PolygonAnnotationOptions, callback: (Result<PolygonAnnotation>) -> Unit)
  fun createMulti(managerId: String, annotationOptions: List<PolygonAnnotationOptions>, callback: (Result<List<PolygonAnnotation>>) -> Unit)
  fun update(managerId: String, annotation: PolygonAnnotation, callback: (Result<Unit>) -> Unit)
  fun delete(managerId: String, annotation: PolygonAnnotation, callback: (Result<Unit>) -> Unit)
  fun deleteAll(managerId: String, callback: (Result<Unit>) -> Unit)
  fun setFillConstructBridgeGuardRail(managerId: String, fillConstructBridgeGuardRail: Boolean, callback: (Result<Unit>) -> Unit)
  fun getFillConstructBridgeGuardRail(managerId: String, callback: (Result<Boolean?>) -> Unit)
  fun setFillElevationReference(managerId: String, fillElevationReference: FillElevationReference, callback: (Result<Unit>) -> Unit)
  fun getFillElevationReference(managerId: String, callback: (Result<FillElevationReference?>) -> Unit)
  fun setFillSortKey(managerId: String, fillSortKey: Double, callback: (Result<Unit>) -> Unit)
  fun getFillSortKey(managerId: String, callback: (Result<Double?>) -> Unit)
  fun setFillAntialias(managerId: String, fillAntialias: Boolean, callback: (Result<Unit>) -> Unit)
  fun getFillAntialias(managerId: String, callback: (Result<Boolean?>) -> Unit)
  fun setFillBridgeGuardRailColor(managerId: String, fillBridgeGuardRailColor: Long, callback: (Result<Unit>) -> Unit)
  fun getFillBridgeGuardRailColor(managerId: String, callback: (Result<Long?>) -> Unit)
  fun setFillColor(managerId: String, fillColor: Long, callback: (Result<Unit>) -> Unit)
  fun getFillColor(managerId: String, callback: (Result<Long?>) -> Unit)
  fun setFillEmissiveStrength(managerId: String, fillEmissiveStrength: Double, callback: (Result<Unit>) -> Unit)
  fun getFillEmissiveStrength(managerId: String, callback: (Result<Double?>) -> Unit)
  fun setFillOpacity(managerId: String, fillOpacity: Double, callback: (Result<Unit>) -> Unit)
  fun getFillOpacity(managerId: String, callback: (Result<Double?>) -> Unit)
  fun setFillOutlineColor(managerId: String, fillOutlineColor: Long, callback: (Result<Unit>) -> Unit)
  fun getFillOutlineColor(managerId: String, callback: (Result<Long?>) -> Unit)
  fun setFillPattern(managerId: String, fillPattern: String, callback: (Result<Unit>) -> Unit)
  fun getFillPattern(managerId: String, callback: (Result<String?>) -> Unit)
  fun setFillTranslate(managerId: String, fillTranslate: List<Double?>, callback: (Result<Unit>) -> Unit)
  fun getFillTranslate(managerId: String, callback: (Result<List<Double?>?>) -> Unit)
  fun setFillTranslateAnchor(managerId: String, fillTranslateAnchor: FillTranslateAnchor, callback: (Result<Unit>) -> Unit)
  fun getFillTranslateAnchor(managerId: String, callback: (Result<FillTranslateAnchor?>) -> Unit)
  fun setFillTunnelStructureColor(managerId: String, fillTunnelStructureColor: Long, callback: (Result<Unit>) -> Unit)
  fun getFillTunnelStructureColor(managerId: String, callback: (Result<Long?>) -> Unit)
  fun setFillZOffset(managerId: String, fillZOffset: Double, callback: (Result<Unit>) -> Unit)
  fun getFillZOffset(managerId: String, callback: (Result<Double?>) -> Unit)

  companion object {
    /** The codec used by _PolygonAnnotationMessenger. */
    val codec: MessageCodec<Any?> by lazy {
      PolygonAnnotationMessengerPigeonCodec()
    }
    /** Sets up an instance of `_PolygonAnnotationMessenger` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _PolygonAnnotationMessenger?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.create$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val annotationOptionArg = args[1] as PolygonAnnotationOptions
            api.create(managerIdArg, annotationOptionArg) { result: Result<PolygonAnnotation> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.createMulti$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val annotationOptionsArg = args[1] as List<PolygonAnnotationOptions>
            api.createMulti(managerIdArg, annotationOptionsArg) { result: Result<List<PolygonAnnotation>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.update$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val annotationArg = args[1] as PolygonAnnotation
            api.update(managerIdArg, annotationArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.delete$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val annotationArg = args[1] as PolygonAnnotation
            api.delete(managerIdArg, annotationArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.deleteAll$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.deleteAll(managerIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillConstructBridgeGuardRail$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillConstructBridgeGuardRailArg = args[1] as Boolean
            api.setFillConstructBridgeGuardRail(managerIdArg, fillConstructBridgeGuardRailArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillConstructBridgeGuardRail$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillConstructBridgeGuardRail(managerIdArg) { result: Result<Boolean?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillElevationReference$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillElevationReferenceArg = args[1] as FillElevationReference
            api.setFillElevationReference(managerIdArg, fillElevationReferenceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillElevationReference$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillElevationReference(managerIdArg) { result: Result<FillElevationReference?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillSortKey$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillSortKeyArg = args[1] as Double
            api.setFillSortKey(managerIdArg, fillSortKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillSortKey$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillSortKey(managerIdArg) { result: Result<Double?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillAntialias$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillAntialiasArg = args[1] as Boolean
            api.setFillAntialias(managerIdArg, fillAntialiasArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillAntialias$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillAntialias(managerIdArg) { result: Result<Boolean?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillBridgeGuardRailColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillBridgeGuardRailColorArg = args[1] as Long
            api.setFillBridgeGuardRailColor(managerIdArg, fillBridgeGuardRailColorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillBridgeGuardRailColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillBridgeGuardRailColor(managerIdArg) { result: Result<Long?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillColorArg = args[1] as Long
            api.setFillColor(managerIdArg, fillColorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillColor(managerIdArg) { result: Result<Long?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillEmissiveStrength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillEmissiveStrengthArg = args[1] as Double
            api.setFillEmissiveStrength(managerIdArg, fillEmissiveStrengthArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillEmissiveStrength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillEmissiveStrength(managerIdArg) { result: Result<Double?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillOpacity$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillOpacityArg = args[1] as Double
            api.setFillOpacity(managerIdArg, fillOpacityArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillOpacity$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillOpacity(managerIdArg) { result: Result<Double?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillOutlineColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillOutlineColorArg = args[1] as Long
            api.setFillOutlineColor(managerIdArg, fillOutlineColorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillOutlineColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillOutlineColor(managerIdArg) { result: Result<Long?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillPattern$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillPatternArg = args[1] as String
            api.setFillPattern(managerIdArg, fillPatternArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillPattern$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillPattern(managerIdArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillTranslate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillTranslateArg = args[1] as List<Double?>
            api.setFillTranslate(managerIdArg, fillTranslateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillTranslate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillTranslate(managerIdArg) { result: Result<List<Double?>?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillTranslateAnchor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillTranslateAnchorArg = args[1] as FillTranslateAnchor
            api.setFillTranslateAnchor(managerIdArg, fillTranslateAnchorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillTranslateAnchor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillTranslateAnchor(managerIdArg) { result: Result<FillTranslateAnchor?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillTunnelStructureColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillTunnelStructureColorArg = args[1] as Long
            api.setFillTunnelStructureColor(managerIdArg, fillTunnelStructureColorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillTunnelStructureColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillTunnelStructureColor(managerIdArg) { result: Result<Long?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.setFillZOffset$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            val fillZOffsetArg = args[1] as Double
            api.setFillZOffset(managerIdArg, fillZOffsetArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PolygonAnnotationMessenger.getFillZOffset$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val managerIdArg = args[0] as String
            api.getFillZOffset(managerIdArg) { result: Result<Double?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}