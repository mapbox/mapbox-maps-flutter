// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package com.mapbox.maps.mapbox_maps.pigeons

import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun createConnectionError(channelName: String): GestureListenersFlutterError {
  return GestureListenersFlutterError("channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class GestureListenersFlutterError(
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
@Suppress("UNCHECKED_CAST")
private object GestureListenerCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScreenCoordinate.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is ScreenCoordinate -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class GestureListener(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by GestureListener. */
    val codec: MessageCodec<Any?> by lazy {
      GestureListenerCodec
    }
  }
  fun onTap(coordinateArg: ScreenCoordinate, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onTap"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(coordinateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(GestureListenersFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
  fun onLongTap(coordinateArg: ScreenCoordinate, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onLongTap"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(coordinateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(GestureListenersFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
  fun onScroll(coordinateArg: ScreenCoordinate, callback: (Result<Unit>) -> Unit) {
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onScroll"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(coordinateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(GestureListenersFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}