// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.mapbox.maps.mapbox_maps.pigeons

import android.util.Log
import com.mapbox.geojson.Point
import com.mapbox.maps.mapbox_maps.mapping.turf.*
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

enum class _ViewportTransitionType(val raw: Int) {
  DEFAULT_TRANSITION(0),
  FLY(1),
  EASING(2);

  companion object {
    fun ofRaw(raw: Int): _ViewportTransitionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class _FollowPuckViewportStateBearing(val raw: Int) {
  CONSTANT(0),
  HEADING(1),
  COURSE(2);

  companion object {
    fun ofRaw(raw: Int): _FollowPuckViewportStateBearing? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class _ViewportStateType(val raw: Int) {
  IDLE(0),
  OVERVIEW(1),
  FOLLOW_PUCK(2),
  STYLE_DEFAULT(3),
  CAMERA(4);

  companion object {
    fun ofRaw(raw: Int): _ViewportStateType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _DefaultViewportTransitionOptions(
  val maxDurationMs: Long
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _DefaultViewportTransitionOptions {
      val maxDurationMs = pigeonVar_list[0] as Long
      return _DefaultViewportTransitionOptions(maxDurationMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      maxDurationMs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _FlyViewportTransitionOptions(
  val durationMs: Long? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _FlyViewportTransitionOptions {
      val durationMs = pigeonVar_list[0] as Long?
      return _FlyViewportTransitionOptions(durationMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      durationMs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _EasingViewportTransitionOptions(
  val durationMs: Long,
  val a: Double,
  val b: Double,
  val c: Double,
  val d: Double
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _EasingViewportTransitionOptions {
      val durationMs = pigeonVar_list[0] as Long
      val a = pigeonVar_list[1] as Double
      val b = pigeonVar_list[2] as Double
      val c = pigeonVar_list[3] as Double
      val d = pigeonVar_list[4] as Double
      return _EasingViewportTransitionOptions(durationMs, a, b, c, d)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      durationMs,
      a,
      b,
      c,
      d,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _ViewportTransitionStorage(
  val type: _ViewportTransitionType,
  val options: Any? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _ViewportTransitionStorage {
      val type = pigeonVar_list[0] as _ViewportTransitionType
      val options = pigeonVar_list[1]
      return _ViewportTransitionStorage(type, options)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      options,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _OverviewViewportStateOptions(
  val geometry: String,
  val geometryPadding: MbxEdgeInsets,
  val bearing: Double? = null,
  val pitch: Double? = null,
  val padding: MbxEdgeInsets? = null,
  val maxZoom: Double? = null,
  val offset: ScreenCoordinate? = null,
  val animationDurationMs: Long
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _OverviewViewportStateOptions {
      val geometry = pigeonVar_list[0] as String
      val geometryPadding = pigeonVar_list[1] as MbxEdgeInsets
      val bearing = pigeonVar_list[2] as Double?
      val pitch = pigeonVar_list[3] as Double?
      val padding = pigeonVar_list[4] as MbxEdgeInsets?
      val maxZoom = pigeonVar_list[5] as Double?
      val offset = pigeonVar_list[6] as ScreenCoordinate?
      val animationDurationMs = pigeonVar_list[7] as Long
      return _OverviewViewportStateOptions(geometry, geometryPadding, bearing, pitch, padding, maxZoom, offset, animationDurationMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      geometry,
      geometryPadding,
      bearing,
      pitch,
      padding,
      maxZoom,
      offset,
      animationDurationMs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _FollowPuckViewportStateOptions(
  val zoom: Double? = null,
  val bearingValue: Double? = null,
  val bearing: _FollowPuckViewportStateBearing? = null,
  val pitch: Double? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _FollowPuckViewportStateOptions {
      val zoom = pigeonVar_list[0] as Double?
      val bearingValue = pigeonVar_list[1] as Double?
      val bearing = pigeonVar_list[2] as _FollowPuckViewportStateBearing?
      val pitch = pigeonVar_list[3] as Double?
      return _FollowPuckViewportStateOptions(zoom, bearingValue, bearing, pitch)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      zoom,
      bearingValue,
      bearing,
      pitch,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class _ViewportStateStorage(
  val type: _ViewportStateType,
  val options: Any? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): _ViewportStateStorage {
      val type = pigeonVar_list[0] as _ViewportStateType
      val options = pigeonVar_list[1]
      return _ViewportStateStorage(type, options)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      options,
    )
  }
}
private open class ViewportInternalPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          _ViewportTransitionType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          _FollowPuckViewportStateBearing.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          _ViewportStateType.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MbxEdgeInsets.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScreenCoordinate.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraOptions.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PointDecoder.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _DefaultViewportTransitionOptions.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _FlyViewportTransitionOptions.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _EasingViewportTransitionOptions.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _ViewportTransitionStorage.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _OverviewViewportStateOptions.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _FollowPuckViewportStateOptions.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          _ViewportStateStorage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is _ViewportTransitionType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is _FollowPuckViewportStateBearing -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is _ViewportStateType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is MbxEdgeInsets -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ScreenCoordinate -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is CameraOptions -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is Point -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is _DefaultViewportTransitionOptions -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is _FlyViewportTransitionOptions -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is _EasingViewportTransitionOptions -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is _ViewportTransitionStorage -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is _OverviewViewportStateOptions -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is _FollowPuckViewportStateOptions -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is _ViewportStateStorage -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _ViewportMessenger {
  fun transition(stateStorage: _ViewportStateStorage, transitionStorage: _ViewportTransitionStorage?, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by _ViewportMessenger. */
    val codec: MessageCodec<Any?> by lazy {
      ViewportInternalPigeonCodec()
    }
    /** Sets up an instance of `_ViewportMessenger` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _ViewportMessenger?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._ViewportMessenger.transition$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val stateStorageArg = args[0] as _ViewportStateStorage
            val transitionStorageArg = args[1] as _ViewportTransitionStorage?
            api.transition(stateStorageArg, transitionStorageArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}