version: 2.1

orbs:
  flutter: circleci/flutter@2
  macos: circleci/macos@2
  gcp-cli: circleci/gcp-cli@3
  slack: circleci/slack@5

commands:

  inject-netrc-credentials:
    steps:
      - run:
          name: Configure .netrc
          command: |
            echo "machine api.mapbox.com login mapbox password ${SDK_REGISTRY_TOKEN}" >> ~/.netrc
            chmod 0600 ~/.netrc

  setup-gcloud:
    steps:
      - gcp-cli/setup:
          version: 494.0.0
          gcloud_service_key: GCLOUD_SERVICE_ACCOUNT_JSON

  add-mapbox-submodules-key:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9d:db:07:0b:62:81:11:c3:46:21:8e:fa:51:99:80:2d"

  slack-notify-failure-if-any:
    steps:
      - slack/notify:
          event: fail
          branch_pattern: ^(main|release.*)$
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":flutter: Maps SDK Flutter :red_circle:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "`$CIRCLE_JOB` <$CIRCLE_BUILD_URL|failed> for <https://github.com/mapbox/mapbox-maps-flutter/commit/$CIRCLE_SHA1|${CIRCLE_SHA1:0:6}> by `$(git log --format='%an' -n 1 $CIRCLE_SHA1)` on $(if [ \"$CIRCLE_BRANCH\" == \"main\" ]; then echo 'the'; fi) `${CIRCLE_TAG:-$CIRCLE_BRANCH}` ${CIRCLE_TAG:+tag}${CIRCLE_BRANCH:+branch}."
                  }
                },
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_quote",
                      "elements": [
                        {
                          "type": "text",
                          "text": "$(git log --format=%s -n 1 $CIRCLE_SHA1)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "cc @maps-flutter"
                    }
                  ]
                }
              ]
            }

jobs:

  build-android:
    parameters:
      workspace-path:
        type: string
        default: example/build/app/outputs/apk
    docker:
      - image: cimg/android:2024.01.1
    resource_class: 2xlarge
    steps:
      - checkout
      - flutter/install_sdk_and_pub:
          version: 3.24.3
          app-dir: example
      - run:
          name: ktlint
          working_directory: example/android
          command: ./gradlew ktlint
      - run:
          name: unit test
          command: flutter test test
      - run:
          name: "Build Android integration tests"
          working_directory: example/android
          command: |
            ./gradlew app:assembleAndroidTest --stacktrace
            ./gradlew app:assembleDebug -Ptarget=integration_test/all_test.dart -Pdart-defines="$(echo -n "ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN" | base64 -w 0)" --stacktrace
      - persist_to_workspace:
          root: << parameters.workspace-path >>
          paths:
            - debug/app-debug.apk
            - androidTest/debug/app-debug-androidTest.apk
      - slack-notify-failure-if-any


  run-android-tests-firebase:
    parameters:
      workspace-path:
        type: string
        default: example/build/app/outputs/apk
    executor: firebase-test-runner
    steps:
      - attach_workspace:
          at: << parameters.workspace-path >>
      - setup-gcloud
      - run:
          name: "Run Android integration tests on Firebase"
          no_output_timeout: 20m
          command: |
            gcloud firebase test android run --type instrumentation \
              --app << parameters.workspace-path >>/debug/app-debug.apk \
              --test << parameters.workspace-path >>/androidTest/debug/app-debug-androidTest.apk \
              --timeout 5m \
              --device model=shiba,version=34,locale=en,orientation=portrait \
              --results-dir=result_dir \
              --use-orchestrator \
              --num-flaky-test-attempts 3 \
              --no-record-video \
              --no-performance-metrics \
              --client-details matrixLabel="${CIRCLE_JOB}-${CIRCLE_SHA1:0:6}"
      - slack-notify-failure-if-any

  build-ios:
    parameters:
      workspace-path:
        type: string
        default: example/build/output
    executor: macos-xcode-latest
    steps:
      - checkout
      - inject-netrc-credentials
      - add-mapbox-submodules-key
      - macos/install-rosetta
      - flutter/install_sdk_and_pub:
          version: 3.24.3
          app-dir: example
      - flutter/install_ios_pod:
          app-dir: example
      - run:
          name: swiftlint
          working_directory: ios
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install swiftlint; swiftlint lint --strict
      - run:
          name: unit test
          command: flutter test test
      - run:
          name: "Build iOS integration tests"
          command: |
            pushd example

            # required to init configs that pass environment variables to fastlane later
            flutter build ios --config-only integration_test/all_test.dart \
              --release --dart-define=ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}

            popd # to repo root

            bundle install
            bundle exec fastlane build_examples_tests
      - persist_to_workspace:
          root: << parameters.workspace-path >>
          paths:
            - build_products.zip
      - slack-notify-failure-if-any

  run-ios-tests-firebase:
    parameters:
      workspace-path:
        type: string
        default: example/build/output
    executor: firebase-test-runner
    steps:
      - attach_workspace:
          at: << parameters.workspace-path >>
      - setup-gcloud
      - run:
          name: "Run iOS integration tests on Firebase"
          no_output_timeout: 20m
          command: |
            gcloud firebase test ios run \
              --test << parameters.workspace-path >>/build_products.zip \
              --device model=iphone13pro,version=15.7 \
              --timeout 5m \
              --num-flaky-test-attempts 3 \
              --client-details matrixLabel="${CIRCLE_JOB}-${CIRCLE_SHA1:0:6}" 2>&1 | tee firebase_test_lab_run.log
      - run:
          name: Download XCResults
          command: |
            TEST_LAB_PATH=$(cat firebase_test_lab_run.log | grep -o "test-lab.*/")

            mkdir testlab_results
            gsutil -m cp -r "gs://${TEST_LAB_PATH}i*" testlab_results
            zip -r testlab_results.zip testlab_results
          when: always
      - store_artifacts:
          path: firebase_test_lab_run.log
      - store_artifacts:
          path: testlab_results.zip
      - store_test_results:
          path: testlab_results
      - slack-notify-failure-if-any



workflows:
  build:
    jobs:
      - build-android
      - run-android-tests-firebase:
          requires:
            - build-android
      - build-ios
      - run-ios-tests-firebase:
          requires:
            - build-ios

executors:
  macos-xcode-latest:
    resource_class: macos.m1.medium.gen1
    macos:
      xcode: 16.0.0
  firebase-test-runner:
    resource_class: small
    docker:
      - image: cimg/python:3.7
