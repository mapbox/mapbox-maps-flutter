// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// Copyright (c) 2025, Mapbox.
// All rights reserved.
//
// Generated by jnigen. Do not edit!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.mapbox.maps.mapbox_maps.MapboxOptions_Interops`
class MapboxOptions_Interops extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapboxOptions_Interops> $type;

  @jni$_.internal
  MapboxOptions_Interops.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'com/mapbox/maps/mapbox_maps/MapboxOptions_Interops');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MapboxOptions_Interops$NullableType();
  static const type = $MapboxOptions_Interops$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lcom/mapbox/maps/mapbox_maps/MapboxOptions_Interops;',
  );

  /// from: `static public final com.mapbox.maps.mapbox_maps.MapboxOptions_Interops INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static MapboxOptions_Interops get INSTANCE =>
      _id_INSTANCE.get(_class, const $MapboxOptions_Interops$Type());

  static final _id_getAccessToken = _class.staticMethodId(
    r'getAccessToken',
    r'()Ljava/lang/String;',
  );

  static final _getAccessToken = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public final java.lang.String getAccessToken()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString getAccessToken() {
    return _getAccessToken(
            _class.reference.pointer, _id_getAccessToken as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $MapboxOptions_Interops$NullableType
    extends jni$_.JObjType<MapboxOptions_Interops?> {
  @jni$_.internal
  const $MapboxOptions_Interops$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/mapbox/maps/mapbox_maps/MapboxOptions_Interops;';

  @jni$_.internal
  @core$_.override
  MapboxOptions_Interops? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MapboxOptions_Interops.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapboxOptions_Interops?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapboxOptions_Interops$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapboxOptions_Interops$NullableType) &&
        other is $MapboxOptions_Interops$NullableType;
  }
}

final class $MapboxOptions_Interops$Type
    extends jni$_.JObjType<MapboxOptions_Interops> {
  @jni$_.internal
  const $MapboxOptions_Interops$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/mapbox/maps/mapbox_maps/MapboxOptions_Interops;';

  @jni$_.internal
  @core$_.override
  MapboxOptions_Interops fromReference(jni$_.JReference reference) =>
      MapboxOptions_Interops.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapboxOptions_Interops?> get nullableType =>
      const $MapboxOptions_Interops$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapboxOptions_Interops$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapboxOptions_Interops$Type) &&
        other is $MapboxOptions_Interops$Type;
  }
}
