// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

part of mapbox_maps_flutter;


/// Options for recording the map when using MapRecorder.
///
/// These recordings can be used to debug issues which require multiple steps to reproduce.
/// Additionally, playbacks can be used for performance testing custom scenarios.
class MapRecorderOptions {
  MapRecorderOptions({
    this.timeWindow,
    required this.loggingEnabled,
    required this.compressed,
  });

  /// The maximum duration (in milliseconds) from the current time until API calls are kept.
  /// If not specified, all API calls will be kept during the recording,
  /// which can lead to significant memory consumption for long sessions.
  int? timeWindow;

  /// If set to true, the recorded API calls will be printed in the logs.
  bool loggingEnabled;

  /// If set to true, the recorded output will be compressed with gzip.
  bool compressed;

  List<Object?> _toList() {
    return <Object?>[
      timeWindow,
      loggingEnabled,
      compressed,
    ];
  }

  Object encode() {
    return _toList();  }

  static MapRecorderOptions decode(Object result) {
    result as List<Object?>;
    return MapRecorderOptions(
      timeWindow: result[0] as int?,
      loggingEnabled: result[1]! as bool,
      compressed: result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MapRecorderOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      timeWindow == other.timeWindow
      && loggingEnabled == other.loggingEnabled
      && compressed == other.compressed;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Options for playback when using MapRecorder.
class MapPlayerOptions {
  MapPlayerOptions({
    required this.playbackCount,
    required this.playbackSpeedMultiplier,
    required this.avoidPlaybackPauses,
  });

  /// The number of times the sequence is played. If negative, the playback loops indefinitely.
  int playbackCount;

  /// Multiplies the speed of playback for faster or slower replays. (1 means no change.)
  double playbackSpeedMultiplier;

  /// When set to true, the player will try to interpolate actions between short wait actions,
  /// to continuously render during the playback.
  /// This can help to maintain a consistent load during performance testing.
  bool avoidPlaybackPauses;

  List<Object?> _toList() {
    return <Object?>[
      playbackCount,
      playbackSpeedMultiplier,
      avoidPlaybackPauses,
    ];
  }

  Object encode() {
    return _toList();  }

  static MapPlayerOptions decode(Object result) {
    result as List<Object?>;
    return MapPlayerOptions(
      playbackCount: result[0]! as int,
      playbackSpeedMultiplier: result[1]! as double,
      avoidPlaybackPauses: result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MapPlayerOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      playbackCount == other.playbackCount
      && playbackSpeedMultiplier == other.playbackSpeedMultiplier
      && avoidPlaybackPauses == other.avoidPlaybackPauses;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is MapRecorderOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is MapPlayerOptions) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return MapRecorderOptions.decode(readValue(buffer)!);
      case 130: 
        return MapPlayerOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Interface for MapRecorder functionality.
///
/// MapRecorder provides functions to record and replay API calls of a MapboxMap instance.
/// These recordings can be used to debug issues which require multiple steps to reproduce.
/// Additionally, playbacks can be used for performance testing custom scenarios.
///
/// Note: The raw format produced by stopRecording is experimental and there is no guarantee
/// for version cross-compatibility when feeding it to replay.
class _MapRecorderMessenger {
  /// Constructor for [_MapRecorderMessenger].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _MapRecorderMessenger({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Begins the recording session.
  ///
  /// @param options MapRecorderOptions to control recording.
  Future<void> startRecording(MapRecorderOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.startRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[options]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Stops the current recording session.
  /// Recorded section could be replayed with replay function.
  ///
  /// @return the Uint8List containing the recorded sequence in raw format.
  Future<Uint8List> stopRecording() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.stopRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  /// Replay a supplied sequence.
  ///
  /// @param recordedSequence Sequence recorded with stopRecording method.
  /// @param options Options to customize the behaviour of the playback.
  Future<void> replay(Uint8List recordedSequence, MapPlayerOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.replay$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[recordedSequence, options]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Temporarily pauses or resumes playback if already paused.
  Future<void> togglePauseReplay() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.togglePauseReplay$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns the string description of the current state of playback.
  Future<String> getPlaybackState() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._MapRecorderMessenger.getPlaybackState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }
}
