// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

part of mapbox_maps_flutter;

/// Configuration options for [ViewportManager].
class ViewportOptions {
  ViewportOptions({
    required this.transitionsToIdleUponUserInteraction,
  });

  /// Indicates whether the [ViewportManager] should idle when the user interacts with the map using gestures.
  ///
  /// Set this property to [false] to enable building a custom [ViewportState] that
  /// can work simultaneously with certain types of gestures.
  ///
  /// Defaults to [true].
  bool transitionsToIdleUponUserInteraction;

  Object encode() {
    return <Object?>[
      transitionsToIdleUponUserInteraction,
    ];
  }

  static ViewportOptions decode(Object result) {
    result as List<Object?>;
    return ViewportOptions(
      transitionsToIdleUponUserInteraction: result[0]! as bool,
    );
  }
}

class ViewportInternal_PigeonCodec extends StandardMessageCodec {
  const ViewportInternal_PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is ViewportOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return ViewportOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class _ViewportManager {
  /// Constructor for [_ViewportManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _ViewportManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      ViewportInternal_PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Get configuration options for adjusting the behavior of [ViewportManager].
  Future<ViewportOptions> getOptions() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._ViewportManager.getOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ViewportOptions?)!;
    }
  }

  /// Set configuration options for adjusting the behavior of [ViewportManager].
  Future<void> setOptions(ViewportOptions options) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._ViewportManager.setOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[options]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
