// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import struct Turf.Point

/// Error class for passing custom error details to Dart side.
final class PlatformInterfaceDataTypesError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PlatformInterfaceDataTypesError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Describes the coordinate on the screen, measured from top to bottom and from left to right.
/// Note: the `map` uses screen coordinate units measured in `logical pixels`.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ScreenCoordinate {
  /// A value representing the x position of this coordinate.
  var x: Double
  /// A value representing the y position of this coordinate.
  var y: Double

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScreenCoordinate? {
    let x = pigeonVar_list[0] as! Double
    let y = pigeonVar_list[1] as! Double

    return ScreenCoordinate(
      x: x,
      y: y
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
    ]
  }
}

/// The distance on each side between rectangles, when one is contained into other.
///
/// All fields' values are in `logical pixel` units.
///
/// Generated class from Pigeon that represents data sent in messages.
struct MbxEdgeInsets {
  /// Padding from the top.
  var top: Double
  /// Padding from the left.
  var left: Double
  /// Padding from the bottom.
  var bottom: Double
  /// Padding from the right.
  var right: Double

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MbxEdgeInsets? {
    let top = pigeonVar_list[0] as! Double
    let left = pigeonVar_list[1] as! Double
    let bottom = pigeonVar_list[2] as! Double
    let right = pigeonVar_list[3] as! Double

    return MbxEdgeInsets(
      top: top,
      left: left,
      bottom: bottom,
      right: right
    )
  }
  func toList() -> [Any?] {
    return [
      top,
      left,
      bottom,
      right,
    ]
  }
}

/// Various options for describing the viewpoint of a camera. All fields are
/// optional.
///
/// Anchor and center points are mutually exclusive, with preference for the
/// center point when both are set.
///
/// Generated class from Pigeon that represents data sent in messages.
struct CameraOptions {
  /// Coordinate at the center of the camera.
  var center: Point?
  /// Padding around the interior of the view that affects the frame of
  /// reference for `center`.
  var padding: MbxEdgeInsets?
  /// Point of reference for `zoom` and `angle`, assuming an origin at the
  /// top-left corner of the view.
  var anchor: ScreenCoordinate?
  /// Zero-based zoom level. Constrained to the minimum and maximum zoom
  /// levels.
  var zoom: Double?
  /// Bearing, measured in degrees from true north. Wrapped to [0, 360).
  var bearing: Double?
  /// Pitch toward the horizon measured in degrees.
  var pitch: Double?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraOptions? {
    let center: Point? = nilOrValue(pigeonVar_list[0])
    let padding: MbxEdgeInsets? = nilOrValue(pigeonVar_list[1])
    let anchor: ScreenCoordinate? = nilOrValue(pigeonVar_list[2])
    let zoom: Double? = nilOrValue(pigeonVar_list[3])
    let bearing: Double? = nilOrValue(pigeonVar_list[4])
    let pitch: Double? = nilOrValue(pigeonVar_list[5])

    return CameraOptions(
      center: center,
      padding: padding,
      anchor: anchor,
      zoom: zoom,
      bearing: bearing,
      pitch: pitch
    )
  }
  func toList() -> [Any?] {
    return [
      center,
      padding,
      anchor,
      zoom,
      bearing,
      pitch,
    ]
  }
}

/// Describes the viewpoint of a camera.
///
/// Generated class from Pigeon that represents data sent in messages.
struct CameraState {
  /// Coordinate at the center of the camera.
  var center: Point
  /// Padding around the interior of the view that affects the frame of
  /// reference for `center`.
  var padding: MbxEdgeInsets
  /// Zero-based zoom level. Constrained to the minimum and maximum zoom
  /// levels.
  var zoom: Double
  /// Bearing, measured in degrees from true north. Wrapped to [0, 360).
  var bearing: Double
  /// Pitch toward the horizon measured in degrees.
  var pitch: Double

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraState? {
    let center = pigeonVar_list[0] as! Point
    let padding = pigeonVar_list[1] as! MbxEdgeInsets
    let zoom = pigeonVar_list[2] as! Double
    let bearing = pigeonVar_list[3] as! Double
    let pitch = pigeonVar_list[4] as! Double

    return CameraState(
      center: center,
      padding: padding,
      zoom: zoom,
      bearing: bearing,
      pitch: pitch
    )
  }
  func toList() -> [Any?] {
    return [
      center,
      padding,
      zoom,
      bearing,
      pitch,
    ]
  }
}
