// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.mapbox.maps.mapbox_maps.pigeons

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}
private fun deepEqualsPerformaceStatistics(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
    return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
    return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
    return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
    return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size &&
      a.indices.all { deepEqualsPerformaceStatistics(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size && a.keys.all {
      (b as Map<Any?, Any?>).containsKey(it) &&
        deepEqualsPerformaceStatistics(a[it], b[it])
    }
  }
  return a == b
}

/** Samplers which can be optionally enabled to collect performance statistics. */
enum class PerformanceSamplerOptions(val raw: Int) {
  /** Enables the collection of `cumulativeValues`, which are GPU resource statistics. */
  CUMULATIVE(0),
  /** Enables the collection of `perFrameValues`, which are CPU timeline duration statistics. */
  PER_FRAME(1);

  companion object {
    fun ofRaw(raw: Int): PerformanceSamplerOptions? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Options for the following statistics collection behaviors:
 * - Specify the types of sampling: cumulative, per-frame, or both.
 * - Define the minimum elapsed time for collecting performance samples.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PerformanceStatisticsOptions(
  /** List of optional samplers to be used to collect performance statistics. */
  val samplerOptions: List<PerformanceSamplerOptions>,
  /**
   * The minimum elapsed time required before performance statistics become available.
   * It's important to note that the actual collection interval may exceed this duration since statistics are aggregated during render calls.
   * The effective collection interval can be observed through the `PerformanceStatistics` instance.
   * Setting `samplingDurationMillis` to 0 forces the collection of performance statistics every frame.
   *
   * A negative sampling duration is an error and results in no operation.
   */
  val samplingDurationMillis: Double
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PerformanceStatisticsOptions {
      val samplerOptions = pigeonVar_list[0] as List<PerformanceSamplerOptions>
      val samplingDurationMillis = pigeonVar_list[1] as Double
      return PerformanceStatisticsOptions(samplerOptions, samplingDurationMillis)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      samplerOptions,
      samplingDurationMillis,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PerformanceStatisticsOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsPerformaceStatistics(samplerOptions, other.samplerOptions) &&
      samplingDurationMillis == other.samplingDurationMillis
  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DurationStatistics(
  /** The largest measured duration over the sampling window. */
  val maxMillis: Double,
  /** The median duration over the sampling window. */
  val medianMillis: Double
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DurationStatistics {
      val maxMillis = pigeonVar_list[0] as Double
      val medianMillis = pigeonVar_list[1] as Double
      return DurationStatistics(maxMillis, medianMillis)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      maxMillis,
      medianMillis,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DurationStatistics) {
      return false
    }
    if (this === other) {
      return true
    }
    return maxMillis == other.maxMillis &&
      medianMillis == other.medianMillis
  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CumulativeRenderingStatistics(
  /** The number of draw calls at the end of the collection window. */
  val drawCalls: Long? = null,
  /** The amount of texture memory in use at the end of the collection window. */
  val textureBytes: Long? = null,
  /** The amount of vertex memory (array and index buffer memory) in use at the end of the collection window. */
  val vertexBytes: Long? = null,
  /** The number of graphics pipeline programs created. */
  val graphicsPrograms: Long? = null,
  /** The total amount of time spent on all graphics pipeline program creation, in milliseconds. */
  val graphicsProgramsCreationTimeMillis: Double? = null,
  /** The number of FBO switches. */
  val fboSwitchCount: Long? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CumulativeRenderingStatistics {
      val drawCalls = pigeonVar_list[0] as Long?
      val textureBytes = pigeonVar_list[1] as Long?
      val vertexBytes = pigeonVar_list[2] as Long?
      val graphicsPrograms = pigeonVar_list[3] as Long?
      val graphicsProgramsCreationTimeMillis = pigeonVar_list[4] as Double?
      val fboSwitchCount = pigeonVar_list[5] as Long?
      return CumulativeRenderingStatistics(drawCalls, textureBytes, vertexBytes, graphicsPrograms, graphicsProgramsCreationTimeMillis, fboSwitchCount)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      drawCalls,
      textureBytes,
      vertexBytes,
      graphicsPrograms,
      graphicsProgramsCreationTimeMillis,
      fboSwitchCount,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CumulativeRenderingStatistics) {
      return false
    }
    if (this === other) {
      return true
    }
    return drawCalls == other.drawCalls &&
      textureBytes == other.textureBytes &&
      vertexBytes == other.vertexBytes &&
      graphicsPrograms == other.graphicsPrograms &&
      graphicsProgramsCreationTimeMillis == other.graphicsProgramsCreationTimeMillis &&
      fboSwitchCount == other.fboSwitchCount
  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GroupPerformanceStatistics(
  /** The duration of the group or layer on the CPU timeline. */
  val durationMillis: Double,
  /** The name of the group or layer. */
  val name: String
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GroupPerformanceStatistics {
      val durationMillis = pigeonVar_list[0] as Double
      val name = pigeonVar_list[1] as String
      return GroupPerformanceStatistics(durationMillis, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      durationMillis,
      name,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is GroupPerformanceStatistics) {
      return false
    }
    if (this === other) {
      return true
    }
    return durationMillis == other.durationMillis &&
      name == other.name
  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PerFrameRenderingStatistics(
  /** The CPU timeline duration statistics of each render group, in descending order by duration. */
  val topRenderGroups: List<GroupPerformanceStatistics>,
  /** The CPU timeline duration statistics of each layer, in descending order by duration. */
  val topRenderLayers: List<GroupPerformanceStatistics>,
  /** The CPU timeline duration of the shadowmap render pass. */
  val shadowMapDurationStatistics: DurationStatistics,
  /** The CPU timeline duration of the renderer's resource (buffers, textures, images) upload pass. */
  val uploadDurationStatistics: DurationStatistics
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PerFrameRenderingStatistics {
      val topRenderGroups = pigeonVar_list[0] as List<GroupPerformanceStatistics>
      val topRenderLayers = pigeonVar_list[1] as List<GroupPerformanceStatistics>
      val shadowMapDurationStatistics = pigeonVar_list[2] as DurationStatistics
      val uploadDurationStatistics = pigeonVar_list[3] as DurationStatistics
      return PerFrameRenderingStatistics(topRenderGroups, topRenderLayers, shadowMapDurationStatistics, uploadDurationStatistics)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      topRenderGroups,
      topRenderLayers,
      shadowMapDurationStatistics,
      uploadDurationStatistics,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PerFrameRenderingStatistics) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsPerformaceStatistics(topRenderGroups, other.topRenderGroups) &&
      deepEqualsPerformaceStatistics(topRenderLayers, other.topRenderLayers) &&
      shadowMapDurationStatistics == other.shadowMapDurationStatistics &&
      uploadDurationStatistics == other.uploadDurationStatistics
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * The performance statistics collected at the end of the sampling duration.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PerformanceStatistics(
  /**
   * The actual amount of time elapsed during statistics collection. Note that this duration is always a little bit larger
   * than the configured duration, as collection happens at a fixed point during the map render call.
   */
  val collectionDurationMillis: Double,
  /** The CPU timeline duration statistics of the map render call. */
  val mapRenderDurationStatistics: DurationStatistics,
  /** Cumulative, continuously tracked, resource stats. Enable using the `CumulativeRenderingStats` performance sampler option. */
  val cumulativeStatistics: CumulativeRenderingStatistics? = null,
  /** Aggregated, per-frame, timings. Enable using the  `PerFrameRenderingStats` performance sampler option. */
  val perFrameStatistics: PerFrameRenderingStatistics? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PerformanceStatistics {
      val collectionDurationMillis = pigeonVar_list[0] as Double
      val mapRenderDurationStatistics = pigeonVar_list[1] as DurationStatistics
      val cumulativeStatistics = pigeonVar_list[2] as CumulativeRenderingStatistics?
      val perFrameStatistics = pigeonVar_list[3] as PerFrameRenderingStatistics?
      return PerformanceStatistics(collectionDurationMillis, mapRenderDurationStatistics, cumulativeStatistics, perFrameStatistics)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      collectionDurationMillis,
      mapRenderDurationStatistics,
      cumulativeStatistics,
      perFrameStatistics,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PerformanceStatistics) {
      return false
    }
    if (this === other) {
      return true
    }
    return collectionDurationMillis == other.collectionDurationMillis &&
      mapRenderDurationStatistics == other.mapRenderDurationStatistics &&
      cumulativeStatistics == other.cumulativeStatistics &&
      perFrameStatistics == other.perFrameStatistics
  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class PerformaceStatisticsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PerformanceSamplerOptions.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PerformanceStatisticsOptions.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DurationStatistics.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CumulativeRenderingStatistics.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GroupPerformanceStatistics.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PerFrameRenderingStatistics.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PerformanceStatistics.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is PerformanceSamplerOptions -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PerformanceStatisticsOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is DurationStatistics -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is CumulativeRenderingStatistics -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is GroupPerformanceStatistics -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PerFrameRenderingStatistics -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PerformanceStatistics -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PerformanceStatisticsListener(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PerformanceStatisticsListener. */
    val codec: MessageCodec<Any?> by lazy {
      PerformaceStatisticsPigeonCodec()
    }
  }
  fun onPerformanceStatisticsCollected(statisticsArg: PerformanceStatistics, callback: (Result<Unit>) -> Unit) {
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.PerformanceStatisticsListener.onPerformanceStatisticsCollected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(statisticsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _PerformanceStatisticsApi {
  fun startPerformanceStatisticsCollection(options: PerformanceStatisticsOptions)
  fun stopPerformanceStatisticsCollection()

  companion object {
    /** The codec used by _PerformanceStatisticsApi. */
    val codec: MessageCodec<Any?> by lazy {
      PerformaceStatisticsPigeonCodec()
    }
    /** Sets up an instance of `_PerformanceStatisticsApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _PerformanceStatisticsApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PerformanceStatisticsApi.startPerformanceStatisticsCollection$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as PerformanceStatisticsOptions
            val wrapped: List<Any?> = try {
              api.startPerformanceStatisticsCollection(optionsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PerformanceStatisticsApi.stopPerformanceStatisticsCollection$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopPerformanceStatisticsCollection()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}