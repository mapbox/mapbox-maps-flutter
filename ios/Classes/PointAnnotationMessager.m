// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PointAnnotationMessager.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTPointAnnotation ()
+ (FLTPointAnnotation *)fromMap:(NSDictionary *)dict;
+ (nullable FLTPointAnnotation *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTPointAnnotationOptions ()
+ (FLTPointAnnotationOptions *)fromMap:(NSDictionary *)dict;
+ (nullable FLTPointAnnotationOptions *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTPointAnnotation
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry
    image:(nullable FlutterStandardTypedData *)image
    iconAnchor:(FLTIconAnchor)iconAnchor
    iconImage:(nullable NSString *)iconImage
    iconOffset:(nullable NSArray<NSNumber *> *)iconOffset
    iconRotate:(nullable NSNumber *)iconRotate
    iconSize:(nullable NSNumber *)iconSize
    symbolSortKey:(nullable NSNumber *)symbolSortKey
    textAnchor:(FLTTextAnchor)textAnchor
    textField:(nullable NSString *)textField
    textJustify:(FLTTextJustify)textJustify
    textLetterSpacing:(nullable NSNumber *)textLetterSpacing
    textMaxWidth:(nullable NSNumber *)textMaxWidth
    textOffset:(nullable NSArray<NSNumber *> *)textOffset
    textRadialOffset:(nullable NSNumber *)textRadialOffset
    textRotate:(nullable NSNumber *)textRotate
    textSize:(nullable NSNumber *)textSize
    textTransform:(FLTTextTransform)textTransform
    iconColor:(nullable NSNumber *)iconColor
    iconHaloBlur:(nullable NSNumber *)iconHaloBlur
    iconHaloColor:(nullable NSNumber *)iconHaloColor
    iconHaloWidth:(nullable NSNumber *)iconHaloWidth
    iconOpacity:(nullable NSNumber *)iconOpacity
    textColor:(nullable NSNumber *)textColor
    textHaloBlur:(nullable NSNumber *)textHaloBlur
    textHaloColor:(nullable NSNumber *)textHaloColor
    textHaloWidth:(nullable NSNumber *)textHaloWidth
    textOpacity:(nullable NSNumber *)textOpacity
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTPointAnnotation* pigeonResult = [[FLTPointAnnotation alloc] init];
  pigeonResult.id = id;
  pigeonResult.geometry = geometry;
  pigeonResult.image = image;
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = iconImage;
  pigeonResult.iconOffset = iconOffset;
  pigeonResult.iconRotate = iconRotate;
  pigeonResult.iconSize = iconSize;
  pigeonResult.symbolSortKey = symbolSortKey;
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = textField;
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = textLetterSpacing;
  pigeonResult.textMaxWidth = textMaxWidth;
  pigeonResult.textOffset = textOffset;
  pigeonResult.textRadialOffset = textRadialOffset;
  pigeonResult.textRotate = textRotate;
  pigeonResult.textSize = textSize;
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = iconColor;
  pigeonResult.iconHaloBlur = iconHaloBlur;
  pigeonResult.iconHaloColor = iconHaloColor;
  pigeonResult.iconHaloWidth = iconHaloWidth;
  pigeonResult.iconOpacity = iconOpacity;
  pigeonResult.textColor = textColor;
  pigeonResult.textHaloBlur = textHaloBlur;
  pigeonResult.textHaloColor = textHaloColor;
  pigeonResult.textHaloWidth = textHaloWidth;
  pigeonResult.textOpacity = textOpacity;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTPointAnnotation *)fromMap:(NSDictionary *)dict {
  FLTPointAnnotation *pigeonResult = [[FLTPointAnnotation alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  pigeonResult.image = GetNullableObject(dict, @"image");
  pigeonResult.iconAnchor = [GetNullableObject(dict, @"iconAnchor") integerValue];
  pigeonResult.iconImage = GetNullableObject(dict, @"iconImage");
  pigeonResult.iconOffset = GetNullableObject(dict, @"iconOffset");
  pigeonResult.iconRotate = GetNullableObject(dict, @"iconRotate");
  pigeonResult.iconSize = GetNullableObject(dict, @"iconSize");
  pigeonResult.symbolSortKey = GetNullableObject(dict, @"symbolSortKey");
  pigeonResult.textAnchor = [GetNullableObject(dict, @"textAnchor") integerValue];
  pigeonResult.textField = GetNullableObject(dict, @"textField");
  pigeonResult.textJustify = [GetNullableObject(dict, @"textJustify") integerValue];
  pigeonResult.textLetterSpacing = GetNullableObject(dict, @"textLetterSpacing");
  pigeonResult.textMaxWidth = GetNullableObject(dict, @"textMaxWidth");
  pigeonResult.textOffset = GetNullableObject(dict, @"textOffset");
  pigeonResult.textRadialOffset = GetNullableObject(dict, @"textRadialOffset");
  pigeonResult.textRotate = GetNullableObject(dict, @"textRotate");
  pigeonResult.textSize = GetNullableObject(dict, @"textSize");
  pigeonResult.textTransform = [GetNullableObject(dict, @"textTransform") integerValue];
  pigeonResult.iconColor = GetNullableObject(dict, @"iconColor");
  pigeonResult.iconHaloBlur = GetNullableObject(dict, @"iconHaloBlur");
  pigeonResult.iconHaloColor = GetNullableObject(dict, @"iconHaloColor");
  pigeonResult.iconHaloWidth = GetNullableObject(dict, @"iconHaloWidth");
  pigeonResult.iconOpacity = GetNullableObject(dict, @"iconOpacity");
  pigeonResult.textColor = GetNullableObject(dict, @"textColor");
  pigeonResult.textHaloBlur = GetNullableObject(dict, @"textHaloBlur");
  pigeonResult.textHaloColor = GetNullableObject(dict, @"textHaloColor");
  pigeonResult.textHaloWidth = GetNullableObject(dict, @"textHaloWidth");
  pigeonResult.textOpacity = GetNullableObject(dict, @"textOpacity");
  pigeonResult.userInfo = GetNullableObject(dict, @"userInfo");
  return pigeonResult;
}
+ (nullable FLTPointAnnotation *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTPointAnnotation fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"geometry" : (self.geometry ?: [NSNull null]),
    @"image" : (self.image ?: [NSNull null]),
    @"iconAnchor" : @(self.iconAnchor),
    @"iconImage" : (self.iconImage ?: [NSNull null]),
    @"iconOffset" : (self.iconOffset ?: [NSNull null]),
    @"iconRotate" : (self.iconRotate ?: [NSNull null]),
    @"iconSize" : (self.iconSize ?: [NSNull null]),
    @"symbolSortKey" : (self.symbolSortKey ?: [NSNull null]),
    @"textAnchor" : @(self.textAnchor),
    @"textField" : (self.textField ?: [NSNull null]),
    @"textJustify" : @(self.textJustify),
    @"textLetterSpacing" : (self.textLetterSpacing ?: [NSNull null]),
    @"textMaxWidth" : (self.textMaxWidth ?: [NSNull null]),
    @"textOffset" : (self.textOffset ?: [NSNull null]),
    @"textRadialOffset" : (self.textRadialOffset ?: [NSNull null]),
    @"textRotate" : (self.textRotate ?: [NSNull null]),
    @"textSize" : (self.textSize ?: [NSNull null]),
    @"textTransform" : @(self.textTransform),
    @"iconColor" : (self.iconColor ?: [NSNull null]),
    @"iconHaloBlur" : (self.iconHaloBlur ?: [NSNull null]),
    @"iconHaloColor" : (self.iconHaloColor ?: [NSNull null]),
    @"iconHaloWidth" : (self.iconHaloWidth ?: [NSNull null]),
    @"iconOpacity" : (self.iconOpacity ?: [NSNull null]),
    @"textColor" : (self.textColor ?: [NSNull null]),
    @"textHaloBlur" : (self.textHaloBlur ?: [NSNull null]),
    @"textHaloColor" : (self.textHaloColor ?: [NSNull null]),
    @"textHaloWidth" : (self.textHaloWidth ?: [NSNull null]),
    @"textOpacity" : (self.textOpacity ?: [NSNull null]),
    @"userInfo" : (self.userInfo ?: [NSNull null]),
  };
}
@end

@implementation FLTPointAnnotationOptions
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry
    image:(nullable FlutterStandardTypedData *)image
    iconAnchor:(FLTIconAnchor)iconAnchor
    iconImage:(nullable NSString *)iconImage
    iconOffset:(nullable NSArray<NSNumber *> *)iconOffset
    iconRotate:(nullable NSNumber *)iconRotate
    iconSize:(nullable NSNumber *)iconSize
    symbolSortKey:(nullable NSNumber *)symbolSortKey
    textAnchor:(FLTTextAnchor)textAnchor
    textField:(nullable NSString *)textField
    textJustify:(FLTTextJustify)textJustify
    textLetterSpacing:(nullable NSNumber *)textLetterSpacing
    textMaxWidth:(nullable NSNumber *)textMaxWidth
    textOffset:(nullable NSArray<NSNumber *> *)textOffset
    textRadialOffset:(nullable NSNumber *)textRadialOffset
    textRotate:(nullable NSNumber *)textRotate
    textSize:(nullable NSNumber *)textSize
    textTransform:(FLTTextTransform)textTransform
    iconColor:(nullable NSNumber *)iconColor
    iconHaloBlur:(nullable NSNumber *)iconHaloBlur
    iconHaloColor:(nullable NSNumber *)iconHaloColor
    iconHaloWidth:(nullable NSNumber *)iconHaloWidth
    iconOpacity:(nullable NSNumber *)iconOpacity
    textColor:(nullable NSNumber *)textColor
    textHaloBlur:(nullable NSNumber *)textHaloBlur
    textHaloColor:(nullable NSNumber *)textHaloColor
    textHaloWidth:(nullable NSNumber *)textHaloWidth
    textOpacity:(nullable NSNumber *)textOpacity
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTPointAnnotationOptions* pigeonResult = [[FLTPointAnnotationOptions alloc] init];
  pigeonResult.geometry = geometry;
  pigeonResult.image = image;
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = iconImage;
  pigeonResult.iconOffset = iconOffset;
  pigeonResult.iconRotate = iconRotate;
  pigeonResult.iconSize = iconSize;
  pigeonResult.symbolSortKey = symbolSortKey;
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = textField;
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = textLetterSpacing;
  pigeonResult.textMaxWidth = textMaxWidth;
  pigeonResult.textOffset = textOffset;
  pigeonResult.textRadialOffset = textRadialOffset;
  pigeonResult.textRotate = textRotate;
  pigeonResult.textSize = textSize;
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = iconColor;
  pigeonResult.iconHaloBlur = iconHaloBlur;
  pigeonResult.iconHaloColor = iconHaloColor;
  pigeonResult.iconHaloWidth = iconHaloWidth;
  pigeonResult.iconOpacity = iconOpacity;
  pigeonResult.textColor = textColor;
  pigeonResult.textHaloBlur = textHaloBlur;
  pigeonResult.textHaloColor = textHaloColor;
  pigeonResult.textHaloWidth = textHaloWidth;
  pigeonResult.textOpacity = textOpacity;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTPointAnnotationOptions *)fromMap:(NSDictionary *)dict {
  FLTPointAnnotationOptions *pigeonResult = [[FLTPointAnnotationOptions alloc] init];
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  pigeonResult.image = GetNullableObject(dict, @"image");
  pigeonResult.iconAnchor = [GetNullableObject(dict, @"iconAnchor") integerValue];
  pigeonResult.iconImage = GetNullableObject(dict, @"iconImage");
  pigeonResult.iconOffset = GetNullableObject(dict, @"iconOffset");
  pigeonResult.iconRotate = GetNullableObject(dict, @"iconRotate");
  pigeonResult.iconSize = GetNullableObject(dict, @"iconSize");
  pigeonResult.symbolSortKey = GetNullableObject(dict, @"symbolSortKey");
  pigeonResult.textAnchor = [GetNullableObject(dict, @"textAnchor") integerValue];
  pigeonResult.textField = GetNullableObject(dict, @"textField");
  pigeonResult.textJustify = [GetNullableObject(dict, @"textJustify") integerValue];
  pigeonResult.textLetterSpacing = GetNullableObject(dict, @"textLetterSpacing");
  pigeonResult.textMaxWidth = GetNullableObject(dict, @"textMaxWidth");
  pigeonResult.textOffset = GetNullableObject(dict, @"textOffset");
  pigeonResult.textRadialOffset = GetNullableObject(dict, @"textRadialOffset");
  pigeonResult.textRotate = GetNullableObject(dict, @"textRotate");
  pigeonResult.textSize = GetNullableObject(dict, @"textSize");
  pigeonResult.textTransform = [GetNullableObject(dict, @"textTransform") integerValue];
  pigeonResult.iconColor = GetNullableObject(dict, @"iconColor");
  pigeonResult.iconHaloBlur = GetNullableObject(dict, @"iconHaloBlur");
  pigeonResult.iconHaloColor = GetNullableObject(dict, @"iconHaloColor");
  pigeonResult.iconHaloWidth = GetNullableObject(dict, @"iconHaloWidth");
  pigeonResult.iconOpacity = GetNullableObject(dict, @"iconOpacity");
  pigeonResult.textColor = GetNullableObject(dict, @"textColor");
  pigeonResult.textHaloBlur = GetNullableObject(dict, @"textHaloBlur");
  pigeonResult.textHaloColor = GetNullableObject(dict, @"textHaloColor");
  pigeonResult.textHaloWidth = GetNullableObject(dict, @"textHaloWidth");
  pigeonResult.textOpacity = GetNullableObject(dict, @"textOpacity");
  pigeonResult.userInfo = GetNullableObject(dict, @"userInfo");
  return pigeonResult;
}
+ (nullable FLTPointAnnotationOptions *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTPointAnnotationOptions fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"geometry" : (self.geometry ?: [NSNull null]),
    @"image" : (self.image ?: [NSNull null]),
    @"iconAnchor" : @(self.iconAnchor),
    @"iconImage" : (self.iconImage ?: [NSNull null]),
    @"iconOffset" : (self.iconOffset ?: [NSNull null]),
    @"iconRotate" : (self.iconRotate ?: [NSNull null]),
    @"iconSize" : (self.iconSize ?: [NSNull null]),
    @"symbolSortKey" : (self.symbolSortKey ?: [NSNull null]),
    @"textAnchor" : @(self.textAnchor),
    @"textField" : (self.textField ?: [NSNull null]),
    @"textJustify" : @(self.textJustify),
    @"textLetterSpacing" : (self.textLetterSpacing ?: [NSNull null]),
    @"textMaxWidth" : (self.textMaxWidth ?: [NSNull null]),
    @"textOffset" : (self.textOffset ?: [NSNull null]),
    @"textRadialOffset" : (self.textRadialOffset ?: [NSNull null]),
    @"textRotate" : (self.textRotate ?: [NSNull null]),
    @"textSize" : (self.textSize ?: [NSNull null]),
    @"textTransform" : @(self.textTransform),
    @"iconColor" : (self.iconColor ?: [NSNull null]),
    @"iconHaloBlur" : (self.iconHaloBlur ?: [NSNull null]),
    @"iconHaloColor" : (self.iconHaloColor ?: [NSNull null]),
    @"iconHaloWidth" : (self.iconHaloWidth ?: [NSNull null]),
    @"iconOpacity" : (self.iconOpacity ?: [NSNull null]),
    @"textColor" : (self.textColor ?: [NSNull null]),
    @"textHaloBlur" : (self.textHaloBlur ?: [NSNull null]),
    @"textHaloColor" : (self.textHaloColor ?: [NSNull null]),
    @"textHaloWidth" : (self.textHaloWidth ?: [NSNull null]),
    @"textOpacity" : (self.textOpacity ?: [NSNull null]),
    @"userInfo" : (self.userInfo ?: [NSNull null]),
  };
}
@end

@interface FLTOnPointAnnotationClickListenerCodecReader : FlutterStandardReader
@end
@implementation FLTOnPointAnnotationClickListenerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTPointAnnotation fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTOnPointAnnotationClickListenerCodecWriter : FlutterStandardWriter
@end
@implementation FLTOnPointAnnotationClickListenerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTPointAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTOnPointAnnotationClickListenerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOnPointAnnotationClickListenerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOnPointAnnotationClickListenerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOnPointAnnotationClickListenerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOnPointAnnotationClickListenerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTOnPointAnnotationClickListenerCodecReaderWriter *readerWriter = [[FLTOnPointAnnotationClickListenerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTOnPointAnnotationClickListener ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnPointAnnotationClickListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onPointAnnotationClickAnnotation:(FLTPointAnnotation *)arg_annotation completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OnPointAnnotationClickListener.onPointAnnotationClick"
      binaryMessenger:self.binaryMessenger
      codec:FLTOnPointAnnotationClickListenerGetCodec()];
  [channel sendMessage:@[arg_annotation ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface FLT_PointAnnotationMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_PointAnnotationMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTPointAnnotation fromMap:[self readValue]];
    
    case 129:     
      return [FLTPointAnnotationOptions fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_PointAnnotationMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_PointAnnotationMessagerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTPointAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTPointAnnotationOptions class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_PointAnnotationMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_PointAnnotationMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_PointAnnotationMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_PointAnnotationMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_PointAnnotationMessagerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_PointAnnotationMessagerCodecReaderWriter *readerWriter = [[FLT_PointAnnotationMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_PointAnnotationMessagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_PointAnnotationMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createManagerId:annotationOption:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(createManagerId:annotationOption:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotationOptions *arg_annotationOption = GetNullableObjectAtIndex(args, 1);
        [api createManagerId:arg_managerId annotationOption:arg_annotationOption completion:^(FLTPointAnnotation *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.createMulti"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMultiManagerId:annotationOptions:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(createMultiManagerId:annotationOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<FLTPointAnnotationOptions *> *arg_annotationOptions = GetNullableObjectAtIndex(args, 1);
        [api createMultiManagerId:arg_managerId annotationOptions:arg_annotationOptions completion:^(NSArray<FLTPointAnnotation *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.update"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateManagerId:annotation:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(updateManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api updateManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.delete"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteManagerId:annotation:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(deleteManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api deleteManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.deleteAll"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteAllManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(deleteAllManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api deleteAllManagerId:arg_managerId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    {
      FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc]
          initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getAnnotations"
          binaryMessenger:binaryMessenger
          codec:FLT_PointAnnotationMessagerGetCodec()        ];
      if (api) {
        NSCAssert([api respondsToSelector:@selector(getAnnotationsManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getAnnotationsManagerId:completion:)", api);
        [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
          [api getAnnotationsManagerId:arg_managerId completion:^(NSArray<FLTPointAnnotation *> *_Nullable output, FlutterError *_Nullable error) {
            callback(wrapResult(output, error));
          }];
        }];
      }
      else {
        [channel setMessageHandler:nil];
      }
    }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconAllowOverlapManagerId:iconAllowOverlap:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconAllowOverlapManagerId:iconAllowOverlap:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconAllowOverlap = GetNullableObjectAtIndex(args, 1);
        [api setIconAllowOverlapManagerId:arg_managerId iconAllowOverlap:arg_iconAllowOverlap completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconAllowOverlapManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconAllowOverlapManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconAllowOverlapManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconIgnorePlacementManagerId:iconIgnorePlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconIgnorePlacementManagerId:iconIgnorePlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconIgnorePlacement = GetNullableObjectAtIndex(args, 1);
        [api setIconIgnorePlacementManagerId:arg_managerId iconIgnorePlacement:arg_iconIgnorePlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconIgnorePlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconIgnorePlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconIgnorePlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconKeepUprightManagerId:iconKeepUpright:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconKeepUprightManagerId:iconKeepUpright:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconKeepUpright = GetNullableObjectAtIndex(args, 1);
        [api setIconKeepUprightManagerId:arg_managerId iconKeepUpright:arg_iconKeepUpright completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconKeepUprightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconKeepUprightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconKeepUprightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconOptionalManagerId:iconOptional:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconOptionalManagerId:iconOptional:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconOptional = GetNullableObjectAtIndex(args, 1);
        [api setIconOptionalManagerId:arg_managerId iconOptional:arg_iconOptional completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconOptionalManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconOptionalManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconOptionalManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconPaddingManagerId:iconPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconPaddingManagerId:iconPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconPadding = GetNullableObjectAtIndex(args, 1);
        [api setIconPaddingManagerId:arg_managerId iconPadding:arg_iconPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconPaddingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconPitchAlignmentManagerId:iconPitchAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconPitchAlignmentManagerId:iconPitchAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconPitchAlignment arg_iconPitchAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconPitchAlignmentManagerId:arg_managerId iconPitchAlignment:arg_iconPitchAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconPitchAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconPitchAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconPitchAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconRotationAlignmentManagerId:iconRotationAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconRotationAlignmentManagerId:iconRotationAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconRotationAlignment arg_iconRotationAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconRotationAlignmentManagerId:arg_managerId iconRotationAlignment:arg_iconRotationAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconRotationAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconRotationAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconRotationAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconTextFit"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTextFitManagerId:iconTextFit:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTextFitManagerId:iconTextFit:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconTextFit arg_iconTextFit = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconTextFitManagerId:arg_managerId iconTextFit:arg_iconTextFit completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconTextFit"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTextFitManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTextFitManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTextFitManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconTextFitPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTextFitPaddingManagerId:iconTextFitPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTextFitPaddingManagerId:iconTextFitPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_iconTextFitPadding = GetNullableObjectAtIndex(args, 1);
        [api setIconTextFitPaddingManagerId:arg_managerId iconTextFitPadding:arg_iconTextFitPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconTextFitPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTextFitPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTextFitPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTextFitPaddingManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setSymbolAvoidEdges"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolAvoidEdgesManagerId:symbolAvoidEdges:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolAvoidEdgesManagerId:symbolAvoidEdges:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_symbolAvoidEdges = GetNullableObjectAtIndex(args, 1);
        [api setSymbolAvoidEdgesManagerId:arg_managerId symbolAvoidEdges:arg_symbolAvoidEdges completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getSymbolAvoidEdges"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolAvoidEdgesManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolAvoidEdgesManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolAvoidEdgesManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setSymbolPlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolPlacementManagerId:symbolPlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolPlacementManagerId:symbolPlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTSymbolPlacement arg_symbolPlacement = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setSymbolPlacementManagerId:arg_managerId symbolPlacement:arg_symbolPlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getSymbolPlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolPlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolPlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolPlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setSymbolSpacing"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolSpacingManagerId:symbolSpacing:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolSpacingManagerId:symbolSpacing:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_symbolSpacing = GetNullableObjectAtIndex(args, 1);
        [api setSymbolSpacingManagerId:arg_managerId symbolSpacing:arg_symbolSpacing completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getSymbolSpacing"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolSpacingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolSpacingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolSpacingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setSymbolZOrder"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolZOrderManagerId:symbolZOrder:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolZOrderManagerId:symbolZOrder:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTSymbolZOrder arg_symbolZOrder = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setSymbolZOrderManagerId:arg_managerId symbolZOrder:arg_symbolZOrder completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getSymbolZOrder"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolZOrderManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolZOrderManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolZOrderManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextAllowOverlapManagerId:textAllowOverlap:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextAllowOverlapManagerId:textAllowOverlap:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textAllowOverlap = GetNullableObjectAtIndex(args, 1);
        [api setTextAllowOverlapManagerId:arg_managerId textAllowOverlap:arg_textAllowOverlap completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextAllowOverlapManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextAllowOverlapManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextAllowOverlapManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextFont"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextFontManagerId:textFont:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextFontManagerId:textFont:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_textFont = GetNullableObjectAtIndex(args, 1);
        [api setTextFontManagerId:arg_managerId textFont:arg_textFont completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextFont"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextFontManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextFontManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextFontManagerId:arg_managerId completion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextIgnorePlacementManagerId:textIgnorePlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextIgnorePlacementManagerId:textIgnorePlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textIgnorePlacement = GetNullableObjectAtIndex(args, 1);
        [api setTextIgnorePlacementManagerId:arg_managerId textIgnorePlacement:arg_textIgnorePlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextIgnorePlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextIgnorePlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextIgnorePlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextKeepUprightManagerId:textKeepUpright:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextKeepUprightManagerId:textKeepUpright:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textKeepUpright = GetNullableObjectAtIndex(args, 1);
        [api setTextKeepUprightManagerId:arg_managerId textKeepUpright:arg_textKeepUpright completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextKeepUprightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextKeepUprightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextKeepUprightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextLineHeight"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextLineHeightManagerId:textLineHeight:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextLineHeightManagerId:textLineHeight:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textLineHeight = GetNullableObjectAtIndex(args, 1);
        [api setTextLineHeightManagerId:arg_managerId textLineHeight:arg_textLineHeight completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextLineHeight"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextLineHeightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextLineHeightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextLineHeightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextMaxAngle"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextMaxAngleManagerId:textMaxAngle:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextMaxAngleManagerId:textMaxAngle:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textMaxAngle = GetNullableObjectAtIndex(args, 1);
        [api setTextMaxAngleManagerId:arg_managerId textMaxAngle:arg_textMaxAngle completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextMaxAngle"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextMaxAngleManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextMaxAngleManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextMaxAngleManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextOptionalManagerId:textOptional:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextOptionalManagerId:textOptional:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textOptional = GetNullableObjectAtIndex(args, 1);
        [api setTextOptionalManagerId:arg_managerId textOptional:arg_textOptional completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextOptionalManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextOptionalManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextOptionalManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextPaddingManagerId:textPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextPaddingManagerId:textPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textPadding = GetNullableObjectAtIndex(args, 1);
        [api setTextPaddingManagerId:arg_managerId textPadding:arg_textPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextPaddingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextPitchAlignmentManagerId:textPitchAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextPitchAlignmentManagerId:textPitchAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextPitchAlignment arg_textPitchAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextPitchAlignmentManagerId:arg_managerId textPitchAlignment:arg_textPitchAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextPitchAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextPitchAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextPitchAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextRotationAlignmentManagerId:textRotationAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextRotationAlignmentManagerId:textRotationAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextRotationAlignment arg_textRotationAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextRotationAlignmentManagerId:arg_managerId textRotationAlignment:arg_textRotationAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextRotationAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextRotationAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextRotationAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTranslateManagerId:iconTranslate:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTranslateManagerId:iconTranslate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_iconTranslate = GetNullableObjectAtIndex(args, 1);
        [api setIconTranslateManagerId:arg_managerId iconTranslate:arg_iconTranslate completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTranslateManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTranslateManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTranslateManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setIconTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTranslateAnchorManagerId:iconTranslateAnchor:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTranslateAnchorManagerId:iconTranslateAnchor:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconTranslateAnchor arg_iconTranslateAnchor = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconTranslateAnchorManagerId:arg_managerId iconTranslateAnchor:arg_iconTranslateAnchor completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getIconTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTranslateAnchorManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTranslateAnchorManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTranslateAnchorManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextTranslateManagerId:textTranslate:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextTranslateManagerId:textTranslate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_textTranslate = GetNullableObjectAtIndex(args, 1);
        [api setTextTranslateManagerId:arg_managerId textTranslate:arg_textTranslate completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextTranslateManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextTranslateManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextTranslateManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.setTextTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextTranslateAnchorManagerId:textTranslateAnchor:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextTranslateAnchorManagerId:textTranslateAnchor:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextTranslateAnchor arg_textTranslateAnchor = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextTranslateAnchorManagerId:arg_managerId textTranslateAnchor:arg_textTranslateAnchor completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._PointAnnotationMessager.getTextTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextTranslateAnchorManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextTranslateAnchorManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextTranslateAnchorManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
