// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// Orientation of circle when map is pitched.
typedef NS_ENUM(NSUInteger, FLTCirclePitchAlignment) {
  /// The circle is aligned to the plane of the map.
  FLTCirclePitchAlignmentMAP = 0,
  /// The circle is aligned to the plane of the viewport.
  FLTCirclePitchAlignmentVIEWPORT = 1,
};

/// Wrapper for FLTCirclePitchAlignment to allow for nullability.
@interface FLTCirclePitchAlignmentBox : NSObject
@property(nonatomic, assign) FLTCirclePitchAlignment value;
- (instancetype)initWithValue:(FLTCirclePitchAlignment)value;
@end

/// Controls the scaling behavior of the circle when the map is pitched.
typedef NS_ENUM(NSUInteger, FLTCirclePitchScale) {
  /// Circles are scaled according to their apparent distance to the camera.
  FLTCirclePitchScaleMAP = 0,
  /// Circles are not scaled.
  FLTCirclePitchScaleVIEWPORT = 1,
};

/// Wrapper for FLTCirclePitchScale to allow for nullability.
@interface FLTCirclePitchScaleBox : NSObject
@property(nonatomic, assign) FLTCirclePitchScale value;
- (instancetype)initWithValue:(FLTCirclePitchScale)value;
@end

/// Controls the frame of reference for `circle-translate`.
typedef NS_ENUM(NSUInteger, FLTCircleTranslateAnchor) {
  /// The circle is translated relative to the map.
  FLTCircleTranslateAnchorMAP = 0,
  /// The circle is translated relative to the viewport.
  FLTCircleTranslateAnchorVIEWPORT = 1,
};

/// Wrapper for FLTCircleTranslateAnchor to allow for nullability.
@interface FLTCircleTranslateAnchorBox : NSObject
@property(nonatomic, assign) FLTCircleTranslateAnchor value;
- (instancetype)initWithValue:(FLTCircleTranslateAnchor)value;
@end

@class FLTCircleAnnotation;
@class FLTCircleAnnotationOptions;

@interface FLTCircleAnnotation : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry
    circleSortKey:(nullable NSNumber *)circleSortKey
    circleBlur:(nullable NSNumber *)circleBlur
    circleColor:(nullable NSNumber *)circleColor
    circleOpacity:(nullable NSNumber *)circleOpacity
    circleRadius:(nullable NSNumber *)circleRadius
    circleStrokeColor:(nullable NSNumber *)circleStrokeColor
    circleStrokeOpacity:(nullable NSNumber *)circleStrokeOpacity
    circleStrokeWidth:(nullable NSNumber *)circleStrokeWidth;
/// The id for annotation
@property(nonatomic, copy) NSString * id;
/// The geometry that determines the location/shape of this annotation
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * geometry;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property(nonatomic, strong, nullable) NSNumber * circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property(nonatomic, strong, nullable) NSNumber * circleBlur;
/// The fill color of the circle.
@property(nonatomic, strong, nullable) NSNumber * circleColor;
/// The opacity at which the circle will be drawn.
@property(nonatomic, strong, nullable) NSNumber * circleOpacity;
/// Circle radius.
@property(nonatomic, strong, nullable) NSNumber * circleRadius;
/// The stroke color of the circle.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeColor;
/// The opacity of the circle's stroke.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeOpacity;
/// The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeWidth;
@end

@interface FLTCircleAnnotationOptions : NSObject
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry
    circleSortKey:(nullable NSNumber *)circleSortKey
    circleBlur:(nullable NSNumber *)circleBlur
    circleColor:(nullable NSNumber *)circleColor
    circleOpacity:(nullable NSNumber *)circleOpacity
    circleRadius:(nullable NSNumber *)circleRadius
    circleStrokeColor:(nullable NSNumber *)circleStrokeColor
    circleStrokeOpacity:(nullable NSNumber *)circleStrokeOpacity
    circleStrokeWidth:(nullable NSNumber *)circleStrokeWidth;
/// The geometry that determines the location/shape of this annotation
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * geometry;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property(nonatomic, strong, nullable) NSNumber * circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property(nonatomic, strong, nullable) NSNumber * circleBlur;
/// The fill color of the circle.
@property(nonatomic, strong, nullable) NSNumber * circleColor;
/// The opacity at which the circle will be drawn.
@property(nonatomic, strong, nullable) NSNumber * circleOpacity;
/// Circle radius.
@property(nonatomic, strong, nullable) NSNumber * circleRadius;
/// The stroke color of the circle.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeColor;
/// The opacity of the circle's stroke.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeOpacity;
/// The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.
@property(nonatomic, strong, nullable) NSNumber * circleStrokeWidth;
@end

/// The codec used by FLTOnCircleAnnotationClickListener.
NSObject<FlutterMessageCodec> *FLTOnCircleAnnotationClickListenerGetCodec(void);

@interface FLTOnCircleAnnotationClickListener : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onCircleAnnotationClickAnnotation:(FLTCircleAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by FLT_CircleAnnotationMessager.
NSObject<FlutterMessageCodec> *FLT_CircleAnnotationMessagerGetCodec(void);

@protocol FLT_CircleAnnotationMessager
- (void)createManagerId:(NSString *)managerId annotationOption:(FLTCircleAnnotationOptions *)annotationOption completion:(void (^)(FLTCircleAnnotation *_Nullable, FlutterError *_Nullable))completion;
- (void)createMultiManagerId:(NSString *)managerId annotationOptions:(NSArray<FLTCircleAnnotationOptions *> *)annotationOptions completion:(void (^)(NSArray<FLTCircleAnnotation *> *_Nullable, FlutterError *_Nullable))completion;
- (void)updateManagerId:(NSString *)managerId annotation:(FLTCircleAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
- (void)deleteManagerId:(NSString *)managerId annotation:(FLTCircleAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
- (void)deleteAllManagerId:(NSString *)managerId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setCircleEmissiveStrengthManagerId:(NSString *)managerId circleEmissiveStrength:(double)circleEmissiveStrength completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCircleEmissiveStrengthManagerId:(NSString *)managerId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)setCirclePitchAlignmentManagerId:(NSString *)managerId circlePitchAlignment:(FLTCirclePitchAlignment)circlePitchAlignment completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCirclePitchAlignmentManagerId:(NSString *)managerId completion:(void (^)(FLTCirclePitchAlignmentBox *_Nullable, FlutterError *_Nullable))completion;
- (void)setCirclePitchScaleManagerId:(NSString *)managerId circlePitchScale:(FLTCirclePitchScale)circlePitchScale completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCirclePitchScaleManagerId:(NSString *)managerId completion:(void (^)(FLTCirclePitchScaleBox *_Nullable, FlutterError *_Nullable))completion;
- (void)setCircleTranslateManagerId:(NSString *)managerId circleTranslate:(NSArray<NSNumber *> *)circleTranslate completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCircleTranslateManagerId:(NSString *)managerId completion:(void (^)(NSArray<NSNumber *> *_Nullable, FlutterError *_Nullable))completion;
- (void)setCircleTranslateAnchorManagerId:(NSString *)managerId circleTranslateAnchor:(FLTCircleTranslateAnchor)circleTranslateAnchor completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCircleTranslateAnchorManagerId:(NSString *)managerId completion:(void (^)(FLTCircleTranslateAnchorBox *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpFLT_CircleAnnotationMessager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_CircleAnnotationMessager> *_Nullable api);

NS_ASSUME_NONNULL_END
