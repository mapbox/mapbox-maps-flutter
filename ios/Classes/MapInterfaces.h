// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// Describes glyphs rasterization modes.
typedef NS_ENUM(NSUInteger, FLTGlyphsRasterizationMode) {
  /// No glyphs are rasterized locally. All glyphs are loaded from the server.
  FLTGlyphsRasterizationModeNO_GLYPHS_RASTERIZED_LOCALLY = 0,
  /// Ideographs are rasterized locally, and they are not loaded from the server.
  FLTGlyphsRasterizationModeIDEOGRAPHS_RASTERIZED_LOCALLY = 1,
  /// All glyphs are rasterized locally. No glyphs are loaded from the server.
  FLTGlyphsRasterizationModeALL_GLYPHS_RASTERIZED_LOCALLY = 2,
};

/// Wrapper for FLTGlyphsRasterizationMode to allow for nullability.
@interface FLTGlyphsRasterizationModeBox : NSObject
@property(nonatomic, assign) FLTGlyphsRasterizationMode value;
- (instancetype)initWithValue:(FLTGlyphsRasterizationMode)value;
@end

/// Describes the map context mode.
/// We can make some optimizations if we know that the drawing context is not shared with other code.
typedef NS_ENUM(NSUInteger, FLTContextMode) {
  /// Unique context mode: in OpenGL, the GL context is not shared, thus we can retain knowledge about the GL state
  /// from a previous render pass. It also enables clearing the screen using glClear for the bottommost background
  /// layer when no pattern is applied to that layer.
  FLTContextModeUNIQUE = 0,
  /// Shared context mode: in OpenGL, the GL context is shared with other renderers, thus we cannot rely on the GL
  /// state set from a previous render pass.
  FLTContextModeSHARED = 1,
};

/// Wrapper for FLTContextMode to allow for nullability.
@interface FLTContextModeBox : NSObject
@property(nonatomic, assign) FLTContextMode value;
- (instancetype)initWithValue:(FLTContextMode)value;
@end

/// Describes whether to constrain the map in both axes or only vertically e.g. while panning.
typedef NS_ENUM(NSUInteger, FLTConstrainMode) {
  /// No constrains.
  FLTConstrainModeNONE = 0,
  /// Constrain to height only
  FLTConstrainModeHEIGHT_ONLY = 1,
  /// Constrain both width and height axes.
  FLTConstrainModeWIDTH_AND_HEIGHT = 2,
};

/// Wrapper for FLTConstrainMode to allow for nullability.
@interface FLTConstrainModeBox : NSObject
@property(nonatomic, assign) FLTConstrainMode value;
- (instancetype)initWithValue:(FLTConstrainMode)value;
@end

/// Satisfies embedding platforms that requires the viewport coordinate systems to be set according to its standards.
typedef NS_ENUM(NSUInteger, FLTViewportMode) {
  /// Default viewport
  FLTViewportModeDEFAULT = 0,
  /// Viewport flipped on the y-axis.
  FLTViewportModeFLIPPED_Y = 1,
};

/// Wrapper for FLTViewportMode to allow for nullability.
@interface FLTViewportModeBox : NSObject
@property(nonatomic, assign) FLTViewportMode value;
- (instancetype)initWithValue:(FLTViewportMode)value;
@end

/// Describes the map orientation.
typedef NS_ENUM(NSUInteger, FLTNorthOrientation) {
  /// Default, map oriented upwards
  FLTNorthOrientationUPWARDS = 0,
  /// Map oriented righwards
  FLTNorthOrientationRIGHTWARDS = 1,
  /// Map oriented downwards
  FLTNorthOrientationDOWNWARDS = 2,
  /// Map oriented leftwards
  FLTNorthOrientationLEFTWARDS = 3,
};

/// Wrapper for FLTNorthOrientation to allow for nullability.
@interface FLTNorthOrientationBox : NSObject
@property(nonatomic, assign) FLTNorthOrientation value;
- (instancetype)initWithValue:(FLTNorthOrientation)value;
@end

/// Options for enabling debugging features in a map.
typedef NS_ENUM(NSUInteger, FLTMapDebugOptionsData) {
  /// Edges of tile boundaries are shown as thick, red lines to help diagnose
  /// tile clipping issues.
  FLTMapDebugOptionsDataTILE_BORDERS = 0,
  /// Each tile shows its tile coordinate (x/y/z) in the upper-left corner.
  FLTMapDebugOptionsDataPARSE_STATUS = 1,
  /// Each tile shows a timestamp indicating when it was loaded.
  FLTMapDebugOptionsDataTIMESTAMPS = 2,
  /// Edges of glyphs and symbols are shown as faint, green lines to help
  /// diagnose collision and label placement issues.
  FLTMapDebugOptionsDataCOLLISION = 3,
  /// Each drawing operation is replaced by a translucent fill. Overlapping
  /// drawing operations appear more prominent to help diagnose overdrawing.
  FLTMapDebugOptionsDataOVERDRAW = 4,
  /// The stencil buffer is shown instead of the color buffer.
  FLTMapDebugOptionsDataSTENCIL_CLIP = 5,
  /// The depth buffer is shown instead of the color buffer.
  FLTMapDebugOptionsDataDEPTH_BUFFER = 6,
  /// Visualize residency of tiles in the render cache. Tile boundaries of cached tiles
  /// are rendered with green, tiles waiting for an update with yellow and tiles not in the cache
  /// with red.
  FLTMapDebugOptionsDataRENDER_CACHE = 7,
  /// Show 3D model bounding boxes.
  FLTMapDebugOptionsDataMODEL_BOUNDS = 8,
  /// Show a wireframe for terrain.
  FLTMapDebugOptionsDataTERRAIN_WIREFRAME = 9,
};

/// Wrapper for FLTMapDebugOptionsData to allow for nullability.
@interface FLTMapDebugOptionsDataBox : NSObject
@property(nonatomic, assign) FLTMapDebugOptionsData value;
- (instancetype)initWithValue:(FLTMapDebugOptionsData)value;
@end

/// Enum describing how to place view annotation relatively to geometry.
typedef NS_ENUM(NSUInteger, FLTViewAnnotationAnchor) {
  /// The top of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorTOP = 0,
  /// The left side of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorLEFT = 1,
  /// The bottom of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorBOTTOM = 2,
  /// The right side of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorRIGHT = 3,
  /// The top-left corner of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorTOP_LEFT = 4,
  /// The bottom-right corner of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorBOTTOM_RIGHT = 5,
  /// The top-right corner of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorTOP_RIGHT = 6,
  /// The bottom-left corner of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorBOTTOM_LEFT = 7,
  /// The center of the view annotation is placed closest to the geometry.
  FLTViewAnnotationAnchorCENTER = 8,
};

/// Wrapper for FLTViewAnnotationAnchor to allow for nullability.
@interface FLTViewAnnotationAnchorBox : NSObject
@property(nonatomic, assign) FLTViewAnnotationAnchor value;
- (instancetype)initWithValue:(FLTViewAnnotationAnchor)value;
@end

/// Type information of the variant's content
typedef NS_ENUM(NSUInteger, FLTType) {
  FLTTypeSCREEN_BOX = 0,
  FLTTypeSCREEN_COORDINATE = 1,
  FLTTypeLIST = 2,
};

/// Wrapper for FLTType to allow for nullability.
@interface FLTTypeBox : NSObject
@property(nonatomic, assign) FLTType value;
- (instancetype)initWithValue:(FLTType)value;
@end

/// Describes the reason for a style package download request failure.
typedef NS_ENUM(NSUInteger, FLTStylePackErrorType) {
  /// The operation was canceled.
  FLTStylePackErrorTypeCANCELED = 0,
  /// The style package does not exist.
  FLTStylePackErrorTypeDOES_NOT_EXIST = 1,
  /// There is no available space to store the resources.
  FLTStylePackErrorTypeDISK_FULL = 2,
  /// Other reason.
  FLTStylePackErrorTypeOTHER = 3,
};

/// Wrapper for FLTStylePackErrorType to allow for nullability.
@interface FLTStylePackErrorTypeBox : NSObject
@property(nonatomic, assign) FLTStylePackErrorType value;
- (instancetype)initWithValue:(FLTStylePackErrorType)value;
@end

/// Describes the reason for an offline request response error.
typedef NS_ENUM(NSUInteger, FLTResponseErrorReason) {
  /// No error occurred during the resource request.
  FLTResponseErrorReasonSUCCESS = 0,
  /// The resource is not found.
  FLTResponseErrorReasonNOT_FOUND = 1,
  /// The server error.
  FLTResponseErrorReasonSERVER = 2,
  /// The connection error.
  FLTResponseErrorReasonCONNECTION = 3,
  /// The error happened because of a rate limit.
  FLTResponseErrorReasonRATE_LIMIT = 4,
  /// The resource cannot be loaded because the device is in offline mode.
  FLTResponseErrorReasonIN_OFFLINE_MODE = 5,
  /// Other reason.
  FLTResponseErrorReasonOTHER = 6,
};

/// Wrapper for FLTResponseErrorReason to allow for nullability.
@interface FLTResponseErrorReasonBox : NSObject
@property(nonatomic, assign) FLTResponseErrorReason value;
- (instancetype)initWithValue:(FLTResponseErrorReason)value;
@end

/// Describes the download state of a region.
typedef NS_ENUM(NSUInteger, FLTOfflineRegionDownloadState) {
  /// Indicates downloading is inactive.
  FLTOfflineRegionDownloadStateINACTIVE = 0,
  /// Indicates downloading is active.
  FLTOfflineRegionDownloadStateACTIVE = 1,
};

/// Wrapper for FLTOfflineRegionDownloadState to allow for nullability.
@interface FLTOfflineRegionDownloadStateBox : NSObject
@property(nonatomic, assign) FLTOfflineRegionDownloadState value;
- (instancetype)initWithValue:(FLTOfflineRegionDownloadState)value;
@end

/// Describes tile store usage modes.
typedef NS_ENUM(NSUInteger, FLTTileStoreUsageMode) {
  /// Tile store usage is disabled.
  ///
  /// The implementation skips checking tile store when requesting a tile.
  FLTTileStoreUsageModeDISABLED = 0,
  /// Tile store enabled for accessing loaded tile packs.
  ///
  /// The implementation first checks tile store when requesting a tile.
  /// If a tile pack is already loaded, the tile will be extracted and returned. Otherwise, the implementation
  /// falls back to requesting the individual tile and storing it in the disk cache.
  FLTTileStoreUsageModeREAD_ONLY = 1,
  /// Tile store enabled for accessing local tile packs and for loading new tile packs from server.
  ///
  /// All tile requests are converted to tile pack requests, i.e.
  /// the tile pack that includes the request tile will be loaded, and the tile extracted
  /// from it. In this mode, no individual tile requests will be made.
  ///
  /// This mode can be useful if the map trajectory is predefined and the user cannot pan
  /// freely (e.g. navigation use cases), so that there is a good chance tile packs are already loaded
  /// in the vicinity of the user.
  ///
  /// If users can pan freely, this mode is not recommended. Otherwise, panning
  /// will download tile packs instead of using individual tiles. Note that this means that we could first
  /// download an individual tile, and then a tile pack that also includes this tile. The individual tile in
  /// the disk cache won’t be used as long as the up-to-date tile pack exists in the cache.
  FLTTileStoreUsageModeREAD_AND_UPDATE = 2,
};

/// Wrapper for FLTTileStoreUsageMode to allow for nullability.
@interface FLTTileStoreUsageModeBox : NSObject
@property(nonatomic, assign) FLTTileStoreUsageMode value;
- (instancetype)initWithValue:(FLTTileStoreUsageMode)value;
@end

/// Describes the kind of a style property value.
typedef NS_ENUM(NSUInteger, FLTStylePropertyValueKind) {
  /// The property value is not defined.
  FLTStylePropertyValueKindUNDEFINED = 0,
  /// The property value is a constant.
  FLTStylePropertyValueKindCONSTANT = 1,
  /// The property value is a style [expression](https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions).
  FLTStylePropertyValueKindEXPRESSION = 2,
  /// Property value is a style [transition](https://docs.mapbox.com/mapbox-gl-js/style-spec/#transition).
  FLTStylePropertyValueKindTRANSITION = 3,
};

/// Wrapper for FLTStylePropertyValueKind to allow for nullability.
@interface FLTStylePropertyValueKindBox : NSObject
@property(nonatomic, assign) FLTStylePropertyValueKind value;
- (instancetype)initWithValue:(FLTStylePropertyValueKind)value;
@end

typedef NS_ENUM(NSUInteger, FLTStyleProjectionName) {
  FLTStyleProjectionNameMercator = 0,
  FLTStyleProjectionNameGlobe = 1,
};

/// Wrapper for FLTStyleProjectionName to allow for nullability.
@interface FLTStyleProjectionNameBox : NSObject
@property(nonatomic, assign) FLTStyleProjectionName value;
- (instancetype)initWithValue:(FLTStyleProjectionName)value;
@end

/// Whether extruded geometries are lit relative to the map or viewport.
typedef NS_ENUM(NSUInteger, FLTAnchor) {
  /// The position of the light source is aligned to the rotation of the map.
  FLTAnchorMAP = 0,
  /// The position of the light source is aligned to the rotation of the viewport.
  FLTAnchorVIEWPORT = 1,
};

/// Wrapper for FLTAnchor to allow for nullability.
@interface FLTAnchorBox : NSObject
@property(nonatomic, assign) FLTAnchor value;
- (instancetype)initWithValue:(FLTAnchor)value;
@end

/// HTTP defines a set of request methods to indicate the desired action to be performed for a given resource.
typedef NS_ENUM(NSUInteger, FLTHttpMethod) {
  /// The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
  FLTHttpMethodGET = 0,
  /// The HEAD method asks for a response identical to that of a GET request, but without the response body.
  FLTHttpMethodHEAD = 1,
  /// The POST method sends data (stored in the request body) to a server to create or update a given resource.
  FLTHttpMethodPOST = 2,
};

/// Wrapper for FLTHttpMethod to allow for nullability.
@interface FLTHttpMethodBox : NSObject
@property(nonatomic, assign) FLTHttpMethod value;
- (instancetype)initWithValue:(FLTHttpMethod)value;
@end

/// Classify network types based on cost.
typedef NS_ENUM(NSUInteger, FLTNetworkRestriction) {
  /// Allow access to all network types.
  FLTNetworkRestrictionNONE = 0,
  /// Forbid network access to expensive networks, such as cellular.
  FLTNetworkRestrictionDISALLOW_EXPENSIVE = 1,
  /// Forbid access to all network types.
  FLTNetworkRestrictionDISALLOW_ALL = 2,
};

/// Wrapper for FLTNetworkRestriction to allow for nullability.
@interface FLTNetworkRestrictionBox : NSObject
@property(nonatomic, assign) FLTNetworkRestriction value;
- (instancetype)initWithValue:(FLTNetworkRestriction)value;
@end

/// Enum which describes possible error types which could happen during HTTP request/download calls.
typedef NS_ENUM(NSUInteger, FLTHttpRequestErrorType) {
  /// Establishing connection related error.
  FLTHttpRequestErrorTypeCONNECTION_ERROR = 0,
  /// SSL related error.
  FLTHttpRequestErrorTypeSSLERROR = 1,
  /// Request was cancelled by the user.
  FLTHttpRequestErrorTypeREQUEST_CANCELLED = 2,
  /// Timeout error.
  FLTHttpRequestErrorTypeREQUEST_TIMED_OUT = 3,
  /// Range request failed.
  FLTHttpRequestErrorTypeRANGE_ERROR = 4,
  /// Other than above error.
  FLTHttpRequestErrorTypeOTHER_ERROR = 5,
};

/// Wrapper for FLTHttpRequestErrorType to allow for nullability.
@interface FLTHttpRequestErrorTypeBox : NSObject
@property(nonatomic, assign) FLTHttpRequestErrorType value;
- (instancetype)initWithValue:(FLTHttpRequestErrorType)value;
@end

/// Enum which represents different error cases which could happen during download session.
typedef NS_ENUM(NSUInteger, FLTDownloadErrorCode) {
  /// General filesystem related error code. For cases like: write error, no such file or directory, not enough space and etc.
  FLTDownloadErrorCodeFILE_SYSTEM_ERROR = 0,
  /// General network related error. Should be probably representation of HttpRequestError.
  FLTDownloadErrorCodeNETWORK_ERROR = 1,
};

/// Wrapper for FLTDownloadErrorCode to allow for nullability.
@interface FLTDownloadErrorCodeBox : NSObject
@property(nonatomic, assign) FLTDownloadErrorCode value;
- (instancetype)initWithValue:(FLTDownloadErrorCode)value;
@end

/// Enum representing state of download session.
typedef NS_ENUM(NSUInteger, FLTDownloadState) {
  /// Download session initiated but not started yet.
  FLTDownloadStatePENDING = 0,
  /// Download session is in progress.
  FLTDownloadStateDOWNLOADING = 1,
  /// Download session failed.
  FLTDownloadStateFAILED = 2,
  /// Download session successfully finished.
  FLTDownloadStateFINISHED = 3,
};

/// Wrapper for FLTDownloadState to allow for nullability.
@interface FLTDownloadStateBox : NSObject
@property(nonatomic, assign) FLTDownloadState value;
- (instancetype)initWithValue:(FLTDownloadState)value;
@end

/// Describes the tiles data domain.
typedef NS_ENUM(NSUInteger, FLTTileDataDomain) {
  /// Data for Maps.
  FLTTileDataDomainMAPS = 0,
  /// Data for Navigation.
  FLTTileDataDomainNAVIGATION = 1,
  /// Data for Search.
  FLTTileDataDomainSEARCH = 2,
  /// Data for ADAS
  FLTTileDataDomainADAS = 3,
};

/// Wrapper for FLTTileDataDomain to allow for nullability.
@interface FLTTileDataDomainBox : NSObject
@property(nonatomic, assign) FLTTileDataDomain value;
- (instancetype)initWithValue:(FLTTileDataDomain)value;
@end

/// Describes the reason for a tile region download request failure.
typedef NS_ENUM(NSUInteger, FLTTileRegionErrorType) {
  /// The operation was canceled.
  FLTTileRegionErrorTypeCANCELED = 0,
  /// tile region does not exist.
  FLTTileRegionErrorTypeDOES_NOT_EXIST = 1,
  /// Tileset descriptors resolving failed.
  FLTTileRegionErrorTypeTILESET_DESCRIPTOR = 2,
  /// There is no available space to store the resources
  FLTTileRegionErrorTypeDISK_FULL = 3,
  /// Other reason.
  FLTTileRegionErrorTypeOTHER = 4,
  /// The region contains more tiles than allowed.
  FLTTileRegionErrorTypeTILE_COUNT_EXCEEDED = 5,
};

/// Wrapper for FLTTileRegionErrorType to allow for nullability.
@interface FLTTileRegionErrorTypeBox : NSObject
@property(nonatomic, assign) FLTTileRegionErrorType value;
- (instancetype)initWithValue:(FLTTileRegionErrorType)value;
@end

typedef NS_ENUM(NSUInteger, FLT_MapEvent) {
  FLT_MapEventMapLoaded = 0,
  FLT_MapEventMapLoadingError = 1,
  FLT_MapEventStyleLoaded = 2,
  FLT_MapEventStyleDataLoaded = 3,
  FLT_MapEventCameraChanged = 4,
  FLT_MapEventMapIdle = 5,
  FLT_MapEventSourceAdded = 6,
  FLT_MapEventSourceRemoved = 7,
  FLT_MapEventSourceDataLoaded = 8,
  FLT_MapEventStyleImageMissing = 9,
  FLT_MapEventStyleImageRemoveUnused = 10,
  FLT_MapEventRenderFrameStarted = 11,
  FLT_MapEventRenderFrameFinished = 12,
  FLT_MapEventResourceRequest = 13,
};

/// Wrapper for FLT_MapEvent to allow for nullability.
@interface FLT_MapEventBox : NSObject
@property(nonatomic, assign) FLT_MapEvent value;
- (instancetype)initWithValue:(FLT_MapEvent)value;
@end

@class FLTMbxEdgeInsets;
@class FLTCameraOptions;
@class FLTCameraState;
@class FLTCameraBoundsOptions;
@class FLTCameraBounds;
@class FLTMapAnimationOptions;
@class FLTCoordinateBounds;
@class FLTMapDebugOptions;
@class FLTGlyphsRasterizationOptions;
@class FLTTileCacheBudgetInMegabytes;
@class FLTTileCacheBudgetInTiles;
@class FLTMapOptions;
@class FLTScreenCoordinate;
@class FLTScreenBox;
@class FLTCoordinateBoundsZoom;
@class FLTSize;
@class FLTRenderedQueryOptions;
@class FLTSourceQueryOptions;
@class FLTFeatureExtensionValue;
@class FLTLayerPosition;
@class FLTQueriedRenderedFeature;
@class FLTQueriedSourceFeature;
@class FLTQueriedFeature;
@class FLTRenderedQueryGeometry;
@class FLTOfflineRegionGeometryDefinition;
@class FLTOfflineRegionTilePyramidDefinition;
@class FLTProjectedMeters;
@class FLTMercatorCoordinate;
@class FLTStyleObjectInfo;
@class FLTStyleProjection;
@class FLTFlatLight;
@class FLTDirectionalLight;
@class FLTAmbientLight;
@class FLTMbxImage;
@class FLTImageStretches;
@class FLTImageContent;
@class FLTTransitionOptions;
@class FLTCanonicalTileID;
@class FLTStylePropertyValue;

/// The distance on each side between rectangles, when one is contained into other.
///
/// All fields' values are in `logical pixel` units.
@interface FLTMbxEdgeInsets : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithTop:(double )top
    left:(double )left
    bottom:(double )bottom
    right:(double )right;
/// Padding from the top.
@property(nonatomic, assign) double  top;
/// Padding from the left.
@property(nonatomic, assign) double  left;
/// Padding from the bottom.
@property(nonatomic, assign) double  bottom;
/// Padding from the right.
@property(nonatomic, assign) double  right;
@end

/// Various options for describing the viewpoint of a camera. All fields are
/// optional.
///
/// Anchor and center points are mutually exclusive, with preference for the
/// center point when both are set.
@interface FLTCameraOptions : NSObject
+ (instancetype)makeWithCenter:(nullable NSDictionary<NSString *, id> *)center
    padding:(nullable FLTMbxEdgeInsets *)padding
    anchor:(nullable FLTScreenCoordinate *)anchor
    zoom:(nullable NSNumber *)zoom
    bearing:(nullable NSNumber *)bearing
    pitch:(nullable NSNumber *)pitch;
/// Coordinate at the center of the camera.
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * center;
/// Padding around the interior of the view that affects the frame of
/// reference for `center`.
@property(nonatomic, strong, nullable) FLTMbxEdgeInsets * padding;
/// Point of reference for `zoom` and `angle`, assuming an origin at the
/// top-left corner of the view.
@property(nonatomic, strong, nullable) FLTScreenCoordinate * anchor;
/// Zero-based zoom level. Constrained to the minimum and maximum zoom
/// levels.
@property(nonatomic, strong, nullable) NSNumber * zoom;
/// Bearing, measured in degrees from true north. Wrapped to [0, 360).
@property(nonatomic, strong, nullable) NSNumber * bearing;
/// Pitch toward the horizon measured in degrees.
@property(nonatomic, strong, nullable) NSNumber * pitch;
@end

/// Describes the viewpoint of a camera.
@interface FLTCameraState : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCenter:(NSDictionary<NSString *, id> *)center
    padding:(FLTMbxEdgeInsets *)padding
    zoom:(double )zoom
    bearing:(double )bearing
    pitch:(double )pitch;
/// Coordinate at the center of the camera.
@property(nonatomic, copy) NSDictionary<NSString *, id> * center;
/// Padding around the interior of the view that affects the frame of
/// reference for `center`.
@property(nonatomic, strong) FLTMbxEdgeInsets * padding;
/// Zero-based zoom level. Constrained to the minimum and maximum zoom
/// levels.
@property(nonatomic, assign) double  zoom;
/// Bearing, measured in degrees from true north. Wrapped to [0, 360).
@property(nonatomic, assign) double  bearing;
/// Pitch toward the horizon measured in degrees.
@property(nonatomic, assign) double  pitch;
@end

/// Holds options to be used for setting `camera bounds`.
@interface FLTCameraBoundsOptions : NSObject
+ (instancetype)makeWithBounds:(nullable FLTCoordinateBounds *)bounds
    maxZoom:(nullable NSNumber *)maxZoom
    minZoom:(nullable NSNumber *)minZoom
    maxPitch:(nullable NSNumber *)maxPitch
    minPitch:(nullable NSNumber *)minPitch;
/// The latitude and longitude bounds to which the camera center are constrained.
@property(nonatomic, strong, nullable) FLTCoordinateBounds * bounds;
/// The maximum zoom level, in Mapbox zoom levels 0-25.5. At low zoom levels, a small set of map tiles covers a large geographical area. At higher zoom levels, a larger number of tiles cover a smaller geographical area.
@property(nonatomic, strong, nullable) NSNumber * maxZoom;
/// The minimum zoom level, in Mapbox zoom levels 0-25.5.
@property(nonatomic, strong, nullable) NSNumber * minZoom;
/// The maximum allowed pitch value in degrees.
@property(nonatomic, strong, nullable) NSNumber * maxPitch;
/// The minimum allowed pitch value in degrees.
@property(nonatomic, strong, nullable) NSNumber * minPitch;
@end

/// Holds information about `camera bounds`.
@interface FLTCameraBounds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBounds:(FLTCoordinateBounds *)bounds
    maxZoom:(double )maxZoom
    minZoom:(double )minZoom
    maxPitch:(double )maxPitch
    minPitch:(double )minPitch;
/// The latitude and longitude bounds to which the camera center are constrained.
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
/// The maximum zoom level, in Mapbox zoom levels 0-25.5. At low zoom levels, a small set of map tiles covers a large geographical area. At higher zoom levels, a larger number of tiles cover a smaller geographical area.
@property(nonatomic, assign) double  maxZoom;
/// The minimum zoom level, in Mapbox zoom levels 0-25.5.
@property(nonatomic, assign) double  minZoom;
/// The maximum allowed pitch value in degrees.
@property(nonatomic, assign) double  maxPitch;
/// The minimum allowed pitch value in degrees.
@property(nonatomic, assign) double  minPitch;
@end

@interface FLTMapAnimationOptions : NSObject
+ (instancetype)makeWithDuration:(nullable NSNumber *)duration
    startDelay:(nullable NSNumber *)startDelay;
/// The duration of the animation in milliseconds.
/// If not set explicitly default duration will be taken 300ms
@property(nonatomic, strong, nullable) NSNumber * duration;
/// The amount of time, in milliseconds, to delay starting the animation after animation start.
/// If not set explicitly default startDelay will be taken 0ms. This only works for Android.
@property(nonatomic, strong, nullable) NSNumber * startDelay;
@end

/// A rectangular area as measured on a two-dimensional map projection.
@interface FLTCoordinateBounds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSouthwest:(NSDictionary<NSString *, id> *)southwest
    northeast:(NSDictionary<NSString *, id> *)northeast
    infiniteBounds:(BOOL )infiniteBounds;
/// Coordinate at the southwest corner.
/// Note: setting this field with invalid values (infinite, NaN) will crash the application.
@property(nonatomic, copy) NSDictionary<NSString *, id> * southwest;
/// Coordinate at the northeast corner.
/// Note: setting this field with invalid values (infinite, NaN) will crash the application.
@property(nonatomic, copy) NSDictionary<NSString *, id> * northeast;
/// If set to `true`, an infinite (unconstrained) bounds covering the world coordinates would be used.
/// Coordinates provided in `southwest` and `northeast` fields would be omitted and have no effect.
@property(nonatomic, assign) BOOL  infiniteBounds;
@end

/// Options for enabling debugging features in a map.
@interface FLTMapDebugOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithData:(FLTMapDebugOptionsData)data;
@property(nonatomic, assign) FLTMapDebugOptionsData data;
@end

/// Describes the glyphs rasterization option values.
@interface FLTGlyphsRasterizationOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithRasterizationMode:(FLTGlyphsRasterizationMode)rasterizationMode
    fontFamily:(nullable NSString *)fontFamily;
/// Glyphs rasterization mode for client-side text rendering.
@property(nonatomic, assign) FLTGlyphsRasterizationMode rasterizationMode;
/// Font family to use as font fallback for client-side text renderings.
///
/// Note: `GlyphsRasterizationMode` has precedence over font family. If `AllGlyphsRasterizedLocally`
/// or `IdeographsRasterizedLocally` is set, local glyphs will be generated based on the provided font family. If no
/// font family is provided, the map will fall back to use the system default font. The mechanisms of choosing the
/// default font are varied in platforms:
/// - For darwin(iOS/macOS) platform, the default font family is created from the <a href="https://developer.apple.com/documentation/uikit/uifont/1619027-systemfontofsize?language=objc">systemFont</a>.
///   If provided fonts are not supported on darwin platform, the map will fall back to use the first available font from the global fallback list.
/// - For Android platform: the default font <a href="https://developer.android.com/reference/android/graphics/Typeface#DEFAULT">Typeface.DEFAULT</a> will be used.
///
/// Besides, the font family will be discarded if it is provided along with `NoGlyphsRasterizedLocally` mode.
///
@property(nonatomic, copy, nullable) NSString * fontFamily;
@end

/// Map memory budget in megabytes.
@interface FLTTileCacheBudgetInMegabytes : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSize:(NSInteger )size;
@property(nonatomic, assign) NSInteger  size;
@end

/// Map memory budget in tiles.
@interface FLTTileCacheBudgetInTiles : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSize:(NSInteger )size;
@property(nonatomic, assign) NSInteger  size;
@end

/// Describes the map option values.
@interface FLTMapOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithContextMode:(nullable FLTContextModeBox *)contextMode
    constrainMode:(nullable FLTConstrainModeBox *)constrainMode
    viewportMode:(nullable FLTViewportModeBox *)viewportMode
    orientation:(nullable FLTNorthOrientationBox *)orientation
    crossSourceCollisions:(nullable NSNumber *)crossSourceCollisions
    size:(nullable FLTSize *)size
    pixelRatio:(double )pixelRatio
    glyphsRasterizationOptions:(nullable FLTGlyphsRasterizationOptions *)glyphsRasterizationOptions;
/// The map context mode. This can be used to optimizations
/// if we know that the drawing context is not shared with other code.
@property(nonatomic, strong, nullable) FLTContextModeBox * contextMode;
/// The map constrain mode. This can be used to limit the map
/// to wrap around the globe horizontally. By default, it is set to
/// `HeightOnly`.
@property(nonatomic, strong, nullable) FLTConstrainModeBox * constrainMode;
/// The viewport mode. This can be used to flip the vertical
/// orientation of the map as some devices may use inverted orientation.
@property(nonatomic, strong, nullable) FLTViewportModeBox * viewportMode;
/// The orientation of the Map. By default, it is set to
/// `Upwards`.
@property(nonatomic, strong, nullable) FLTNorthOrientationBox * orientation;
/// Specify whether to enable cross-source symbol collision detection
/// or not. By default, it is set to `true`.
@property(nonatomic, strong, nullable) NSNumber * crossSourceCollisions;
/// The size to resize the map object and renderer backend.
/// The size is given in `logical pixel` units. macOS and iOS platforms use
/// device-independent pixel units, while other platforms, such as Android,
/// use screen pixel units.
@property(nonatomic, strong, nullable) FLTSize * size;
/// The custom pixel ratio. By default, it is set to 1.0
@property(nonatomic, assign) double  pixelRatio;
/// Glyphs rasterization options to use for client-side text rendering.
@property(nonatomic, strong, nullable) FLTGlyphsRasterizationOptions * glyphsRasterizationOptions;
@end

/// Describes the coordinate on the screen, measured from top to bottom and from left to right.
/// Note: the `map` uses screen coordinate units measured in `logical pixels`.
@interface FLTScreenCoordinate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(double )x
    y:(double )y;
/// A value representing the x position of this coordinate.
@property(nonatomic, assign) double  x;
/// A value representing the y position of this coordinate.
@property(nonatomic, assign) double  y;
@end

/// Describes the coordinate box on the screen, measured in `logical pixels`
/// from top to bottom and from left to right.
@interface FLTScreenBox : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithMin:(FLTScreenCoordinate *)min
    max:(FLTScreenCoordinate *)max;
/// The screen coordinate close to the top left corner of the screen.
@property(nonatomic, strong) FLTScreenCoordinate * min;
/// The screen coordinate close to the bottom right corner of the screen.
@property(nonatomic, strong) FLTScreenCoordinate * max;
@end

/// A coordinate bounds and zoom.
@interface FLTCoordinateBoundsZoom : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBounds:(FLTCoordinateBounds *)bounds
    zoom:(double )zoom;
/// The latitude and longitude bounds.
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
/// Zoom.
@property(nonatomic, assign) double  zoom;
@end

/// Size type.
@interface FLTSize : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(double )width
    height:(double )height;
/// Width of the size.
@property(nonatomic, assign) double  width;
/// Height of the size.
@property(nonatomic, assign) double  height;
@end

/// Options for querying rendered features.
@interface FLTRenderedQueryOptions : NSObject
+ (instancetype)makeWithLayerIds:(nullable NSArray<NSString *> *)layerIds
    filter:(nullable NSString *)filter;
/// Layer IDs to include in the query.
@property(nonatomic, copy, nullable) NSArray<NSString *> * layerIds;
/// Filters the returned features with an expression
@property(nonatomic, copy, nullable) NSString * filter;
@end

/// Options for querying source features.
@interface FLTSourceQueryOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSourceLayerIds:(nullable NSArray<NSString *> *)sourceLayerIds
    filter:(NSString *)filter;
/// Source layer IDs to include in the query.
@property(nonatomic, copy, nullable) NSArray<NSString *> * sourceLayerIds;
/// Filters the returned features with an expression
@property(nonatomic, copy) NSString * filter;
@end

/// A value or a collection of a feature extension.
@interface FLTFeatureExtensionValue : NSObject
+ (instancetype)makeWithValue:(nullable NSString *)value
    featureCollection:(nullable NSArray<NSDictionary<NSString *, id> *> *)featureCollection;
/// An optional value of a feature extension
@property(nonatomic, copy, nullable) NSString * value;
/// An optional array of features from a feature extension.
@property(nonatomic, copy, nullable) NSArray<NSDictionary<NSString *, id> *> * featureCollection;
@end

/// Specifies position of a layer that is added via addStyleLayer method.
@interface FLTLayerPosition : NSObject
+ (instancetype)makeWithAbove:(nullable NSString *)above
    below:(nullable NSString *)below
    at:(nullable NSNumber *)at;
/// Layer should be positioned above specified layer id.
@property(nonatomic, copy, nullable) NSString * above;
/// Layer should be positioned below specified layer id.
@property(nonatomic, copy, nullable) NSString * below;
/// Layer should be positioned at specified index in a layers stack.
@property(nonatomic, strong, nullable) NSNumber * at;
@end

/// Represents query result that is returned in QueryRenderedFeaturesCallback.
/// @see `queryRenderedFeatures`
@interface FLTQueriedRenderedFeature : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithQueriedFeature:(FLTQueriedFeature *)queriedFeature
    layers:(NSArray<NSString *> *)layers;
/// Feature returned by the query.
@property(nonatomic, strong) FLTQueriedFeature * queriedFeature;
/// An array of layer Ids for the queried feature.
/// If the feature has been rendered in multiple layers, multiple Ids will be provided.
/// If the feature is only rendered in one layer, a single Id will be provided.
@property(nonatomic, copy) NSArray<NSString *> * layers;
@end

/// Represents query result that is returned in QuerySourceFeaturesCallback.
/// @see `querySourceFeatures`
@interface FLTQueriedSourceFeature : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithQueriedFeature:(FLTQueriedFeature *)queriedFeature;
/// Feature returned by the query.
@property(nonatomic, strong) FLTQueriedFeature * queriedFeature;
@end

/// Represents query result that is returned in QueryFeaturesCallback.
/// @see `queryRenderedFeatures` or `querySourceFeatures`
@interface FLTQueriedFeature : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithFeature:(NSDictionary<NSString *, id> *)feature
    source:(NSString *)source
    sourceLayer:(nullable NSString *)sourceLayer
    state:(NSString *)state;
/// Feature returned by the query.
@property(nonatomic, copy) NSDictionary<NSString *, id> * feature;
/// Source id for a queried feature.
@property(nonatomic, copy) NSString * source;
/// Source layer id for a queried feature. May be null if source does not support layers, e.g., 'geojson' source,
/// or when data provided by the source is not layered.
@property(nonatomic, copy, nullable) NSString * sourceLayer;
/// Feature state for a queried feature. Type of the value is an Object.
/// @see `setFeatureState` and `getFeatureState`
@property(nonatomic, copy) NSString * state;
@end

/// Geometry for querying rendered features.
@interface FLTRenderedQueryGeometry : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(NSString *)value
    type:(FLTType)type;
/// ScreenCoordinate/List<ScreenCoordinate>/ScreenBox in Json mode.
@property(nonatomic, copy) NSString * value;
@property(nonatomic, assign) FLTType type;
@end

/// An offline region definition is a geographic region defined by a style URL,
/// a geometry, zoom range, and device pixel ratio. Both `minZoom` and `maxZoom` must be ≥ 0,
/// and `maxZoom` must be ≥ `minZoom`. The `maxZoom` may be ∞, in which case for each tile source,
/// the region will include tiles from `minZoom` up to the maximum zoom level provided by that source.
/// The `pixelRatio` must be ≥ 0 and should typically be 1.0 or 2.0.
@interface FLTOfflineRegionGeometryDefinition : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStyleURL:(NSString *)styleURL
    geometry:(NSDictionary<NSString *, id> *)geometry
    minZoom:(double )minZoom
    maxZoom:(double )maxZoom
    pixelRatio:(double )pixelRatio
    glyphsRasterizationMode:(FLTGlyphsRasterizationMode)glyphsRasterizationMode;
/// The style associated with the offline region
@property(nonatomic, copy) NSString * styleURL;
/// The geometry that defines the boundary of the offline region
@property(nonatomic, copy) NSDictionary<NSString *, id> * geometry;
/// Minimum zoom level for the offline region
@property(nonatomic, assign) double  minZoom;
/// Maximum zoom level for the offline region
@property(nonatomic, assign) double  maxZoom;
/// Pixel ratio to be accounted for when downloading assets
@property(nonatomic, assign) double  pixelRatio;
/// Specifies glyphs rasterization mode. It defines which glyphs will be loaded from the server
@property(nonatomic, assign) FLTGlyphsRasterizationMode glyphsRasterizationMode;
@end

/// An offline region definition is a geographic region defined by a style URL,
/// geographic bounding box, zoom range, and device pixel ratio. Both `minZoom` and `maxZoom` must be ≥ 0,
/// and `maxZoom` must be ≥ `minZoom`. The `maxZoom` may be ∞, in which case for each tile source,
/// the region will include tiles from `minZoom` up to the maximum zoom level provided by that source.
/// The `pixelRatio` must be ≥ 0 and should typically be 1.0 or 2.0.
@interface FLTOfflineRegionTilePyramidDefinition : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStyleURL:(NSString *)styleURL
    bounds:(FLTCoordinateBounds *)bounds
    minZoom:(double )minZoom
    maxZoom:(double )maxZoom
    pixelRatio:(double )pixelRatio
    glyphsRasterizationMode:(FLTGlyphsRasterizationMode)glyphsRasterizationMode;
/// The style associated with the offline region.
@property(nonatomic, copy) NSString * styleURL;
/// The bounds covering the region.
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
/// Minimum zoom level for the offline region.
@property(nonatomic, assign) double  minZoom;
/// Maximum zoom level for the offline region.
@property(nonatomic, assign) double  maxZoom;
/// Pixel ratio to be accounted for when downloading assets.
@property(nonatomic, assign) double  pixelRatio;
/// Specifies glyphs download mode.
@property(nonatomic, assign) FLTGlyphsRasterizationMode glyphsRasterizationMode;
@end

/// ProjectedMeters is a coordinate in a specific
/// [Spherical Mercator](http://docs.openlayers.org/library/spherical_mercator.html) projection.
///
/// This specific Spherical Mercator projection assumes the Earth is a sphere with a radius
/// of 6,378,137 meters. Coordinates are determined as distances, in meters, on the surface
/// of that sphere.
@interface FLTProjectedMeters : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithNorthing:(double )northing
    easting:(double )easting;
/// Projected meters in north direction.
@property(nonatomic, assign) double  northing;
/// Projected meters in east direction.
@property(nonatomic, assign) double  easting;
@end

/// Describes a point on the map in Mercator projection.
@interface FLTMercatorCoordinate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(double )x
    y:(double )y;
/// A value representing the x position of this coordinate.
@property(nonatomic, assign) double  x;
/// A value representing the y position of this coordinate.
@property(nonatomic, assign) double  y;
@end

/// The information about style object (source or layer).
@interface FLTStyleObjectInfo : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    type:(NSString *)type;
/// The object's identifier.
@property(nonatomic, copy) NSString * id;
/// The object's type.
@property(nonatomic, copy) NSString * type;
@end

@interface FLTStyleProjection : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(FLTStyleProjectionName)name;
@property(nonatomic, assign) FLTStyleProjectionName name;
@end

/// A global directional light source which is only applied on 3D layers and hillshade layers. Using this type disables other light sources.
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
@interface FLTFlatLight : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    anchor:(nullable FLTAnchorBox *)anchor
    color:(nullable NSNumber *)color
    colorTransition:(nullable FLTTransitionOptions *)colorTransition
    intensity:(nullable NSNumber *)intensity
    intensityTransition:(nullable FLTTransitionOptions *)intensityTransition
    position:(nullable NSArray<NSNumber *> *)position
    positionTransition:(nullable FLTTransitionOptions *)positionTransition;
/// Unique light name
@property(nonatomic, copy) NSString * id;
/// Whether extruded geometries are lit relative to the map or viewport.
@property(nonatomic, strong, nullable) FLTAnchorBox * anchor;
/// Color tint for lighting extruded geometries.
@property(nonatomic, strong, nullable) NSNumber * color;
/// Transition property for `color`
@property(nonatomic, strong, nullable) FLTTransitionOptions * colorTransition;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
@property(nonatomic, strong, nullable) NSNumber * intensity;
/// Transition property for `intensity`
@property(nonatomic, strong, nullable) FLTTransitionOptions * intensityTransition;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0 degree when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
@property(nonatomic, copy, nullable) NSArray<NSNumber *> * position;
/// Transition property for `position`
@property(nonatomic, strong, nullable) FLTTransitionOptions * positionTransition;
@end

/// A light that has a direction and is located at infinite, so its rays are parallel. Simulates the sun light and it can cast shadows
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
@interface FLTDirectionalLight : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    castShadows:(nullable NSNumber *)castShadows
    color:(nullable NSNumber *)color
    colorTransition:(nullable FLTTransitionOptions *)colorTransition
    direction:(nullable NSArray<NSNumber *> *)direction
    directionTransition:(nullable FLTTransitionOptions *)directionTransition
    intensity:(nullable NSNumber *)intensity
    intensityTransition:(nullable FLTTransitionOptions *)intensityTransition
    shadowIntensity:(nullable NSNumber *)shadowIntensity
    shadowIntensityTransition:(nullable FLTTransitionOptions *)shadowIntensityTransition;
/// Unique light name
@property(nonatomic, copy) NSString * id;
/// Enable/Disable shadow casting for this light
@property(nonatomic, strong, nullable) NSNumber * castShadows;
/// Color of the directional light.
@property(nonatomic, strong, nullable) NSNumber * color;
/// Transition property for `color`
@property(nonatomic, strong, nullable) FLTTransitionOptions * colorTransition;
/// Direction of the light source specified as [a azimuthal angle, p polar angle] where a indicates the azimuthal angle of the light relative to north (in degrees and proceeding clockwise), and p indicates polar angle of the light (from 0 degree, directly above, to 180 degree, directly below).
@property(nonatomic, copy, nullable) NSArray<NSNumber *> * direction;
/// Transition property for `direction`
@property(nonatomic, strong, nullable) FLTTransitionOptions * directionTransition;
/// A multiplier for the color of the directional light.
@property(nonatomic, strong, nullable) NSNumber * intensity;
/// Transition property for `intensity`
@property(nonatomic, strong, nullable) FLTTransitionOptions * intensityTransition;
/// Determines the shadow strength, affecting the shadow receiver surfaces final color. Values near 0.0 reduce the shadow contribution to the final color. Values near to 1.0 make occluded surfaces receive almost no directional light. Designed to be used mostly for transitioning between values 0 and 1.
@property(nonatomic, strong, nullable) NSNumber * shadowIntensity;
/// Transition property for `shadowIntensity`
@property(nonatomic, strong, nullable) FLTTransitionOptions * shadowIntensityTransition;
@end

/// An indirect light affecting all objects in the map adding a constant amount of light on them. It has no explicit direction and cannot cast shadows.
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
@interface FLTAmbientLight : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    color:(nullable NSNumber *)color
    colorTransition:(nullable FLTTransitionOptions *)colorTransition
    intensity:(nullable NSNumber *)intensity
    intensityTransition:(nullable FLTTransitionOptions *)intensityTransition;
/// Unique light name
@property(nonatomic, copy) NSString * id;
/// Color of the ambient light.
@property(nonatomic, strong, nullable) NSNumber * color;
/// Transition property for `color`
@property(nonatomic, strong, nullable) FLTTransitionOptions * colorTransition;
/// A multiplier for the color of the ambient light.
@property(nonatomic, strong, nullable) NSNumber * intensity;
/// Transition property for `intensity`
@property(nonatomic, strong, nullable) FLTTransitionOptions * intensityTransition;
@end

/// Image type.
@interface FLTMbxImage : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(NSInteger )width
    height:(NSInteger )height
    data:(FlutterStandardTypedData *)data;
/// The width of the image, in screen pixels.
@property(nonatomic, assign) NSInteger  width;
/// The height of the image, in screen pixels.
@property(nonatomic, assign) NSInteger  height;
/// 32-bit premultiplied RGBA image data.
///
/// An uncompressed image data encoded in 32-bit RGBA format with premultiplied
/// alpha channel. This field should contain exactly `4 * width * height` bytes. It
/// should consist of a sequence of scanlines.
@property(nonatomic, strong) FlutterStandardTypedData * data;
@end

/// Describes the image stretch areas.
@interface FLTImageStretches : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithFirst:(double )first
    second:(double )second;
/// The first stretchable part in screen pixel units.
@property(nonatomic, assign) double  first;
/// The second stretchable part in screen pixel units.
@property(nonatomic, assign) double  second;
@end

/// Describes the image content, e.g. where text can be fit into an image.
///
/// When sizing icons with `icon-text-fit`, the icon size will be adjusted so that the this content box fits exactly around the text.
@interface FLTImageContent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithLeft:(double )left
    top:(double )top
    right:(double )right
    bottom:(double )bottom;
/// Distance to the left, in screen pixels.
@property(nonatomic, assign) double  left;
/// Distance to the top, in screen pixels.
@property(nonatomic, assign) double  top;
/// Distance to the right, in screen pixels.
@property(nonatomic, assign) double  right;
/// Distance to the bottom, in screen pixels.
@property(nonatomic, assign) double  bottom;
@end

/// The `transition options` controls timing for the interpolation between a transitionable style
/// property's previous value and new value. These can be used to define the style default property
/// transition behavior. Also, any transitionable style property may also have its own `-transition`
/// property that defines specific transition timing for that specific layer property, overriding
/// the global transition values.
@interface FLTTransitionOptions : NSObject
+ (instancetype)makeWithDuration:(nullable NSNumber *)duration
    delay:(nullable NSNumber *)delay
    enablePlacementTransitions:(nullable NSNumber *)enablePlacementTransitions;
/// Time allotted for transitions to complete. Units in milliseconds. Defaults to `300.0`.
@property(nonatomic, strong, nullable) NSNumber * duration;
/// Length of time before a transition begins. Units in milliseconds. Defaults to `0.0`.
@property(nonatomic, strong, nullable) NSNumber * delay;
/// Whether the fade in/out symbol placement transition is enabled. Defaults to `true`.
@property(nonatomic, strong, nullable) NSNumber * enablePlacementTransitions;
@end

/// Represents a tile coordinate.
@interface FLTCanonicalTileID : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithZ:(NSInteger )z
    x:(NSInteger )x
    y:(NSInteger )y;
/// The z value of the coordinate (zoom-level).
@property(nonatomic, assign) NSInteger  z;
/// The x value of the coordinate.
@property(nonatomic, assign) NSInteger  x;
/// The y value of the coordinate.
@property(nonatomic, assign) NSInteger  y;
@end

/// Holds a style property value with meta data.
@interface FLTStylePropertyValue : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(nullable id )value
    kind:(FLTStylePropertyValueKind)kind;
/// The property value.
@property(nonatomic, strong, nullable) id  value;
/// The kind of the property value.
@property(nonatomic, assign) FLTStylePropertyValueKind kind;
@end

/// The codec used by FLT_AnimationManager.
NSObject<FlutterMessageCodec> *FLT_AnimationManagerGetCodec(void);

/// Interface for managing animation.
@protocol FLT_AnimationManager
- (void)easeToCameraOptions:(FLTCameraOptions *)cameraOptions mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)flyToCameraOptions:(FLTCameraOptions *)cameraOptions mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)pitchByPitch:(double)pitch mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)scaleByAmount:(double)amount screenCoordinate:(nullable FLTScreenCoordinate *)screenCoordinate mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)moveByScreenCoordinate:(FLTScreenCoordinate *)screenCoordinate mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)rotateByFirst:(FLTScreenCoordinate *)first second:(FLTScreenCoordinate *)second mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)cancelCameraAnimationWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLT_AnimationManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_AnimationManager> *_Nullable api);

/// The codec used by FLT_CameraManager.
NSObject<FlutterMessageCodec> *FLT_CameraManagerGetCodec(void);

/// Interface for managing camera.
@protocol FLT_CameraManager
/// Convenience method that returns a `camera options` object for the given parameters.
///
/// @param coordinates The `coordinates` representing the bounds of the camera.
/// @param camera The `camera options` which will be applied before calculating the camera for the coordinates.
/// If any of the fields in camera options is not provided then the current value from the map for that field will be used.
/// @param coordinatesPadding The amount of padding in screen points to add to the given `coordinates`.
/// This padding is not applied to the map but to the coordinates provided. If you want to apply padding to the map use `camera` parameter.
/// @param maxZoom The maximum zoom level allowed in the returned camera options.
/// @param offset The center of the given bounds relative to map center in screen points.
/// @return The `camera options` object representing the provided parameters.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinatesPaddingCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates camera:(FLTCameraOptions *)camera coordinatesPadding:(nullable FLTMbxEdgeInsets *)coordinatesPadding maxZoom:(nullable NSNumber *)maxZoom offset:(nullable FLTScreenCoordinate *)offset error:(FlutterError *_Nullable *_Nonnull)error;
/// Convenience method that returns the `camera options` object for given parameters.
///
/// @param bounds The `coordinate bounds` of the camera.
/// @param padding The `edge insets` of the camera.
/// @param bearing The bearing of the camera.
/// @param pitch The pitch of the camera.
/// @param maxZoom The maximum zoom level allowed in the returned camera options.
/// @param offset The center of the given bounds relative to map center in screen points.
/// @return The `camera options` object representing the provided parameters.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinateBoundsBounds:(FLTCoordinateBounds *)bounds padding:(nullable FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch maxZoom:(nullable NSNumber *)maxZoom offset:(nullable FLTScreenCoordinate *)offset error:(FlutterError *_Nullable *_Nonnull)error;
/// Convenience method that returns the `camera options` object for given parameters.
///
/// @param coordinates The `coordinates` representing the bounds of the camera.
/// @param padding The `edge insets` of the camera.
/// @param bearing The bearing of the camera.
/// @param pitch The pitch of the camera.
///
/// @return The `camera options` object representing the provided parameters.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinatesCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates padding:(nullable FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch error:(FlutterError *_Nullable *_Nonnull)error;
/// Convenience method that adjusts the provided `camera options` object for given parameters.
///
/// Returns the provided `camera` options with zoom adjusted to fit `coordinates` into the `box`, so that `coordinates` on the left,
/// top and right of the effective `camera` center at the principal point of the projection (defined by `padding`) fit into the `box`.
/// Returns the provided `camera` options object unchanged upon an error.
/// Note that this method may fail if the principal point of the projection is not inside the `box` or
/// if there is no sufficient screen space, defined by principal point and the `box`, to fit the geometry.
///
/// @param coordinates The `coordinates` representing the bounds of the camera.
/// @param camera The `camera options` for which zoom should be adjusted. Note that the `camera.center` is required.
/// @param box The `screen box` into which `coordinates` should fit.
///
/// @return The `camera options` object with the zoom level adjusted to fit `coordinates` into the `box`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinatesCameraOptionsCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates camera:(FLTCameraOptions *)camera box:(FLTScreenBox *)box error:(FlutterError *_Nullable *_Nonnull)error;
/// Convenience method that returns the `camera options` object for given parameters.
///
/// @param geometry The `geometry` representing the bounds of the camera.
/// @param padding The `edge insets` of the camera.
/// @param bearing The bearing of the camera.
/// @param pitch The pitch of the camera.
///
/// @return The `camera options` object representing the provided parameters.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForGeometryGeometry:(NSDictionary<NSString *, id> *)geometry padding:(FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `coordinate bounds` for a given camera.
///
/// Note that if the given `camera` shows the antimeridian, the returned wrapped `coordinate bounds`
/// might not represent the minimum bounding box.
///
/// @param camera The `camera options` to use for calculating `coordinate bounds`.
///
/// @return The `coordinate bounds` object representing a given `camera`.
///
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBounds *)coordinateBoundsForCameraCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `coordinate bounds` for a given camera.
///
/// This method is useful if the `camera` shows the antimeridian.
///
/// @param camera The `camera options` to use for calculating `coordinate bounds`.
///
/// @return The `coordinate bounds` object representing a given `camera`.
///
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBounds *)coordinateBoundsForCameraUnwrappedCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `coordinate bounds` and the `zoom` for a given `camera`.
///
/// Note that if the given `camera` shows the antimeridian, the returned wrapped `coordinate bounds`
/// might not represent the minimum bounding box.
///
/// @param camera The `camera options` to use for calculating `coordinate bounds` and `zoom`.
///
/// @return The object representing `coordinate bounds` and `zoom` for a given `camera`.
///
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBoundsZoom *)coordinateBoundsZoomForCameraCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the unwrapped `coordinate bounds` and `zoom` for a given `camera`.
///
/// This method is useful if the `camera` shows the antimeridian.
///
/// @param camera The `camera options` to use for calculating `coordinate bounds` and `zoom`.
///
/// @return The object representing `coordinate bounds` and `zoom` for a given `camera`.
///
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBoundsZoom *)coordinateBoundsZoomForCameraUnwrappedCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculates a `screen coordinate` that corresponds to a geographical coordinate
/// (i.e., longitude-latitude pair).
///
/// The `screen coordinate` is in `logical pixels` relative to the top left corner
/// of the map (not of the whole screen).
///
/// @param coordinate A geographical `coordinate` on the map to convert to a `screen coordinate`.
///
/// @return A `screen coordinate` on the screen in `logical pixels`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTScreenCoordinate *)pixelForCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculates a geographical `coordinate` (i.e., longitude-latitude pair) that corresponds
/// to a `screen coordinate`.
///
/// The screen coordinate is in `logical pixels`relative to the top left corner
/// of the map (not of the whole screen).
///
/// @param pixel A `screen coordinate` on the screen in `logical pixels`.
///
/// @return A geographical `coordinate` corresponding to a given `screen coordinate`.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateForPixelPixel:(FLTScreenCoordinate *)pixel error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculates `screen coordinates` that correspond to geographical `coordinates`
/// (i.e., longitude-latitude pairs).
///
/// The `screen coordinates` are in `logical pixels` relative to the top left corner
/// of the map (not of the whole screen).
///
/// @param coordinates A geographical `coordinates` on the map to convert to `screen coordinates`.
///
/// @return A `screen coordinates` in `logical pixels` for a given geographical `coordinates`.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTScreenCoordinate *> *)pixelsForCoordinatesCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculates geographical `coordinates` (i.e., longitude-latitude pairs) that correspond
/// to `screen coordinates`.
///
/// The screen coordinates are in `logical pixels` relative to the top left corner
/// of the map (not of the whole screen).
///
/// @param pixels A `screen coordinates` in `logical pixels`.
///
/// @return A `geographical coordinates` that correspond to a given `screen coordinates`.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSDictionary<NSString *, id> *> *)coordinatesForPixelsPixels:(NSArray<FLTScreenCoordinate *> *)pixels error:(FlutterError *_Nullable *_Nonnull)error;
/// Changes the map view by any combination of center, zoom, bearing, and pitch, without an animated transition.
/// The map will retain its current values for any details not passed via the camera options argument.
/// It is not guaranteed that the provided `camera options` will be set, the map may apply constraints resulting in a
/// different `camera state`.
///
/// @param cameraOptions The new `camera options` to be set.
- (void)setCameraCameraOptions:(FLTCameraOptions *)cameraOptions error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the current `camera state`.
///
/// @return The current `camera state`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraState *)getCameraStateWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the `camera bounds options` of the map. The map will retain its current values for any
/// details not passed via the camera bounds options arguments.
/// When camera bounds options are set, the camera center is constrained by these bounds, as well as the minimum
/// zoom level of the camera, to prevent out of bounds areas to be visible.
/// Note that tilting or rotating the map, or setting stricter minimum and maximum zoom within `options` may still cause some out of bounds areas to become visible.
///
/// @param options The `camera bounds options` to set.
/// @return A string describing an error if the operation was not successful, expected with `void` value otherwise.
- (void)setBoundsOptions:(FLTCameraBoundsOptions *)options error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `camera bounds` of the map.
/// @return A `camera bounds` of the map.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraBounds *)getBoundsWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLT_CameraManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_CameraManager> *_Nullable api);

/// The codec used by FLT_MapInterface.
NSObject<FlutterMessageCodec> *FLT_MapInterfaceGetCodec(void);

/// Map class provides map rendering functionality.
///
@protocol FLT_MapInterface
- (void)loadStyleURIStyleURI:(NSString *)styleURI completion:(void (^)(FlutterError *_Nullable))completion;
- (void)loadStyleJsonStyleJson:(NSString *)styleJson completion:(void (^)(FlutterError *_Nullable))completion;
- (void)clearDataWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)setTileCacheBudgetTileCacheBudgetInMegabytes:(nullable FLTTileCacheBudgetInMegabytes *)tileCacheBudgetInMegabytes tileCacheBudgetInTiles:(nullable FLTTileCacheBudgetInTiles *)tileCacheBudgetInTiles error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets the size of the map.
///
/// @return The `size` of the map in `logical pixels`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTSize *)getSizeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Triggers a repaint of the map.
- (void)triggerRepaintWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Tells the map rendering engine that there is currently a gesture in progress. This
/// affects how the map renders labels, as it will use different texture filters if a gesture
/// is ongoing.
///
/// @param inProgress The `boolean` value representing if a gesture is in progress.
- (void)setGestureInProgressInProgress:(BOOL)inProgress error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns `true` if a gesture is currently in progress.
///
/// @return `true` if a gesture is currently in progress, `false` otherwise.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isGestureInProgressWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Tells the map rendering engine that the animation is currently performed by the
/// user (e.g. with a `setCamera` calls series). It adjusts the engine for the animation use case.
/// In particular, it brings more stability to symbol placement and rendering.
///
/// @param inProgress The `boolean` value representing if user animation is in progress
- (void)setUserAnimationInProgressInProgress:(BOOL)inProgress error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns `true` if user animation is currently in progress.
///
/// @return `true` if a user animation is currently in progress, `false` otherwise.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isUserAnimationInProgressWithError:(FlutterError *_Nullable *_Nonnull)error;
/// When loading a map, if prefetch zoom `delta` is set to any number greater than 0,
/// the map will first request a tile at zoom level lower than `zoom - delta`, with requested
/// zoom level a multiple of `delta`, in an attempt to display a full map at lower resolution as quick as possible.
///
/// @param delta The new prefetch zoom delta.
- (void)setPrefetchZoomDeltaDelta:(NSInteger)delta error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the map's prefetch zoom delta.
///
/// @return The map's prefetch zoom `delta`.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getPrefetchZoomDeltaWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the north `orientation mode`.
- (void)setNorthOrientationOrientation:(FLTNorthOrientation)orientation error:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the map `constrain mode`.
- (void)setConstrainModeMode:(FLTConstrainMode)mode error:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the `viewport mode`.
- (void)setViewportModeMode:(FLTViewportMode)mode error:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `map options`.
///
/// @return The map's `map options`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTMapOptions *)getMapOptionsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the `map debug options`.
///
/// @return An array of `map debug options` flags currently set to the map.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTMapDebugOptions *> *)getDebugWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the `map debug options` and enables debug mode based on the passed value.
///
/// @param debugOptions An array of `map debug options` to be set.
/// @param value A `boolean` value representing the state for a given `map debug options`.
///
- (void)setDebugDebugOptions:(NSArray<FLTMapDebugOptions *> *)debugOptions value:(BOOL)value error:(FlutterError *_Nullable *_Nonnull)error;
/// Queries the map for rendered features.
///
/// @param geometry The `screen pixel coordinates` (point, line string or box) to query for rendered features.
/// @param options The `render query options` for querying rendered features.
/// @param completion The `query features completion` called when the query completes.
/// @return A `cancelable` object that could be used to cancel the pending query.
- (void)queryRenderedFeaturesGeometry:(FLTRenderedQueryGeometry *)geometry options:(FLTRenderedQueryOptions *)options completion:(void (^)(NSArray<FLTQueriedRenderedFeature *> *_Nullable, FlutterError *_Nullable))completion;
/// Queries the map for source features.
///
/// @param sourceId The style source identifier used to query for source features.
/// @param options The `source query options` for querying source features.
/// @param completion The `query features completion` called when the query completes.
- (void)querySourceFeaturesSourceId:(NSString *)sourceId options:(FLTSourceQueryOptions *)options completion:(void (^)(NSArray<FLTQueriedSourceFeature *> *_Nullable, FlutterError *_Nullable))completion;
/// Returns all the leaves (original points) of a cluster (given its cluster_id) from a GeoJsonSource, with pagination support: limit is the number of leaves
/// to return (set to Infinity for all points), and offset is the amount of points to skip (for pagination).
///
/// Requires configuring the source as a cluster by calling [GeoJsonSource.Builder#cluster(boolean)].
///
/// @param sourceIdentifier GeoJsonSource identifier.
/// @param cluster Cluster from which to retrieve leaves from
/// @param limit The number of points to return from the query (must use type [Long], set to maximum for all points). Defaults to 10.
/// @param offset The amount of points to skip (for pagination, must use type [Long]). Defaults to 0.
/// @param completion The result will be returned through the completion block.
///         The result is a feature collection or a string describing an error if the operation was not successful.
- (void)getGeoJsonClusterLeavesSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster limit:(nullable NSNumber *)limit offset:(nullable NSNumber *)offset completion:(void (^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
/// Returns the children (original points or clusters) of a cluster (on the next zoom level)
/// given its id (cluster_id value from feature properties) from a GeoJsonSource.
///
/// Requires configuring the source as a cluster by calling [GeoJsonSource.Builder#cluster(boolean)].
///
/// @param sourceIdentifier GeoJsonSource identifier.
/// @param cluster cluster from which to retrieve children from
/// @param completion The result will be returned through the completion block.
///         The result is a feature collection or a string describing an error if the operation was not successful.
- (void)getGeoJsonClusterChildrenSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster completion:(void (^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
/// Returns the zoom on which the cluster expands into several children (useful for "click to zoom" feature)
/// given the cluster's cluster_id (cluster_id value from feature properties) from a GeoJsonSource.
///
/// Requires configuring the source as a cluster by calling [GeoJsonSource.Builder#cluster(boolean)].
///
/// @param sourceIdentifier GeoJsonSource identifier.
/// @param cluster cluster from which to retrieve the expansion zoom from
/// @param completion The result will be returned through the completion block.
///         The result is a feature extension value containing a value or a string describing an error if the operation was not successful.
- (void)getGeoJsonClusterExpansionZoomSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster completion:(void (^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
/// Updates the state object of a feature within a style source.
///
/// Update entries in the `state` object of a given feature within a style source. Only properties of the
/// `state` object will be updated. A property in the feature `state` object that is not listed in `state` will
/// retain its previous value.
///
/// Note that updates to feature `state` are asynchronous, so changes made by this method migth not be
/// immediately visible using `getStateFeature`.
///
/// @param sourceId The style source identifier.
/// @param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources).
/// @param featureId The feature identifier of the feature whose state should be updated.
/// @param state The `state` object with properties to update with their respective new values.
- (void)setFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId state:(NSString *)state completion:(void (^)(FlutterError *_Nullable))completion;
/// Gets the state map of a feature within a style source.
///
/// Note that updates to feature state are asynchronous, so changes made by other methods might not be
/// immediately visible.
///
/// @param sourceId The style source identifier.
/// @param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources).
/// @param featureId The feature identifier of the feature whose state should be queried.
/// @param completion The `query feature state completion` called when the query completes.
- (void)getFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Removes entries from a feature state object.
///
/// Remove a specified property or all property from a feature's state object, depending on the value of
/// `stateKey`.
///
/// Note that updates to feature state are asynchronous, so changes made by this method migth not be
/// immediately visible using `getStateFeature`.
///
/// @param sourceId The style source identifier.
/// @param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources).
/// @param featureId The feature identifier of the feature whose state should be removed.
/// @param stateKey The key of the property to remove. If `null`, all feature's state object properties are removed.
- (void)removeFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId stateKey:(nullable NSString *)stateKey completion:(void (^)(FlutterError *_Nullable))completion;
/// Reduces memory use. Useful to call when the application gets paused or sent to background.
- (void)reduceMemoryUseWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Gets elevation for the given coordinate.
/// Note: Elevation is only available for the visible region on the screen.
///
/// @param coordinate The `coordinate` defined as longitude-latitude pair.
/// @return The elevation (in meters) multiplied by current terrain exaggeration, or empty if elevation for the coordinate is not available.
- (nullable NSNumber *)getElevationCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLT_MapInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_MapInterface> *_Nullable api);

/// The codec used by FLTOfflineRegion.
NSObject<FlutterMessageCodec> *FLTOfflineRegionGetCodec(void);

/// An offline region represents an identifiable geographic region with optional metadata.
@protocol FLTOfflineRegion
/// The regions identifier
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getIdentifierWithError:(FlutterError *_Nullable *_Nonnull)error;
/// The tile pyramid defining the region. Tile pyramid and geometry definitions are
/// mutually exclusive.
///
/// @return A definition describing the tile pyramid including attributes, otherwise empty.
- (nullable FLTOfflineRegionTilePyramidDefinition *)getTilePyramidDefinitionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// The geometry defining the region. Geometry and tile pyramid definitions are
/// mutually exclusive.
///
/// @return A definition describing the geometry including attributes, otherwise empty.
- (nullable FLTOfflineRegionGeometryDefinition *)getGeometryDefinitionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Arbitrary binary region metadata.
///
/// @return The metadata associated with the region.
///
/// @return `nil` only when `error != nil`.
- (nullable FlutterStandardTypedData *)getMetadataWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets arbitrary binary region metadata for the region.
///
/// Note that this setter is asynchronous and the given metadata is applied only
/// after the resulting callback is invoked with no error.
///
/// @param metadata The metadata associated with the region.
/// @param callback Called once the request is complete or an error occurred.
- (void)setMetadataMetadata:(FlutterStandardTypedData *)metadata completion:(void (^)(FlutterError *_Nullable))completion;
/// Sets the download state of an offline region
/// A region is either inactive (not downloading, but previously-downloaded
/// resources are available for use), or active (resources are being downloaded
/// or will be downloaded, if necessary, when network access is available).
///
/// If the region is already in the given state, this call is ignored.
///
/// @param state The new state to set.
- (void)setOfflineRegionDownloadStateState:(FLTOfflineRegionDownloadState)state error:(FlutterError *_Nullable *_Nonnull)error;
/// Invalidate all the tiles for the region forcing to revalidate
/// the tiles with the server before using. This is more efficient than deleting the
/// offline region and downloading it again because if the data on the cache matches
/// the server, no new data gets transmitted.
///
/// @param callback Called once the request is complete or an error occurred.
- (void)invalidateWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// Remove an offline region from the database and perform any resources
/// evictions necessary as a result.
///
/// @param callback Called once the request is complete or an error occurred.
- (void)purgeWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void SetUpFLTOfflineRegion(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineRegion> *_Nullable api);

/// The codec used by FLTOfflineRegionManager.
NSObject<FlutterMessageCodec> *FLTOfflineRegionManagerGetCodec(void);

/// The `offline region manager` that manages offline packs. All of the class’s instance methods are asynchronous
/// reflecting the fact that offline resources are stored in a database. The offline manager maintains a canonical
/// collection of offline packs.
@protocol FLTOfflineRegionManager
/// Sets the maximum number of Mapbox-hosted tiles that may be downloaded and stored on the current device.
///
/// By default, the limit is set to 6,000.
/// Once this limit is reached, `OfflineRegionObserver.mapboxTileCountLimitExceeded()`
/// fires every additional attempt to download additional tiles until already downloaded tiles are removed
/// by calling `OfflineRegion.purge()` API.
///
/// @param limit the maximum number of tiles allowed to be downloaded
- (void)setOfflineMapboxTileCountLimitLimit:(NSInteger)limit error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTOfflineRegionManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineRegionManager> *_Nullable api);

/// The codec used by FLTProjection.
NSObject<FlutterMessageCodec> *FLTProjectionGetCodec(void);

/// Collection of [Spherical Mercator](http://docs.openlayers.org/library/spherical_mercator.html) projection methods.
@protocol FLTProjection
/// Calculate distance spanned by one pixel at the specified latitude
/// and zoom level.
///
/// @param latitude The latitude for which to return the value.
/// @param zoom The zoom level.
///
/// @return Returns the distance measured in meters.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMetersPerPixelAtLatitudeLatitude:(double)latitude zoom:(double)zoom error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculate Spherical Mercator ProjectedMeters coordinates.
///
/// @param coordinate A longitude-latitude pair for which to calculate
/// `projected meters` coordinates.
///
/// @return Returns Spherical Mercator ProjectedMeters coordinates.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTProjectedMeters *)projectedMetersForCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculate a longitude-latitude pair for a Spherical Mercator projected
/// meters.
///
/// @param projectedMeters Spherical Mercator ProjectedMeters coordinates for
/// which to calculate a longitude-latitude pair.
///
/// @return Returns a longitude-latitude pair.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateForProjectedMetersProjectedMeters:(FLTProjectedMeters *)projectedMeters error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculate a point on the map in Mercator Projection for a given
/// coordinate at the specified zoom scale.
///
/// @param coordinate The longitude-latitude pair for which to return the value.
/// @param zoomScale The current zoom factor (2 ^ Zoom level) applied on the map, is used to
/// calculate the world size as tileSize * zoomScale (i.e., 512 * 2 ^ Zoom level)
/// where tileSize is the width of a tile in pixels.
///
/// @return Returns a point on the map in Mercator projection.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTMercatorCoordinate *)projectCoordinate:(NSDictionary<NSString *, id> *)coordinate zoomScale:(double)zoomScale error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculate a coordinate for a given point on the map in Mercator Projection.
///
/// @param coordinate Point on the map in Mercator projection.
/// @param zoomScale The current zoom factor applied on the map, is used to
/// calculate the world size as tileSize * zoomScale (i.e., 512 * 2 ^ Zoom level)
/// where tileSize is the width of a tile in pixels.
///
/// @return Returns a coordinate.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)unprojectCoordinate:(FLTMercatorCoordinate *)coordinate zoomScale:(double)zoomScale error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTProjection(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTProjection> *_Nullable api);

/// The codec used by FLT_MapboxOptions.
NSObject<FlutterMessageCodec> *FLT_MapboxOptionsGetCodec(void);

@protocol FLT_MapboxOptions
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getAccessTokenWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAccessTokenToken:(NSString *)token error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLT_MapboxOptions(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_MapboxOptions> *_Nullable api);

/// The codec used by FLT_MapboxMapsOptions.
NSObject<FlutterMessageCodec> *FLT_MapboxMapsOptionsGetCodec(void);

@protocol FLT_MapboxMapsOptions
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getBaseUrlWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setBaseUrlUrl:(NSString *)url error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getDataPathWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setDataPathPath:(NSString *)path error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getAssetPathWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAssetPathPath:(NSString *)path error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (FLTTileStoreUsageModeBox *_Nullable)getTileStoreUsageModeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setTileStoreUsageModeMode:(FLTTileStoreUsageMode)mode error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLT_MapboxMapsOptions(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_MapboxMapsOptions> *_Nullable api);

/// The codec used by FLTSettings.
NSObject<FlutterMessageCodec> *FLTSettingsGetCodec(void);

/// Settings class provides non-persistent, in-process key-value storage.
@protocol FLTSettings
/// Sets setting value for a specified key.
///
/// @param key A name of the key.
/// @param value The `value` for the key.
- (void)setKey:(NSString *)key value:(NSString *)value error:(FlutterError *_Nullable *_Nonnull)error;
/// Return value for a key.
///
/// @param key A name of the key.
///
/// @return `value` if a key exists in settings otherwise a `null value` will be returned.
///
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getKey:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTSettings(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTSettings> *_Nullable api);

/// The codec used by FLTMapSnapshot.
NSObject<FlutterMessageCodec> *FLTMapSnapshotGetCodec(void);

/// An image snapshot of a map rendered by `map snapshotter`.
@protocol FLTMapSnapshot
/// Calculate screen coordinate on the snapshot from geographical `coordinate`.
///
/// @param coordinate A geographical `coordinate`.
/// @return A `screen coordinate` measured in `logical pixels` on the snapshot for geographical `coordinate`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTScreenCoordinate *)screenCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// Calculate geographical coordinates from a point on the snapshot.
///
/// @param screenCoordinate A `screen coordinate` on the snapshot in `logical pixels`.
/// @return A geographical `coordinate` for a `screen coordinate` on the snapshot.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateScreenCoordinate:(FLTScreenCoordinate *)screenCoordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// Get list of attributions for the sources in this snapshot.
///
/// @return A list of attributions for the sources in this snapshot.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSString *> *)attributionsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Get the rendered snapshot `image`.
///
/// @return A rendered snapshot `image`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTMbxImage *)imageWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTMapSnapshot(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTMapSnapshot> *_Nullable api);

/// The codec used by FLTMapSnapshotter.
NSObject<FlutterMessageCodec> *FLTMapSnapshotterGetCodec(void);

/// MapSnapshotter exposes functionality to capture static map images.
@protocol FLTMapSnapshotter
/// Sets the `size` of the snapshot
///
/// @param size The new `size` of the snapshot in `logical pixels`.
- (void)setSizeSize:(FLTSize *)size error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets the size of the snapshot
///
/// @return Snapshot `size` in `logical pixels`.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTSize *)getSizeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Returns `true` if the snapshotter is in the tile mode.
///
/// @return `true` if the snapshotter is in the tile mode, `false` otherwise.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isInTileModeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the snapshotter to the tile mode.
///
/// In the tile mode, the snapshotter fetches the still image of a single tile.
///
/// @param set A `boolean` value representing if the snapshotter is in the tile mode.
- (void)setTileModeSet:(BOOL)set error:(FlutterError *_Nullable *_Nonnull)error;
/// Cancel the current snapshot operation.
///
/// Cancel the current snapshot operation, if any. The callback passed to the start method
/// is called with error parameter set.
- (void)cancelWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Get elevation for the given coordinate.
/// Note: Elevation is only available for the visible region on the screen.
///
/// @param coordinate defined as longitude-latitude pair.
///
/// @return Elevation (in meters) multiplied by current terrain exaggeration, or empty if elevation for the coordinate is not available.
- (nullable NSNumber *)getElevationCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTMapSnapshotter(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTMapSnapshotter> *_Nullable api);

/// The codec used by FLTStyleManager.
NSObject<FlutterMessageCodec> *FLTStyleManagerGetCodec(void);

/// Interface for managing style of the `map`.
@protocol FLTStyleManager
/// Get the URI of the current style in use.
///
/// @return A string containing a style URI.
- (void)getStyleURIWithCompletion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Load style from provided URI.
///
/// This is an asynchronous call. To check the result of this operation the user must register an observer observing
/// `MapLoaded` or `MapLoadingError` events. In case of successful style load, `StyleLoaded` event will be also emitted.
///
/// @param uri URI where the style should be loaded from.
- (void)setStyleURIUri:(NSString *)uri completion:(void (^)(FlutterError *_Nullable))completion;
/// Get the JSON serialization string of the current style in use.
///
/// @return A JSON string containing a serialized style.
- (void)getStyleJSONWithCompletion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Load the style from a provided JSON string.
///
/// @param json A JSON string containing a serialized style.
- (void)setStyleJSONJson:(NSString *)json completion:(void (^)(FlutterError *_Nullable))completion;
/// Returns the map style's default camera, if any, or a default camera otherwise.
/// The map style's default camera is defined as follows:
/// - [center](https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-center)
/// - [zoom](https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-zoom)
/// - [bearing](https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-bearing)
/// - [pitch](https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-pitch)
///
/// The style default camera is re-evaluated when a new style is loaded.
///
/// @return The default `camera options` of the current style in use.
- (void)getStyleDefaultCameraWithCompletion:(void (^)(FLTCameraOptions *_Nullable, FlutterError *_Nullable))completion;
/// Returns the map style's transition options. By default, the style parser will attempt
/// to read the style default transition options, if any, fallbacking to an immediate transition
/// otherwise. Transition options can be overriden via `setStyleTransition`, but the options are
/// reset once a new style has been loaded.
///
/// The style transition is re-evaluated when a new style is loaded.
///
/// @return The `transition options` of the current style in use.
- (void)getStyleTransitionWithCompletion:(void (^)(FLTTransitionOptions *_Nullable, FlutterError *_Nullable))completion;
/// Returns the list containing information about existing style import objects.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTStyleObjectInfo *> *)getStyleImportsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Removes an existing style import.
///
/// @param importId Identifier of the style import to remove.
- (void)removeStyleImportImportId:(NSString *)importId error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets the style import schema.
///
/// @param importId Identifier of the style import.
///
/// Returns the style import schema, containing the default configurations for the style import.
///
/// @return `nil` only when `error != nil`.
- (nullable id)getStyleImportSchemaImportId:(NSString *)importId error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets style import config.
///
/// @param importId Identifier of the style import.
///
/// Returns the style import configuration or a string describing an error if the operation was not successful.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, FLTStylePropertyValue *> *)getStyleImportConfigPropertiesImportId:(NSString *)importId error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets the value of style import config.
///
/// @param importId Identifier of the style import.
/// @param config The style import config name.
///
/// Returns the style import configuration or a string describing an error if the operation was not successful.
///
/// @return `nil` only when `error != nil`.
- (nullable FLTStylePropertyValue *)getStyleImportConfigPropertyImportId:(NSString *)importId config:(NSString *)config error:(FlutterError *_Nullable *_Nonnull)error;
/// Sets style import config.
/// This method can be used to perform batch update for a style import configurations.
///
/// @param importId Identifier of the style import.
/// @param configs A map of style import configurations.
- (void)setStyleImportConfigPropertiesImportId:(NSString *)importId configs:(NSDictionary<NSString *, id> *)configs error:(FlutterError *_Nullable *_Nonnull)error;
/// Sets a value to a style import config.
///
/// @param importId Identifier of the style import.
/// @param config The style import config name.
/// @param value The style import config value.
- (void)setStyleImportConfigPropertyImportId:(NSString *)importId config:(NSString *)config value:(id)value error:(FlutterError *_Nullable *_Nonnull)error;
/// Overrides the map style's transition options with user-provided options.
///
/// The style transition is re-evaluated when a new style is loaded.
///
/// @param transitionOptions The `transition options`.
- (void)setStyleTransitionTransitionOptions:(FLTTransitionOptions *)transitionOptions completion:(void (^)(FlutterError *_Nullable))completion;
/// Adds a new [style layer](https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers).
///
/// Runtime style layers are valid until they are either removed or a new style is loaded.
///
/// @param properties A map of style layer properties.
/// @param layerPosition If not empty, the new layer will be positioned according to `layer position` parameters.
///
/// @return A string describing an error if the operation was not successful, or empty otherwise.
- (void)addStyleLayerProperties:(NSString *)properties layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void (^)(FlutterError *_Nullable))completion;
/// Adds a new [style layer](https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers).
///
/// Whenever a new style is being parsed and currently used style has persistent layers,
/// an engine will try to do following:
///   - keep the persistent layer at its relative position
///   - keep the source used by a persistent layer
///   - keep images added through `addStyleImage` method
///
/// In cases when a new style has the same layer, source or image resource, style's resources would be
/// used instead and `MapLoadingError` event will be emitted.
///
/// @param properties A map of style layer properties.
/// @param layerPosition If not empty, the new layer will be positioned according to `layer position` parameters.
///
/// @return A string describing an error if the operation was not successful, or empty otherwise.
- (void)addPersistentStyleLayerProperties:(NSString *)properties layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void (^)(FlutterError *_Nullable))completion;
/// Checks if a style layer is persistent.
///
/// @param layerId A style layer identifier.
/// @return A string describing an error if the operation was not successful, boolean representing state otherwise.
- (void)isStyleLayerPersistentLayerId:(NSString *)layerId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Removes an existing style layer.
///
/// @param layerId An identifier of the style layer to remove.
///
/// @return A string describing an error if the operation was not successful, or empty otherwise.
- (void)removeStyleLayerLayerId:(NSString *)layerId completion:(void (^)(FlutterError *_Nullable))completion;
/// Moves an existing style layer
///
/// @param layerId Identifier of the style layer to move.
/// @param layerPosition The layer will be positioned according to the LayerPosition parameters. If an empty LayerPosition
///                      is provided then the layer is moved to the top of the layerstack.
///
/// @return A string describing an error if the operation was not successful, or empty otherwise.
- (void)moveStyleLayerLayerId:(NSString *)layerId layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void (^)(FlutterError *_Nullable))completion;
/// Checks whether a given style layer exists.
///
/// @param layerId Style layer identifier.
///
/// @return A `true` value if the given style layer exists, `false` otherwise.
- (void)styleLayerExistsLayerId:(NSString *)layerId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Returns the existing style layers.
///
/// @return The list containing the information about existing style layer objects.
- (void)getStyleLayersWithCompletion:(void (^)(NSArray<FLTStyleObjectInfo *> *_Nullable, FlutterError *_Nullable))completion;
/// Gets the value of style layer property.
///
/// @param layerId A style layer identifier.
/// @param property The style layer property name.
/// @return The `style property value`.
- (void)getStyleLayerPropertyLayerId:(NSString *)layerId property:(NSString *)property completion:(void (^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
/// Sets a value to a style layer property.
///
/// @param layerId A style layer identifier.
/// @param property The style layer property name.
/// @param value The style layer property value.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleLayerPropertyLayerId:(NSString *)layerId property:(NSString *)property value:(id)value completion:(void (^)(FlutterError *_Nullable))completion;
/// Gets style layer properties.
///
/// @return The style layer properties or a string describing an error if the operation was not successful.
- (void)getStyleLayerPropertiesLayerId:(NSString *)layerId completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Sets style layer properties.
/// This method can be used to perform batch update for a style layer properties. The structure of a
/// provided `properties` value must conform to a format for a corresponding [layer type](https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/).
/// Modification of a layer [id](https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#id) and/or a [layer type] (https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#type) is not allowed.
///
/// @param layerId A style layer identifier.
/// @param properties A map of style layer properties.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleLayerPropertiesLayerId:(NSString *)layerId properties:(NSString *)properties completion:(void (^)(FlutterError *_Nullable))completion;
/// Adds a new [style source](https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources).
///
/// @param sourceId An identifier for the style source.
/// @param properties A map of style source properties.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)addStyleSourceSourceId:(NSString *)sourceId properties:(NSString *)properties completion:(void (^)(FlutterError *_Nullable))completion;
/// Gets the value of style source property.
///
/// @param sourceId A style source identifier.
/// @param property The style source property name.
/// @return The value of a `property` in the source with a `sourceId`.
- (void)getStyleSourcePropertySourceId:(NSString *)sourceId property:(NSString *)property completion:(void (^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
/// Sets a value to a style source property.
/// Note: When setting the `data` property of a `geojson` source, this method never returns an error.
/// In case of success, a `map-loaded` event will be propagated. In case of errors, a `map-loading-error` event will be propagated instead.
///
///
/// @param sourceId A style source identifier.
/// @param property The style source property name.
/// @param value The style source property value.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleSourcePropertySourceId:(NSString *)sourceId property:(NSString *)property value:(id)value completion:(void (^)(FlutterError *_Nullable))completion;
/// Gets style source properties.
///
/// @param sourceId A style source identifier.
///
/// @return The style source properties or a string describing an error if the operation was not successful.
- (void)getStyleSourcePropertiesSourceId:(NSString *)sourceId completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Sets style source properties.
///
/// This method can be used to perform batch update for a style source properties. The structure of a
/// provided `properties` value must conform to a format for a corresponding [source type](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/).
/// Modification of a source [type](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#type) is not allowed.
///
/// @param sourceId A style source identifier.
/// @param properties A map of Style source properties.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleSourcePropertiesSourceId:(NSString *)sourceId properties:(NSString *)properties completion:(void (^)(FlutterError *_Nullable))completion;
/// Updates the image of an [image style source](https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image).
///
/// @param sourceId A style source identifier.
/// @param image An `image`.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)updateStyleImageSourceImageSourceId:(NSString *)sourceId image:(FLTMbxImage *)image completion:(void (^)(FlutterError *_Nullable))completion;
/// Removes an existing style source.
///
/// @param sourceId An identifier of the style source to remove.
- (void)removeStyleSourceSourceId:(NSString *)sourceId completion:(void (^)(FlutterError *_Nullable))completion;
/// Checks whether a given style source exists.
///
/// @param sourceId A style source identifier.
///
/// @return `true` if the given source exists, `false` otherwise.
- (void)styleSourceExistsSourceId:(NSString *)sourceId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Returns the existing style sources.
///
/// @return The list containing the information about existing style source objects.
- (void)getStyleSourcesWithCompletion:(void (^)(NSArray<FLTStyleObjectInfo *> *_Nullable, FlutterError *_Nullable))completion;
/// Returns an ordered list of the current style lights.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTStyleObjectInfo *> *)getStyleLightsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Set global directional lightning.
///
/// @param flatLight The flat light source.
- (void)setLightFlatLight:(FLTFlatLight *)flatLight error:(FlutterError *_Nullable *_Nonnull)error;
/// Set dynamic lightning.
///
/// @param ambientLight The ambient light source.
/// @param directionalLight The directional light source.
- (void)setLightsAmbientLight:(FLTAmbientLight *)ambientLight directionalLight:(FLTDirectionalLight *)directionalLight error:(FlutterError *_Nullable *_Nonnull)error;
/// Gets the value of a style light property.
///
/// @param property The style light property name.
/// @param id The unique identifier of the style light in lights list.
/// @return The style light property value.
- (void)getStyleLightPropertyId:(NSString *)id property:(NSString *)property completion:(void (^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
/// Sets a value to the the style light property.
///
/// @param property The style light property name.
/// @param id The unique identifier of the style light in lights list.
/// @param value The style light property value.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleLightPropertyId:(NSString *)id property:(NSString *)property value:(id)value completion:(void (^)(FlutterError *_Nullable))completion;
/// Sets the style global [terrain](https://docs.mapbox.com/mapbox-gl-js/style-spec/#terrain) properties.
///
/// @param properties A map of style terrain properties values, with their names as a key.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleTerrainProperties:(NSString *)properties completion:(void (^)(FlutterError *_Nullable))completion;
/// Gets the value of a style terrain property.
///
/// @param property The style terrain property name.
/// @return The style terrain property value.
- (void)getStyleTerrainPropertyProperty:(NSString *)property completion:(void (^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
/// Sets a value to the the style terrain property.
///
/// @param property The style terrain property name.
/// @param value The style terrain property value.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)setStyleTerrainPropertyProperty:(NSString *)property value:(id)value completion:(void (^)(FlutterError *_Nullable))completion;
/// Get an `image` from the style.
///
/// @param imageId The identifier of the `image`.
///
/// @return The `image` for the given `imageId`, or empty if no image is associated with the `imageId`.
- (void)getStyleImageImageId:(NSString *)imageId completion:(void (^)(FLTMbxImage *_Nullable, FlutterError *_Nullable))completion;
/// Adds an image to be used in the style. This API can also be used for updating
/// an image. If the image for a given `imageId` was already added, it gets replaced by the new image.
///
/// The image can be used in [`icon-image`](https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-image),
/// [`fill-pattern`](https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-fill-fill-pattern),
/// [`line-pattern`](https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-line-line-pattern) and
/// [`text-field`](https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-text-field) properties.
///
/// @param imageId An identifier of the image.
/// @param scale A scale factor for the image.
/// @param image A pixel data of the image.
/// @param sdf An option to treat whether image is SDF(signed distance field) or not.
/// @param stretchX An array of two-element arrays, consisting of two numbers that represent
/// the from position and the to position of areas that can be stretched horizontally.
/// @param stretchY An array of two-element arrays, consisting of two numbers that represent
/// the from position and the to position of areas that can be stretched vertically.
/// @param content An array of four numbers, with the first two specifying the left, top
/// corner, and the last two specifying the right, bottom corner. If present, and if the
/// icon uses icon-text-fit, the symbol's text will be fit inside the content box.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)addStyleImageImageId:(NSString *)imageId scale:(double)scale image:(FLTMbxImage *)image sdf:(BOOL)sdf stretchX:(NSArray<FLTImageStretches *> *)stretchX stretchY:(NSArray<FLTImageStretches *> *)stretchY content:(nullable FLTImageContent *)content completion:(void (^)(FlutterError *_Nullable))completion;
/// Removes an image from the style.
///
/// @param imageId The identifier of the image to remove.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)removeStyleImageImageId:(NSString *)imageId completion:(void (^)(FlutterError *_Nullable))completion;
/// Checks whether an image exists.
///
/// @param imageId The identifier of the image.
///
/// @return True if image exists, false otherwise.
- (void)hasStyleImageImageId:(NSString *)imageId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Set tile data of a custom geometry.
///
/// @param sourceId A style source identifier.
/// @param tileId A `canonical tile id` of the tile.
/// @param featureCollection An array with the features to add.
/// Invalidate tile for provided custom geometry source.
///
/// @param sourceId A style source identifier,.
/// @param tileId A `canonical tile id` of the tile.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)invalidateStyleCustomGeometrySourceTileSourceId:(NSString *)sourceId tileId:(FLTCanonicalTileID *)tileId completion:(void (^)(FlutterError *_Nullable))completion;
/// Invalidate region for provided custom geometry source.
///
/// @param sourceId A style source identifier
/// @param bounds A `coordinate bounds` object.
///
/// @return A string describing an error if the operation was not successful, empty otherwise.
- (void)invalidateStyleCustomGeometrySourceRegionSourceId:(NSString *)sourceId bounds:(FLTCoordinateBounds *)bounds completion:(void (^)(FlutterError *_Nullable))completion;
/// Check if the style is completely loaded.
///
/// Note: The style specified sprite would be marked as loaded even with sprite loading error (An error will be emitted via `MapLoadingError`).
/// Sprite loading error is not fatal and we don't want it to block the map rendering, thus the function will still return `true` if style and sources are fully loaded.
///
/// @return `true` iff the style JSON contents, the style specified sprite and sources are all loaded, otherwise returns `false`.
///
- (void)isStyleLoadedWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Function to get the projection provided by the Style Extension.
///
/// @return Projection that is currently applied to the map
- (nullable FLTStyleProjection *)getProjectionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Function to set the projection provided by the Style Extension.
///
/// @param projection The projection to be set.
- (void)setProjectionProjection:(FLTStyleProjection *)projection error:(FlutterError *_Nullable *_Nonnull)error;
/// Function to localize style labels.
///
/// @param locale The locale to apply for localization
/// @param layerIds The ids of layers that will localize on, default is null which means will localize all the feasible layers.
- (void)localizeLabelsLocale:(NSString *)locale layerIds:(nullable NSArray<NSString *> *)layerIds completion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void SetUpFLTStyleManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTStyleManager> *_Nullable api);

/// The codec used by FLTCancelable.
NSObject<FlutterMessageCodec> *FLTCancelableGetCodec(void);

/// Allows to cancel the associated asynchronous operation
///
/// The the associated asynchronous operation is not automatically canceled if this
/// object goes out of scope.
@protocol FLTCancelable
/// Cancels the associated asynchronous operation
///
/// If the associated asynchronous operation has already finished, this call is ignored.
- (void)cancelWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTCancelable(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTCancelable> *_Nullable api);

/// The codec used by FLTOfflineSwitch.
NSObject<FlutterMessageCodec> *FLTOfflineSwitchGetCodec(void);

/// Instance that allows connecting or disconnecting the Mapbox stack to the network.
@protocol FLTOfflineSwitch
/// Connects or disconnects the Mapbox stack. If set to false, current and new HTTP requests will fail
/// with HttpRequestErrorType#ConnectionError.
///
/// @param connected Set false to disconnect the Mapbox stack
- (void)setMapboxStackConnectedConnected:(BOOL)connected error:(FlutterError *_Nullable *_Nonnull)error;
/// Provides information if the Mapbox stack is connected or disconnected via OfflineSwitch.
///
/// @return True if the Mapbox stack is disconnected via setMapboxStackConnected(), false otherwise.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isMapboxStackConnectedWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Releases the OfflineSwitch singleton instance.
///
/// Users can call this method if they want to do manual cleanup of the resources allocated by Mapbox services.
/// If the user calls getInstance() after reset, a new instance of the OfflineSwitch singleton will be allocated.
- (void)resetWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFLTOfflineSwitch(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineSwitch> *_Nullable api);

/// The codec used by FLTTilesetDescriptor.
NSObject<FlutterMessageCodec> *FLTTilesetDescriptorGetCodec(void);

/// A bundle that encapsulates tilesets creation for the tile store implementation.
///
/// Tileset descriptors describe the type of data that should be part of the Offline Region, like the routing profile for Navigation and the Tilesets of the Map style.
@protocol FLTTilesetDescriptor
@end

extern void SetUpFLTTilesetDescriptor(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTTilesetDescriptor> *_Nullable api);

NS_ASSUME_NONNULL_END
