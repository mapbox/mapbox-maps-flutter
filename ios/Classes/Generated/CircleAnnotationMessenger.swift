// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import struct Turf.Point

/// Error class for passing custom error details to Dart side.
final class CircleAnnotationMessengerError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "CircleAnnotationMessengerError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? CircleAnnotationMessengerError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> CircleAnnotationMessengerError {
  return CircleAnnotationMessengerError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Orientation of circle when map is pitched.
/// Default value: "viewport".
enum CirclePitchAlignment: Int {
  /// The circle is aligned to the plane of the map.
  case mAP = 0
  /// The circle is aligned to the plane of the viewport.
  case vIEWPORT = 1
}

/// Controls the scaling behavior of the circle when the map is pitched.
/// Default value: "map".
enum CirclePitchScale: Int {
  /// Circles are scaled according to their apparent distance to the camera.
  case mAP = 0
  /// Circles are not scaled.
  case vIEWPORT = 1
}

/// Controls the frame of reference for `circle-translate`.
/// Default value: "map".
enum CircleTranslateAnchor: Int {
  /// The circle is translated relative to the map.
  case mAP = 0
  /// The circle is translated relative to the viewport.
  case vIEWPORT = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct CircleAnnotation {
  /// The id for annotation
  var id: String
  /// The geometry that determines the location/shape of this annotation
  var geometry: Point
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var circleSortKey: Double?
  /// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity. Setting a negative value renders the blur as an inner glow effect.
  /// Default value: 0.
  var circleBlur: Double?
  /// The fill color of the circle.
  /// Default value: "#000000".
  var circleColor: Int64?
  /// The opacity at which the circle will be drawn.
  /// Default value: 1. Value range: [0, 1]
  var circleOpacity: Double?
  /// Circle radius.
  /// Default value: 5. Minimum value: 0.
  var circleRadius: Double?
  /// The stroke color of the circle.
  /// Default value: "#000000".
  var circleStrokeColor: Int64?
  /// The opacity of the circle's stroke.
  /// Default value: 1. Value range: [0, 1]
  var circleStrokeOpacity: Double?
  /// The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.
  /// Default value: 0. Minimum value: 0.
  var circleStrokeWidth: Double?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CircleAnnotation? {
    let id = pigeonVar_list[0] as! String
    let geometry = pigeonVar_list[1] as! Point
    let circleSortKey: Double? = nilOrValue(pigeonVar_list[2])
    let circleBlur: Double? = nilOrValue(pigeonVar_list[3])
    let circleColor: Int64? = nilOrValue(pigeonVar_list[4])
    let circleOpacity: Double? = nilOrValue(pigeonVar_list[5])
    let circleRadius: Double? = nilOrValue(pigeonVar_list[6])
    let circleStrokeColor: Int64? = nilOrValue(pigeonVar_list[7])
    let circleStrokeOpacity: Double? = nilOrValue(pigeonVar_list[8])
    let circleStrokeWidth: Double? = nilOrValue(pigeonVar_list[9])

    return CircleAnnotation(
      id: id,
      geometry: geometry,
      circleSortKey: circleSortKey,
      circleBlur: circleBlur,
      circleColor: circleColor,
      circleOpacity: circleOpacity,
      circleRadius: circleRadius,
      circleStrokeColor: circleStrokeColor,
      circleStrokeOpacity: circleStrokeOpacity,
      circleStrokeWidth: circleStrokeWidth
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      geometry,
      circleSortKey,
      circleBlur,
      circleColor,
      circleOpacity,
      circleRadius,
      circleStrokeColor,
      circleStrokeOpacity,
      circleStrokeWidth,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CircleAnnotationOptions {
  /// The geometry that determines the location/shape of this annotation
  var geometry: Point
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var circleSortKey: Double?
  /// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity. Setting a negative value renders the blur as an inner glow effect.
  /// Default value: 0.
  var circleBlur: Double?
  /// The fill color of the circle.
  /// Default value: "#000000".
  var circleColor: Int64?
  /// The opacity at which the circle will be drawn.
  /// Default value: 1. Value range: [0, 1]
  var circleOpacity: Double?
  /// Circle radius.
  /// Default value: 5. Minimum value: 0.
  var circleRadius: Double?
  /// The stroke color of the circle.
  /// Default value: "#000000".
  var circleStrokeColor: Int64?
  /// The opacity of the circle's stroke.
  /// Default value: 1. Value range: [0, 1]
  var circleStrokeOpacity: Double?
  /// The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.
  /// Default value: 0. Minimum value: 0.
  var circleStrokeWidth: Double?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CircleAnnotationOptions? {
    let geometry = pigeonVar_list[0] as! Point
    let circleSortKey: Double? = nilOrValue(pigeonVar_list[1])
    let circleBlur: Double? = nilOrValue(pigeonVar_list[2])
    let circleColor: Int64? = nilOrValue(pigeonVar_list[3])
    let circleOpacity: Double? = nilOrValue(pigeonVar_list[4])
    let circleRadius: Double? = nilOrValue(pigeonVar_list[5])
    let circleStrokeColor: Int64? = nilOrValue(pigeonVar_list[6])
    let circleStrokeOpacity: Double? = nilOrValue(pigeonVar_list[7])
    let circleStrokeWidth: Double? = nilOrValue(pigeonVar_list[8])

    return CircleAnnotationOptions(
      geometry: geometry,
      circleSortKey: circleSortKey,
      circleBlur: circleBlur,
      circleColor: circleColor,
      circleOpacity: circleOpacity,
      circleRadius: circleRadius,
      circleStrokeColor: circleStrokeColor,
      circleStrokeOpacity: circleStrokeOpacity,
      circleStrokeWidth: circleStrokeWidth
    )
  }
  func toList() -> [Any?] {
    return [
      geometry,
      circleSortKey,
      circleBlur,
      circleColor,
      circleOpacity,
      circleRadius,
      circleStrokeColor,
      circleStrokeOpacity,
      circleStrokeWidth,
    ]
  }
}

private class CircleAnnotationMessengerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CirclePitchAlignment(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CirclePitchScale(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CircleTranslateAnchor(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return Point.fromList(self.readValue() as! [Any?])
    case 133:
      return CircleAnnotation.fromList(self.readValue() as! [Any?])
    case 134:
      return CircleAnnotationOptions.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class CircleAnnotationMessengerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CirclePitchAlignment {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? CirclePitchScale {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? CircleTranslateAnchor {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? Point {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? CircleAnnotation {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? CircleAnnotationOptions {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CircleAnnotationMessengerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CircleAnnotationMessengerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CircleAnnotationMessengerPigeonCodecWriter(data: data)
  }
}

class CircleAnnotationMessengerPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = CircleAnnotationMessengerPigeonCodec(readerWriter: CircleAnnotationMessengerPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol OnCircleAnnotationClickListenerProtocol {
  func onCircleAnnotationClick(annotation annotationArg: CircleAnnotation, completion: @escaping (Result<Void, CircleAnnotationMessengerError>) -> Void)
}
class OnCircleAnnotationClickListener: OnCircleAnnotationClickListenerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: CircleAnnotationMessengerPigeonCodec {
    return CircleAnnotationMessengerPigeonCodec.shared
  }
  func onCircleAnnotationClick(annotation annotationArg: CircleAnnotation, completion: @escaping (Result<Void, CircleAnnotationMessengerError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.OnCircleAnnotationClickListener.onCircleAnnotationClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([annotationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(CircleAnnotationMessengerError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol _CircleAnnotationMessenger {
  func create(managerId: String, annotationOption: CircleAnnotationOptions, completion: @escaping (Result<CircleAnnotation, Error>) -> Void)
  func createMulti(managerId: String, annotationOptions: [CircleAnnotationOptions], completion: @escaping (Result<[CircleAnnotation], Error>) -> Void)
  func update(managerId: String, annotation: CircleAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func delete(managerId: String, annotation: CircleAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func deleteAll(managerId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func setCircleSortKey(managerId: String, circleSortKey: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleSortKey(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleBlur(managerId: String, circleBlur: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleBlur(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleColor(managerId: String, circleColor: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleColor(managerId: String, completion: @escaping (Result<Int64?, Error>) -> Void)
  func setCircleEmissiveStrength(managerId: String, circleEmissiveStrength: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleEmissiveStrength(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleOpacity(managerId: String, circleOpacity: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleOpacity(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCirclePitchAlignment(managerId: String, circlePitchAlignment: CirclePitchAlignment, completion: @escaping (Result<Void, Error>) -> Void)
  func getCirclePitchAlignment(managerId: String, completion: @escaping (Result<CirclePitchAlignment?, Error>) -> Void)
  func setCirclePitchScale(managerId: String, circlePitchScale: CirclePitchScale, completion: @escaping (Result<Void, Error>) -> Void)
  func getCirclePitchScale(managerId: String, completion: @escaping (Result<CirclePitchScale?, Error>) -> Void)
  func setCircleRadius(managerId: String, circleRadius: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleRadius(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleStrokeColor(managerId: String, circleStrokeColor: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleStrokeColor(managerId: String, completion: @escaping (Result<Int64?, Error>) -> Void)
  func setCircleStrokeOpacity(managerId: String, circleStrokeOpacity: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleStrokeOpacity(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleStrokeWidth(managerId: String, circleStrokeWidth: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleStrokeWidth(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setCircleTranslate(managerId: String, circleTranslate: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleTranslate(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setCircleTranslateAnchor(managerId: String, circleTranslateAnchor: CircleTranslateAnchor, completion: @escaping (Result<Void, Error>) -> Void)
  func getCircleTranslateAnchor(managerId: String, completion: @escaping (Result<CircleTranslateAnchor?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class _CircleAnnotationMessengerSetup {
  static var codec: FlutterStandardMessageCodec { CircleAnnotationMessengerPigeonCodec.shared }
  /// Sets up an instance of `_CircleAnnotationMessenger` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: _CircleAnnotationMessenger?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionArg = args[1] as! CircleAnnotationOptions
        api.create(managerId: managerIdArg, annotationOption: annotationOptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let createMultiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.createMulti\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createMultiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionsArg = args[1] as! [CircleAnnotationOptions]
        api.createMulti(managerId: managerIdArg, annotationOptions: annotationOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createMultiChannel.setMessageHandler(nil)
    }
    let updateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.update\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! CircleAnnotation
        api.update(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! CircleAnnotation
        api.delete(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
    let deleteAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.deleteAll\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteAllChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.deleteAll(managerId: managerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteAllChannel.setMessageHandler(nil)
    }
    let setCircleSortKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleSortKey\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleSortKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleSortKeyArg = args[1] as! Double
        api.setCircleSortKey(managerId: managerIdArg, circleSortKey: circleSortKeyArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleSortKeyChannel.setMessageHandler(nil)
    }
    let getCircleSortKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleSortKey\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleSortKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleSortKey(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleSortKeyChannel.setMessageHandler(nil)
    }
    let setCircleBlurChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleBlur\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleBlurChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleBlurArg = args[1] as! Double
        api.setCircleBlur(managerId: managerIdArg, circleBlur: circleBlurArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleBlurChannel.setMessageHandler(nil)
    }
    let getCircleBlurChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleBlur\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleBlurChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleBlur(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleBlurChannel.setMessageHandler(nil)
    }
    let setCircleColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleColorArg = args[1] as! Int64
        api.setCircleColor(managerId: managerIdArg, circleColor: circleColorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleColorChannel.setMessageHandler(nil)
    }
    let getCircleColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleColor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleColorChannel.setMessageHandler(nil)
    }
    let setCircleEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleEmissiveStrengthArg = args[1] as! Double
        api.setCircleEmissiveStrength(managerId: managerIdArg, circleEmissiveStrength: circleEmissiveStrengthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let getCircleEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleEmissiveStrength(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let setCircleOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleOpacityArg = args[1] as! Double
        api.setCircleOpacity(managerId: managerIdArg, circleOpacity: circleOpacityArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleOpacityChannel.setMessageHandler(nil)
    }
    let getCircleOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleOpacity(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleOpacityChannel.setMessageHandler(nil)
    }
    let setCirclePitchAlignmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCirclePitchAlignment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCirclePitchAlignmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circlePitchAlignmentArg = args[1] as! CirclePitchAlignment
        api.setCirclePitchAlignment(managerId: managerIdArg, circlePitchAlignment: circlePitchAlignmentArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCirclePitchAlignmentChannel.setMessageHandler(nil)
    }
    let getCirclePitchAlignmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCirclePitchAlignment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCirclePitchAlignmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCirclePitchAlignment(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCirclePitchAlignmentChannel.setMessageHandler(nil)
    }
    let setCirclePitchScaleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCirclePitchScale\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCirclePitchScaleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circlePitchScaleArg = args[1] as! CirclePitchScale
        api.setCirclePitchScale(managerId: managerIdArg, circlePitchScale: circlePitchScaleArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCirclePitchScaleChannel.setMessageHandler(nil)
    }
    let getCirclePitchScaleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCirclePitchScale\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCirclePitchScaleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCirclePitchScale(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCirclePitchScaleChannel.setMessageHandler(nil)
    }
    let setCircleRadiusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleRadius\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleRadiusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleRadiusArg = args[1] as! Double
        api.setCircleRadius(managerId: managerIdArg, circleRadius: circleRadiusArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleRadiusChannel.setMessageHandler(nil)
    }
    let getCircleRadiusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleRadius\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleRadiusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleRadius(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleRadiusChannel.setMessageHandler(nil)
    }
    let setCircleStrokeColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleStrokeColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleStrokeColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleStrokeColorArg = args[1] as! Int64
        api.setCircleStrokeColor(managerId: managerIdArg, circleStrokeColor: circleStrokeColorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleStrokeColorChannel.setMessageHandler(nil)
    }
    let getCircleStrokeColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleStrokeColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleStrokeColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleStrokeColor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleStrokeColorChannel.setMessageHandler(nil)
    }
    let setCircleStrokeOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleStrokeOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleStrokeOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleStrokeOpacityArg = args[1] as! Double
        api.setCircleStrokeOpacity(managerId: managerIdArg, circleStrokeOpacity: circleStrokeOpacityArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleStrokeOpacityChannel.setMessageHandler(nil)
    }
    let getCircleStrokeOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleStrokeOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleStrokeOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleStrokeOpacity(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleStrokeOpacityChannel.setMessageHandler(nil)
    }
    let setCircleStrokeWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleStrokeWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleStrokeWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleStrokeWidthArg = args[1] as! Double
        api.setCircleStrokeWidth(managerId: managerIdArg, circleStrokeWidth: circleStrokeWidthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleStrokeWidthChannel.setMessageHandler(nil)
    }
    let getCircleStrokeWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleStrokeWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleStrokeWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleStrokeWidth(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleStrokeWidthChannel.setMessageHandler(nil)
    }
    let setCircleTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleTranslateArg = args[1] as! [Double?]
        api.setCircleTranslate(managerId: managerIdArg, circleTranslate: circleTranslateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleTranslateChannel.setMessageHandler(nil)
    }
    let getCircleTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleTranslate(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleTranslateChannel.setMessageHandler(nil)
    }
    let setCircleTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.setCircleTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCircleTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let circleTranslateAnchorArg = args[1] as! CircleTranslateAnchor
        api.setCircleTranslateAnchor(managerId: managerIdArg, circleTranslateAnchor: circleTranslateAnchorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCircleTranslateAnchorChannel.setMessageHandler(nil)
    }
    let getCircleTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessenger.getCircleTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCircleTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getCircleTranslateAnchor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCircleTranslateAnchorChannel.setMessageHandler(nil)
    }
  }
}
