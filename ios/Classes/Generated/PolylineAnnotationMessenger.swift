// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import struct Turf.LineString

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// The display of line endings.
enum LineCap: Int {
  /// A cap with a squared-off end which is drawn to the exact endpoint of the line.
  case bUTT = 0
  /// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  case rOUND = 1
  /// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  case sQUARE = 2
}

/// The display of lines when joining.
enum LineJoin: Int {
  /// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  case bEVEL = 0
  /// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  case rOUND = 1
  /// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
  case mITER = 2
}

/// Controls the frame of reference for `line-translate`.
enum LineTranslateAnchor: Int {
  /// The line is translated relative to the map.
  case mAP = 0
  /// The line is translated relative to the viewport.
  case vIEWPORT = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolylineAnnotation {
  /// The id for annotation
  var id: String
  /// The geometry that determines the location/shape of this annotation
  var geometry: LineString
  /// The display of lines when joining.
  var lineJoin: LineJoin?
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var lineSortKey: Double?
  /// Blur applied to the line, in pixels.
  var lineBlur: Double?
  /// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
  var lineBorderColor: Int64?
  /// The width of the line border. A value of zero means no border.
  var lineBorderWidth: Double?
  /// The color with which the line will be drawn.
  var lineColor: Int64?
  /// Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
  var lineGapWidth: Double?
  /// The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
  var lineOffset: Double?
  /// The opacity at which the line will be drawn.
  var lineOpacity: Double?
  /// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  var linePattern: String?
  /// Stroke thickness.
  var lineWidth: Double?

  static func fromList(_ list: [Any?]) -> PolylineAnnotation? {
    let id = list[0] as! String
    let geometry = LineString.fromList(list[1] as! [Any?])!
    var lineJoin: LineJoin?
    let lineJoinEnumVal: Int? = nilOrValue(list[2])
    if let lineJoinRawValue = lineJoinEnumVal {
      lineJoin = LineJoin(rawValue: lineJoinRawValue)!
    }
    let lineSortKey: Double? = nilOrValue(list[3])
    let lineBlur: Double? = nilOrValue(list[4])
    let lineBorderColor: Int64? = isNullish(list[5]) ? nil : (list[5] is Int64? ? list[5] as! Int64? : Int64(list[5] as! Int32))
    let lineBorderWidth: Double? = nilOrValue(list[6])
    let lineColor: Int64? = isNullish(list[7]) ? nil : (list[7] is Int64? ? list[7] as! Int64? : Int64(list[7] as! Int32))
    let lineGapWidth: Double? = nilOrValue(list[8])
    let lineOffset: Double? = nilOrValue(list[9])
    let lineOpacity: Double? = nilOrValue(list[10])
    let linePattern: String? = nilOrValue(list[11])
    let lineWidth: Double? = nilOrValue(list[12])

    return PolylineAnnotation(
      id: id,
      geometry: geometry,
      lineJoin: lineJoin,
      lineSortKey: lineSortKey,
      lineBlur: lineBlur,
      lineBorderColor: lineBorderColor,
      lineBorderWidth: lineBorderWidth,
      lineColor: lineColor,
      lineGapWidth: lineGapWidth,
      lineOffset: lineOffset,
      lineOpacity: lineOpacity,
      linePattern: linePattern,
      lineWidth: lineWidth
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      geometry.toList(),
      lineJoin?.rawValue,
      lineSortKey,
      lineBlur,
      lineBorderColor,
      lineBorderWidth,
      lineColor,
      lineGapWidth,
      lineOffset,
      lineOpacity,
      linePattern,
      lineWidth,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolylineAnnotationOptions {
  /// The geometry that determines the location/shape of this annotation
  var geometry: LineString
  /// The display of lines when joining.
  var lineJoin: LineJoin?
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var lineSortKey: Double?
  /// Blur applied to the line, in pixels.
  var lineBlur: Double?
  /// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
  var lineBorderColor: Int64?
  /// The width of the line border. A value of zero means no border.
  var lineBorderWidth: Double?
  /// The color with which the line will be drawn.
  var lineColor: Int64?
  /// Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
  var lineGapWidth: Double?
  /// The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
  var lineOffset: Double?
  /// The opacity at which the line will be drawn.
  var lineOpacity: Double?
  /// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  var linePattern: String?
  /// Stroke thickness.
  var lineWidth: Double?

  static func fromList(_ list: [Any?]) -> PolylineAnnotationOptions? {
    let geometry = LineString.fromList(list[0] as! [Any?])!
    var lineJoin: LineJoin?
    let lineJoinEnumVal: Int? = nilOrValue(list[1])
    if let lineJoinRawValue = lineJoinEnumVal {
      lineJoin = LineJoin(rawValue: lineJoinRawValue)!
    }
    let lineSortKey: Double? = nilOrValue(list[2])
    let lineBlur: Double? = nilOrValue(list[3])
    let lineBorderColor: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let lineBorderWidth: Double? = nilOrValue(list[5])
    let lineColor: Int64? = isNullish(list[6]) ? nil : (list[6] is Int64? ? list[6] as! Int64? : Int64(list[6] as! Int32))
    let lineGapWidth: Double? = nilOrValue(list[7])
    let lineOffset: Double? = nilOrValue(list[8])
    let lineOpacity: Double? = nilOrValue(list[9])
    let linePattern: String? = nilOrValue(list[10])
    let lineWidth: Double? = nilOrValue(list[11])

    return PolylineAnnotationOptions(
      geometry: geometry,
      lineJoin: lineJoin,
      lineSortKey: lineSortKey,
      lineBlur: lineBlur,
      lineBorderColor: lineBorderColor,
      lineBorderWidth: lineBorderWidth,
      lineColor: lineColor,
      lineGapWidth: lineGapWidth,
      lineOffset: lineOffset,
      lineOpacity: lineOpacity,
      linePattern: linePattern,
      lineWidth: lineWidth
    )
  }
  func toList() -> [Any?] {
    return [
      geometry.toList(),
      lineJoin?.rawValue,
      lineSortKey,
      lineBlur,
      lineBorderColor,
      lineBorderWidth,
      lineColor,
      lineGapWidth,
      lineOffset,
      lineOpacity,
      linePattern,
      lineWidth,
    ]
  }
}
private class OnPolylineAnnotationClickListenerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return LineString.fromList(self.readValue() as! [Any?])
    case 129:
      return PolylineAnnotation.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class OnPolylineAnnotationClickListenerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LineString {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotation {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class OnPolylineAnnotationClickListenerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return OnPolylineAnnotationClickListenerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return OnPolylineAnnotationClickListenerCodecWriter(data: data)
  }
}

class OnPolylineAnnotationClickListenerCodec: FlutterStandardMessageCodec {
  static let shared = OnPolylineAnnotationClickListenerCodec(readerWriter: OnPolylineAnnotationClickListenerCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol OnPolylineAnnotationClickListenerProtocol {
  func onPolylineAnnotationClick(annotation annotationArg: PolylineAnnotation, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class OnPolylineAnnotationClickListener: OnPolylineAnnotationClickListenerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterStandardMessageCodec {
    return OnPolylineAnnotationClickListenerCodec.shared
  }
  func onPolylineAnnotationClick(annotation annotationArg: PolylineAnnotation, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.OnPolylineAnnotationClickListener.onPolylineAnnotationClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([annotationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
private class _PolylineAnnotationMessengerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return LineString.fromList(self.readValue() as! [Any?])
    case 129:
      return PolylineAnnotation.fromList(self.readValue() as! [Any?])
    case 130:
      return PolylineAnnotation.fromList(self.readValue() as! [Any?])
    case 131:
      return PolylineAnnotationOptions.fromList(self.readValue() as! [Any?])
    case 132:
      return PolylineAnnotationOptions.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class _PolylineAnnotationMessengerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LineString {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotation {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotation {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotationOptions {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotationOptions {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class _PolylineAnnotationMessengerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return _PolylineAnnotationMessengerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return _PolylineAnnotationMessengerCodecWriter(data: data)
  }
}

class _PolylineAnnotationMessengerCodec: FlutterStandardMessageCodec {
  static let shared = _PolylineAnnotationMessengerCodec(readerWriter: _PolylineAnnotationMessengerCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol _PolylineAnnotationMessenger {
  func create(managerId: String, annotationOption: PolylineAnnotationOptions, completion: @escaping (Result<PolylineAnnotation, Error>) -> Void)
  func createMulti(managerId: String, annotationOptions: [PolylineAnnotationOptions], completion: @escaping (Result<[PolylineAnnotation], Error>) -> Void)
  func update(managerId: String, annotation: PolylineAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func delete(managerId: String, annotation: PolylineAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func deleteAll(managerId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func setLineCap(managerId: String, lineCap: LineCap, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineCap(managerId: String, completion: @escaping (Result<LineCap?, Error>) -> Void)
  func setLineMiterLimit(managerId: String, lineMiterLimit: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineMiterLimit(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineRoundLimit(managerId: String, lineRoundLimit: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineRoundLimit(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineDasharray(managerId: String, lineDasharray: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineDasharray(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineDepthOcclusionFactor(managerId: String, lineDepthOcclusionFactor: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineDepthOcclusionFactor(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineEmissiveStrength(managerId: String, lineEmissiveStrength: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineEmissiveStrength(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineTranslate(managerId: String, lineTranslate: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTranslate(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineTranslateAnchor(managerId: String, lineTranslateAnchor: LineTranslateAnchor, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTranslateAnchor(managerId: String, completion: @escaping (Result<LineTranslateAnchor?, Error>) -> Void)
  func setLineTrimOffset(managerId: String, lineTrimOffset: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTrimOffset(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class _PolylineAnnotationMessengerSetup {
  /// The codec used by _PolylineAnnotationMessenger.
  static var codec: FlutterStandardMessageCodec { _PolylineAnnotationMessengerCodec.shared }
  /// Sets up an instance of `_PolylineAnnotationMessenger` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: _PolylineAnnotationMessenger?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionArg = args[1] as! PolylineAnnotationOptions
        api.create(managerId: managerIdArg, annotationOption: annotationOptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let createMultiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.createMulti\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createMultiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionsArg = args[1] as! [PolylineAnnotationOptions]
        api.createMulti(managerId: managerIdArg, annotationOptions: annotationOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createMultiChannel.setMessageHandler(nil)
    }
    let updateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.update\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! PolylineAnnotation
        api.update(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! PolylineAnnotation
        api.delete(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
    let deleteAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.deleteAll\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteAllChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.deleteAll(managerId: managerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteAllChannel.setMessageHandler(nil)
    }
    let setLineCapChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineCap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineCapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineCapArg = LineCap(rawValue: args[1] as! Int)!
        api.setLineCap(managerId: managerIdArg, lineCap: lineCapArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineCapChannel.setMessageHandler(nil)
    }
    let getLineCapChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineCap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineCapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineCap(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res?.rawValue))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineCapChannel.setMessageHandler(nil)
    }
    let setLineMiterLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineMiterLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineMiterLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineMiterLimitArg = args[1] as! Double
        api.setLineMiterLimit(managerId: managerIdArg, lineMiterLimit: lineMiterLimitArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineMiterLimitChannel.setMessageHandler(nil)
    }
    let getLineMiterLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineMiterLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineMiterLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineMiterLimit(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineMiterLimitChannel.setMessageHandler(nil)
    }
    let setLineRoundLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineRoundLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineRoundLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineRoundLimitArg = args[1] as! Double
        api.setLineRoundLimit(managerId: managerIdArg, lineRoundLimit: lineRoundLimitArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineRoundLimitChannel.setMessageHandler(nil)
    }
    let getLineRoundLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineRoundLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineRoundLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineRoundLimit(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineRoundLimitChannel.setMessageHandler(nil)
    }
    let setLineDasharrayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineDasharray\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineDasharrayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineDasharrayArg = args[1] as! [Double?]
        api.setLineDasharray(managerId: managerIdArg, lineDasharray: lineDasharrayArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineDasharrayChannel.setMessageHandler(nil)
    }
    let getLineDasharrayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineDasharray\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineDasharrayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineDasharray(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineDasharrayChannel.setMessageHandler(nil)
    }
    let setLineDepthOcclusionFactorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineDepthOcclusionFactor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineDepthOcclusionFactorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineDepthOcclusionFactorArg = args[1] as! Double
        api.setLineDepthOcclusionFactor(managerId: managerIdArg, lineDepthOcclusionFactor: lineDepthOcclusionFactorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineDepthOcclusionFactorChannel.setMessageHandler(nil)
    }
    let getLineDepthOcclusionFactorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineDepthOcclusionFactor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineDepthOcclusionFactorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineDepthOcclusionFactor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineDepthOcclusionFactorChannel.setMessageHandler(nil)
    }
    let setLineEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineEmissiveStrengthArg = args[1] as! Double
        api.setLineEmissiveStrength(managerId: managerIdArg, lineEmissiveStrength: lineEmissiveStrengthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let getLineEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineEmissiveStrength(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let setLineTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTranslateArg = args[1] as! [Double?]
        api.setLineTranslate(managerId: managerIdArg, lineTranslate: lineTranslateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTranslateChannel.setMessageHandler(nil)
    }
    let getLineTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTranslate(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTranslateChannel.setMessageHandler(nil)
    }
    let setLineTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTranslateAnchorArg = LineTranslateAnchor(rawValue: args[1] as! Int)!
        api.setLineTranslateAnchor(managerId: managerIdArg, lineTranslateAnchor: lineTranslateAnchorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTranslateAnchorChannel.setMessageHandler(nil)
    }
    let getLineTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTranslateAnchor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res?.rawValue))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTranslateAnchorChannel.setMessageHandler(nil)
    }
    let setLineTrimOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTrimOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTrimOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTrimOffsetArg = args[1] as! [Double?]
        api.setLineTrimOffset(managerId: managerIdArg, lineTrimOffset: lineTrimOffsetArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTrimOffsetChannel.setMessageHandler(nil)
    }
    let getLineTrimOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTrimOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTrimOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTrimOffset(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTrimOffsetChannel.setMessageHandler(nil)
    }
  }
}
