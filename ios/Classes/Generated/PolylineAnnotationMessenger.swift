// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import struct Turf.LineString

/// Error class for passing custom error details to Dart side.
final class PolylineAnnotationMessengerError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PolylineAnnotationMessengerError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PolylineAnnotationMessengerError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PolylineAnnotationMessengerError {
  return PolylineAnnotationMessengerError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// The display of line endings.
/// Default value: "butt".
enum LineCap: Int {
  /// A cap with a squared-off end which is drawn to the exact endpoint of the line.
  case bUTT = 0
  /// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  case rOUND = 1
  /// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  case sQUARE = 2
}

/// The display of lines when joining.
/// Default value: "miter".
enum LineJoin: Int {
  /// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  case bEVEL = 0
  /// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  case rOUND = 1
  /// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
  case mITER = 2
  /// Line segments are not joined together, each one creates a separate line. Useful in combination with line-pattern. Line-cap property is not respected. Can't be used with data-driven styling.
  case nONE = 3
}

/// Controls the frame of reference for `line-translate`.
/// Default value: "map".
enum LineTranslateAnchor: Int {
  /// The line is translated relative to the map.
  case mAP = 0
  /// The line is translated relative to the viewport.
  case vIEWPORT = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolylineAnnotation {
  /// The id for annotation
  var id: String
  /// The geometry that determines the location/shape of this annotation
  var geometry: LineString
  /// The display of line endings.
  /// Default value: "butt".
  var lineCap: LineCap?
  /// The display of lines when joining.
  /// Default value: "miter".
  var lineJoin: LineJoin?
  /// Used to automatically convert miter joins to bevel joins for sharp angles.
  /// Default value: 2.
  var lineMiterLimit: Double?
  /// Used to automatically convert round joins to miter joins for shallow angles.
  /// Default value: 1.05.
  var lineRoundLimit: Double?
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var lineSortKey: Double?
  /// Vertical offset from ground, in meters. Defaults to 0. Not supported for globe projection at the moment.
  var lineZOffset: Double?
  /// Blur applied to the line, in pixels.
  /// Default value: 0. Minimum value: 0.
  var lineBlur: Double?
  /// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
  /// Default value: "rgba(0, 0, 0, 0)".
  var lineBorderColor: Int64?
  /// The width of the line border. A value of zero means no border.
  /// Default value: 0. Minimum value: 0.
  var lineBorderWidth: Double?
  /// The color with which the line will be drawn.
  /// Default value: "#000000".
  var lineColor: Int64?
  /// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  /// Minimum value: 0.
  var lineDasharray: [Double?]?
  /// Decrease line layer opacity based on occlusion from 3D objects. Value 0 disables occlusion, value 1 means fully occluded.
  /// Default value: 1. Value range: [0, 1]
  var lineDepthOcclusionFactor: Double?
  /// Controls the intensity of light emitted on the source features.
  /// Default value: 0. Minimum value: 0.
  var lineEmissiveStrength: Double?
  /// Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
  /// Default value: 0. Minimum value: 0.
  var lineGapWidth: Double?
  /// A gradient used to color a line feature at various distances along its length. Defined using a `step` or `interpolate` expression which outputs a color for each corresponding `line-progress` input value. `line-progress` is a percentage of the line feature's total length as measured on the webmercator projected coordinate plane (a `number` between `0` and `1`). Can only be used with GeoJSON sources that specify `"lineMetrics": true`.
  var lineGradient: Int64?
  /// Opacity multiplier (multiplies line-opacity value) of the line part that is occluded by 3D objects. Value 0 hides occluded part, value 1 means the same opacity as non-occluded part. The property is not supported when `line-opacity` has data-driven styling.
  /// Default value: 0. Value range: [0, 1]
  var lineOcclusionOpacity: Double?
  /// The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
  /// Default value: 0.
  var lineOffset: Double?
  /// The opacity at which the line will be drawn.
  /// Default value: 1. Value range: [0, 1]
  var lineOpacity: Double?
  /// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  var linePattern: String?
  /// The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
  /// Default value: [0,0].
  var lineTranslate: [Double?]?
  /// Controls the frame of reference for `line-translate`.
  /// Default value: "map".
  var lineTranslateAnchor: LineTranslateAnchor?
  /// The color to be used for rendering the trimmed line section that is defined by the `line-trim-offset` property.
  /// Default value: "transparent".
  var lineTrimColor: Int64?
  /// The fade range for the trim-start and trim-end points is defined by the `line-trim-offset` property. The first element of the array represents the fade range from the trim-start point toward the end of the line, while the second element defines the fade range from the trim-end point toward the beginning of the line. The fade result is achieved by interpolating between `line-trim-color` and the color specified by the `line-color` or the `line-gradient` property.
  /// Default value: [0,0]. Minimum value: [0,0]. Maximum value: [1,1].
  var lineTrimFadeRange: [Double?]?
  /// The line part between [trim-start, trim-end] will be painted using `line-trim-color,` which is transparent by default to produce a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
  /// Default value: [0,0]. Minimum value: [0,0]. Maximum value: [1,1].
  var lineTrimOffset: [Double?]?
  /// Stroke thickness.
  /// Default value: 1. Minimum value: 0.
  var lineWidth: Double?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PolylineAnnotation? {
    let id = __pigeon_list[0] as! String
    let geometry = __pigeon_list[1] as! LineString
    let lineCap: LineCap? = nilOrValue(__pigeon_list[2])
    let lineJoin: LineJoin? = nilOrValue(__pigeon_list[3])
    let lineMiterLimit: Double? = nilOrValue(__pigeon_list[4])
    let lineRoundLimit: Double? = nilOrValue(__pigeon_list[5])
    let lineSortKey: Double? = nilOrValue(__pigeon_list[6])
    let lineZOffset: Double? = nilOrValue(__pigeon_list[7])
    let lineBlur: Double? = nilOrValue(__pigeon_list[8])
    let lineBorderColor: Int64? = isNullish(__pigeon_list[9]) ? nil : (__pigeon_list[9] is Int64? ? __pigeon_list[9] as! Int64? : Int64(__pigeon_list[9] as! Int32))
    let lineBorderWidth: Double? = nilOrValue(__pigeon_list[10])
    let lineColor: Int64? = isNullish(__pigeon_list[11]) ? nil : (__pigeon_list[11] is Int64? ? __pigeon_list[11] as! Int64? : Int64(__pigeon_list[11] as! Int32))
    let lineDasharray: [Double?]? = nilOrValue(__pigeon_list[12])
    let lineDepthOcclusionFactor: Double? = nilOrValue(__pigeon_list[13])
    let lineEmissiveStrength: Double? = nilOrValue(__pigeon_list[14])
    let lineGapWidth: Double? = nilOrValue(__pigeon_list[15])
    let lineGradient: Int64? = isNullish(__pigeon_list[16]) ? nil : (__pigeon_list[16] is Int64? ? __pigeon_list[16] as! Int64? : Int64(__pigeon_list[16] as! Int32))
    let lineOcclusionOpacity: Double? = nilOrValue(__pigeon_list[17])
    let lineOffset: Double? = nilOrValue(__pigeon_list[18])
    let lineOpacity: Double? = nilOrValue(__pigeon_list[19])
    let linePattern: String? = nilOrValue(__pigeon_list[20])
    let lineTranslate: [Double?]? = nilOrValue(__pigeon_list[21])
    let lineTranslateAnchor: LineTranslateAnchor? = nilOrValue(__pigeon_list[22])
    let lineTrimColor: Int64? = isNullish(__pigeon_list[23]) ? nil : (__pigeon_list[23] is Int64? ? __pigeon_list[23] as! Int64? : Int64(__pigeon_list[23] as! Int32))
    let lineTrimFadeRange: [Double?]? = nilOrValue(__pigeon_list[24])
    let lineTrimOffset: [Double?]? = nilOrValue(__pigeon_list[25])
    let lineWidth: Double? = nilOrValue(__pigeon_list[26])

    return PolylineAnnotation(
      id: id,
      geometry: geometry,
      lineCap: lineCap,
      lineJoin: lineJoin,
      lineMiterLimit: lineMiterLimit,
      lineRoundLimit: lineRoundLimit,
      lineSortKey: lineSortKey,
      lineZOffset: lineZOffset,
      lineBlur: lineBlur,
      lineBorderColor: lineBorderColor,
      lineBorderWidth: lineBorderWidth,
      lineColor: lineColor,
      lineDasharray: lineDasharray,
      lineDepthOcclusionFactor: lineDepthOcclusionFactor,
      lineEmissiveStrength: lineEmissiveStrength,
      lineGapWidth: lineGapWidth,
      lineGradient: lineGradient,
      lineOcclusionOpacity: lineOcclusionOpacity,
      lineOffset: lineOffset,
      lineOpacity: lineOpacity,
      linePattern: linePattern,
      lineTranslate: lineTranslate,
      lineTranslateAnchor: lineTranslateAnchor,
      lineTrimColor: lineTrimColor,
      lineTrimFadeRange: lineTrimFadeRange,
      lineTrimOffset: lineTrimOffset,
      lineWidth: lineWidth
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      geometry,
      lineCap,
      lineJoin,
      lineMiterLimit,
      lineRoundLimit,
      lineSortKey,
      lineZOffset,
      lineBlur,
      lineBorderColor,
      lineBorderWidth,
      lineColor,
      lineDasharray,
      lineDepthOcclusionFactor,
      lineEmissiveStrength,
      lineGapWidth,
      lineGradient,
      lineOcclusionOpacity,
      lineOffset,
      lineOpacity,
      linePattern,
      lineTranslate,
      lineTranslateAnchor,
      lineTrimColor,
      lineTrimFadeRange,
      lineTrimOffset,
      lineWidth,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolylineAnnotationOptions {
  /// The geometry that determines the location/shape of this annotation
  var geometry: LineString
  /// The display of line endings.
  /// Default value: "butt".
  var lineCap: LineCap?
  /// The display of lines when joining.
  /// Default value: "miter".
  var lineJoin: LineJoin?
  /// Used to automatically convert miter joins to bevel joins for sharp angles.
  /// Default value: 2.
  var lineMiterLimit: Double?
  /// Used to automatically convert round joins to miter joins for shallow angles.
  /// Default value: 1.05.
  var lineRoundLimit: Double?
  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  var lineSortKey: Double?
  /// Vertical offset from ground, in meters. Defaults to 0. Not supported for globe projection at the moment.
  var lineZOffset: Double?
  /// Blur applied to the line, in pixels.
  /// Default value: 0. Minimum value: 0.
  var lineBlur: Double?
  /// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
  /// Default value: "rgba(0, 0, 0, 0)".
  var lineBorderColor: Int64?
  /// The width of the line border. A value of zero means no border.
  /// Default value: 0. Minimum value: 0.
  var lineBorderWidth: Double?
  /// The color with which the line will be drawn.
  /// Default value: "#000000".
  var lineColor: Int64?
  /// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  /// Minimum value: 0.
  var lineDasharray: [Double?]?
  /// Decrease line layer opacity based on occlusion from 3D objects. Value 0 disables occlusion, value 1 means fully occluded.
  /// Default value: 1. Value range: [0, 1]
  var lineDepthOcclusionFactor: Double?
  /// Controls the intensity of light emitted on the source features.
  /// Default value: 0. Minimum value: 0.
  var lineEmissiveStrength: Double?
  /// Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
  /// Default value: 0. Minimum value: 0.
  var lineGapWidth: Double?
  /// A gradient used to color a line feature at various distances along its length. Defined using a `step` or `interpolate` expression which outputs a color for each corresponding `line-progress` input value. `line-progress` is a percentage of the line feature's total length as measured on the webmercator projected coordinate plane (a `number` between `0` and `1`). Can only be used with GeoJSON sources that specify `"lineMetrics": true`.
  var lineGradient: Int64?
  /// Opacity multiplier (multiplies line-opacity value) of the line part that is occluded by 3D objects. Value 0 hides occluded part, value 1 means the same opacity as non-occluded part. The property is not supported when `line-opacity` has data-driven styling.
  /// Default value: 0. Value range: [0, 1]
  var lineOcclusionOpacity: Double?
  /// The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
  /// Default value: 0.
  var lineOffset: Double?
  /// The opacity at which the line will be drawn.
  /// Default value: 1. Value range: [0, 1]
  var lineOpacity: Double?
  /// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  var linePattern: String?
  /// The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
  /// Default value: [0,0].
  var lineTranslate: [Double?]?
  /// Controls the frame of reference for `line-translate`.
  /// Default value: "map".
  var lineTranslateAnchor: LineTranslateAnchor?
  /// The color to be used for rendering the trimmed line section that is defined by the `line-trim-offset` property.
  /// Default value: "transparent".
  var lineTrimColor: Int64?
  /// The fade range for the trim-start and trim-end points is defined by the `line-trim-offset` property. The first element of the array represents the fade range from the trim-start point toward the end of the line, while the second element defines the fade range from the trim-end point toward the beginning of the line. The fade result is achieved by interpolating between `line-trim-color` and the color specified by the `line-color` or the `line-gradient` property.
  /// Default value: [0,0]. Minimum value: [0,0]. Maximum value: [1,1].
  var lineTrimFadeRange: [Double?]?
  /// The line part between [trim-start, trim-end] will be painted using `line-trim-color,` which is transparent by default to produce a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
  /// Default value: [0,0]. Minimum value: [0,0]. Maximum value: [1,1].
  var lineTrimOffset: [Double?]?
  /// Stroke thickness.
  /// Default value: 1. Minimum value: 0.
  var lineWidth: Double?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PolylineAnnotationOptions? {
    let geometry = __pigeon_list[0] as! LineString
    let lineCap: LineCap? = nilOrValue(__pigeon_list[1])
    let lineJoin: LineJoin? = nilOrValue(__pigeon_list[2])
    let lineMiterLimit: Double? = nilOrValue(__pigeon_list[3])
    let lineRoundLimit: Double? = nilOrValue(__pigeon_list[4])
    let lineSortKey: Double? = nilOrValue(__pigeon_list[5])
    let lineZOffset: Double? = nilOrValue(__pigeon_list[6])
    let lineBlur: Double? = nilOrValue(__pigeon_list[7])
    let lineBorderColor: Int64? = isNullish(__pigeon_list[8]) ? nil : (__pigeon_list[8] is Int64? ? __pigeon_list[8] as! Int64? : Int64(__pigeon_list[8] as! Int32))
    let lineBorderWidth: Double? = nilOrValue(__pigeon_list[9])
    let lineColor: Int64? = isNullish(__pigeon_list[10]) ? nil : (__pigeon_list[10] is Int64? ? __pigeon_list[10] as! Int64? : Int64(__pigeon_list[10] as! Int32))
    let lineDasharray: [Double?]? = nilOrValue(__pigeon_list[11])
    let lineDepthOcclusionFactor: Double? = nilOrValue(__pigeon_list[12])
    let lineEmissiveStrength: Double? = nilOrValue(__pigeon_list[13])
    let lineGapWidth: Double? = nilOrValue(__pigeon_list[14])
    let lineGradient: Int64? = isNullish(__pigeon_list[15]) ? nil : (__pigeon_list[15] is Int64? ? __pigeon_list[15] as! Int64? : Int64(__pigeon_list[15] as! Int32))
    let lineOcclusionOpacity: Double? = nilOrValue(__pigeon_list[16])
    let lineOffset: Double? = nilOrValue(__pigeon_list[17])
    let lineOpacity: Double? = nilOrValue(__pigeon_list[18])
    let linePattern: String? = nilOrValue(__pigeon_list[19])
    let lineTranslate: [Double?]? = nilOrValue(__pigeon_list[20])
    let lineTranslateAnchor: LineTranslateAnchor? = nilOrValue(__pigeon_list[21])
    let lineTrimColor: Int64? = isNullish(__pigeon_list[22]) ? nil : (__pigeon_list[22] is Int64? ? __pigeon_list[22] as! Int64? : Int64(__pigeon_list[22] as! Int32))
    let lineTrimFadeRange: [Double?]? = nilOrValue(__pigeon_list[23])
    let lineTrimOffset: [Double?]? = nilOrValue(__pigeon_list[24])
    let lineWidth: Double? = nilOrValue(__pigeon_list[25])

    return PolylineAnnotationOptions(
      geometry: geometry,
      lineCap: lineCap,
      lineJoin: lineJoin,
      lineMiterLimit: lineMiterLimit,
      lineRoundLimit: lineRoundLimit,
      lineSortKey: lineSortKey,
      lineZOffset: lineZOffset,
      lineBlur: lineBlur,
      lineBorderColor: lineBorderColor,
      lineBorderWidth: lineBorderWidth,
      lineColor: lineColor,
      lineDasharray: lineDasharray,
      lineDepthOcclusionFactor: lineDepthOcclusionFactor,
      lineEmissiveStrength: lineEmissiveStrength,
      lineGapWidth: lineGapWidth,
      lineGradient: lineGradient,
      lineOcclusionOpacity: lineOcclusionOpacity,
      lineOffset: lineOffset,
      lineOpacity: lineOpacity,
      linePattern: linePattern,
      lineTranslate: lineTranslate,
      lineTranslateAnchor: lineTranslateAnchor,
      lineTrimColor: lineTrimColor,
      lineTrimFadeRange: lineTrimFadeRange,
      lineTrimOffset: lineTrimOffset,
      lineWidth: lineWidth
    )
  }
  func toList() -> [Any?] {
    return [
      geometry,
      lineCap,
      lineJoin,
      lineMiterLimit,
      lineRoundLimit,
      lineSortKey,
      lineZOffset,
      lineBlur,
      lineBorderColor,
      lineBorderWidth,
      lineColor,
      lineDasharray,
      lineDepthOcclusionFactor,
      lineEmissiveStrength,
      lineGapWidth,
      lineGradient,
      lineOcclusionOpacity,
      lineOffset,
      lineOpacity,
      linePattern,
      lineTranslate,
      lineTranslateAnchor,
      lineTrimColor,
      lineTrimFadeRange,
      lineTrimOffset,
      lineWidth,
    ]
  }
}
private class PolylineAnnotationMessengerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return LineString.fromList(self.readValue() as! [Any?])
    case 130:
      return PolylineAnnotation.fromList(self.readValue() as! [Any?])
    case 131:
      return PolylineAnnotationOptions.fromList(self.readValue() as! [Any?])
    case 132:
      var enumResult: LineCap?
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = LineCap(rawValue: enumResultAsInt)
      }
      return enumResult
    case 133:
      var enumResult: LineJoin?
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = LineJoin(rawValue: enumResultAsInt)
      }
      return enumResult
    case 134:
      var enumResult: LineTranslateAnchor?
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = LineTranslateAnchor(rawValue: enumResultAsInt)
      }
      return enumResult
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PolylineAnnotationMessengerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LineString {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotation {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotationOptions {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? LineCap {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? LineJoin {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? LineTranslateAnchor {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class PolylineAnnotationMessengerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PolylineAnnotationMessengerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PolylineAnnotationMessengerPigeonCodecWriter(data: data)
  }
}

class PolylineAnnotationMessengerPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PolylineAnnotationMessengerPigeonCodec(readerWriter: PolylineAnnotationMessengerPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol OnPolylineAnnotationClickListenerProtocol {
  func onPolylineAnnotationClick(annotation annotationArg: PolylineAnnotation, completion: @escaping (Result<Void, PolylineAnnotationMessengerError>) -> Void)
}
class OnPolylineAnnotationClickListener: OnPolylineAnnotationClickListenerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PolylineAnnotationMessengerPigeonCodec {
    return PolylineAnnotationMessengerPigeonCodec.shared
  }
  func onPolylineAnnotationClick(annotation annotationArg: PolylineAnnotation, completion: @escaping (Result<Void, PolylineAnnotationMessengerError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.OnPolylineAnnotationClickListener.onPolylineAnnotationClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([annotationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PolylineAnnotationMessengerError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol _PolylineAnnotationMessenger {
  func create(managerId: String, annotationOption: PolylineAnnotationOptions, completion: @escaping (Result<PolylineAnnotation, Error>) -> Void)
  func createMulti(managerId: String, annotationOptions: [PolylineAnnotationOptions], completion: @escaping (Result<[PolylineAnnotation], Error>) -> Void)
  func update(managerId: String, annotation: PolylineAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func delete(managerId: String, annotation: PolylineAnnotation, completion: @escaping (Result<Void, Error>) -> Void)
  func deleteAll(managerId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func setLineCap(managerId: String, lineCap: LineCap, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineCap(managerId: String, completion: @escaping (Result<LineCap?, Error>) -> Void)
  func setLineJoin(managerId: String, lineJoin: LineJoin, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineJoin(managerId: String, completion: @escaping (Result<LineJoin?, Error>) -> Void)
  func setLineMiterLimit(managerId: String, lineMiterLimit: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineMiterLimit(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineRoundLimit(managerId: String, lineRoundLimit: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineRoundLimit(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineSortKey(managerId: String, lineSortKey: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineSortKey(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineZOffset(managerId: String, lineZOffset: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineZOffset(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineBlur(managerId: String, lineBlur: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineBlur(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineBorderColor(managerId: String, lineBorderColor: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineBorderColor(managerId: String, completion: @escaping (Result<Int64?, Error>) -> Void)
  func setLineBorderWidth(managerId: String, lineBorderWidth: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineBorderWidth(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineColor(managerId: String, lineColor: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineColor(managerId: String, completion: @escaping (Result<Int64?, Error>) -> Void)
  func setLineDasharray(managerId: String, lineDasharray: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineDasharray(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineDepthOcclusionFactor(managerId: String, lineDepthOcclusionFactor: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineDepthOcclusionFactor(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineEmissiveStrength(managerId: String, lineEmissiveStrength: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineEmissiveStrength(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineGapWidth(managerId: String, lineGapWidth: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineGapWidth(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineOcclusionOpacity(managerId: String, lineOcclusionOpacity: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineOcclusionOpacity(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineOffset(managerId: String, lineOffset: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineOffset(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLineOpacity(managerId: String, lineOpacity: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineOpacity(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
  func setLinePattern(managerId: String, linePattern: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getLinePattern(managerId: String, completion: @escaping (Result<String?, Error>) -> Void)
  func setLineTranslate(managerId: String, lineTranslate: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTranslate(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineTranslateAnchor(managerId: String, lineTranslateAnchor: LineTranslateAnchor, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTranslateAnchor(managerId: String, completion: @escaping (Result<LineTranslateAnchor?, Error>) -> Void)
  func setLineTrimColor(managerId: String, lineTrimColor: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTrimColor(managerId: String, completion: @escaping (Result<Int64?, Error>) -> Void)
  func setLineTrimFadeRange(managerId: String, lineTrimFadeRange: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTrimFadeRange(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineTrimOffset(managerId: String, lineTrimOffset: [Double?], completion: @escaping (Result<Void, Error>) -> Void)
  func getLineTrimOffset(managerId: String, completion: @escaping (Result<[Double?]?, Error>) -> Void)
  func setLineWidth(managerId: String, lineWidth: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func getLineWidth(managerId: String, completion: @escaping (Result<Double?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class _PolylineAnnotationMessengerSetup {
  static var codec: FlutterStandardMessageCodec { PolylineAnnotationMessengerPigeonCodec.shared }
  /// Sets up an instance of `_PolylineAnnotationMessenger` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: _PolylineAnnotationMessenger?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.create\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionArg = args[1] as! PolylineAnnotationOptions
        api.create(managerId: managerIdArg, annotationOption: annotationOptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let createMultiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.createMulti\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createMultiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationOptionsArg = args[1] as! [PolylineAnnotationOptions]
        api.createMulti(managerId: managerIdArg, annotationOptions: annotationOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createMultiChannel.setMessageHandler(nil)
    }
    let updateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.update\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! PolylineAnnotation
        api.update(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let annotationArg = args[1] as! PolylineAnnotation
        api.delete(managerId: managerIdArg, annotation: annotationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
    let deleteAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.deleteAll\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteAllChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.deleteAll(managerId: managerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteAllChannel.setMessageHandler(nil)
    }
    let setLineCapChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineCap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineCapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineCapArg = args[1] as! LineCap
        api.setLineCap(managerId: managerIdArg, lineCap: lineCapArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineCapChannel.setMessageHandler(nil)
    }
    let getLineCapChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineCap\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineCapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineCap(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineCapChannel.setMessageHandler(nil)
    }
    let setLineJoinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineJoin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineJoinChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineJoinArg = args[1] as! LineJoin
        api.setLineJoin(managerId: managerIdArg, lineJoin: lineJoinArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineJoinChannel.setMessageHandler(nil)
    }
    let getLineJoinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineJoin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineJoinChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineJoin(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineJoinChannel.setMessageHandler(nil)
    }
    let setLineMiterLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineMiterLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineMiterLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineMiterLimitArg = args[1] as! Double
        api.setLineMiterLimit(managerId: managerIdArg, lineMiterLimit: lineMiterLimitArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineMiterLimitChannel.setMessageHandler(nil)
    }
    let getLineMiterLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineMiterLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineMiterLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineMiterLimit(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineMiterLimitChannel.setMessageHandler(nil)
    }
    let setLineRoundLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineRoundLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineRoundLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineRoundLimitArg = args[1] as! Double
        api.setLineRoundLimit(managerId: managerIdArg, lineRoundLimit: lineRoundLimitArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineRoundLimitChannel.setMessageHandler(nil)
    }
    let getLineRoundLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineRoundLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineRoundLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineRoundLimit(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineRoundLimitChannel.setMessageHandler(nil)
    }
    let setLineSortKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineSortKey\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineSortKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineSortKeyArg = args[1] as! Double
        api.setLineSortKey(managerId: managerIdArg, lineSortKey: lineSortKeyArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineSortKeyChannel.setMessageHandler(nil)
    }
    let getLineSortKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineSortKey\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineSortKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineSortKey(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineSortKeyChannel.setMessageHandler(nil)
    }
    let setLineZOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineZOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineZOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineZOffsetArg = args[1] as! Double
        api.setLineZOffset(managerId: managerIdArg, lineZOffset: lineZOffsetArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineZOffsetChannel.setMessageHandler(nil)
    }
    let getLineZOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineZOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineZOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineZOffset(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineZOffsetChannel.setMessageHandler(nil)
    }
    let setLineBlurChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineBlur\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineBlurChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineBlurArg = args[1] as! Double
        api.setLineBlur(managerId: managerIdArg, lineBlur: lineBlurArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineBlurChannel.setMessageHandler(nil)
    }
    let getLineBlurChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineBlur\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineBlurChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineBlur(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineBlurChannel.setMessageHandler(nil)
    }
    let setLineBorderColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineBorderColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineBorderColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineBorderColorArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.setLineBorderColor(managerId: managerIdArg, lineBorderColor: lineBorderColorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineBorderColorChannel.setMessageHandler(nil)
    }
    let getLineBorderColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineBorderColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineBorderColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineBorderColor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineBorderColorChannel.setMessageHandler(nil)
    }
    let setLineBorderWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineBorderWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineBorderWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineBorderWidthArg = args[1] as! Double
        api.setLineBorderWidth(managerId: managerIdArg, lineBorderWidth: lineBorderWidthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineBorderWidthChannel.setMessageHandler(nil)
    }
    let getLineBorderWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineBorderWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineBorderWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineBorderWidth(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineBorderWidthChannel.setMessageHandler(nil)
    }
    let setLineColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineColorArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.setLineColor(managerId: managerIdArg, lineColor: lineColorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineColorChannel.setMessageHandler(nil)
    }
    let getLineColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineColor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineColorChannel.setMessageHandler(nil)
    }
    let setLineDasharrayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineDasharray\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineDasharrayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineDasharrayArg = args[1] as! [Double?]
        api.setLineDasharray(managerId: managerIdArg, lineDasharray: lineDasharrayArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineDasharrayChannel.setMessageHandler(nil)
    }
    let getLineDasharrayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineDasharray\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineDasharrayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineDasharray(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineDasharrayChannel.setMessageHandler(nil)
    }
    let setLineDepthOcclusionFactorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineDepthOcclusionFactor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineDepthOcclusionFactorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineDepthOcclusionFactorArg = args[1] as! Double
        api.setLineDepthOcclusionFactor(managerId: managerIdArg, lineDepthOcclusionFactor: lineDepthOcclusionFactorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineDepthOcclusionFactorChannel.setMessageHandler(nil)
    }
    let getLineDepthOcclusionFactorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineDepthOcclusionFactor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineDepthOcclusionFactorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineDepthOcclusionFactor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineDepthOcclusionFactorChannel.setMessageHandler(nil)
    }
    let setLineEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineEmissiveStrengthArg = args[1] as! Double
        api.setLineEmissiveStrength(managerId: managerIdArg, lineEmissiveStrength: lineEmissiveStrengthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let getLineEmissiveStrengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineEmissiveStrength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineEmissiveStrengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineEmissiveStrength(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineEmissiveStrengthChannel.setMessageHandler(nil)
    }
    let setLineGapWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineGapWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineGapWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineGapWidthArg = args[1] as! Double
        api.setLineGapWidth(managerId: managerIdArg, lineGapWidth: lineGapWidthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineGapWidthChannel.setMessageHandler(nil)
    }
    let getLineGapWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineGapWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineGapWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineGapWidth(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineGapWidthChannel.setMessageHandler(nil)
    }
    let setLineOcclusionOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineOcclusionOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineOcclusionOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineOcclusionOpacityArg = args[1] as! Double
        api.setLineOcclusionOpacity(managerId: managerIdArg, lineOcclusionOpacity: lineOcclusionOpacityArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineOcclusionOpacityChannel.setMessageHandler(nil)
    }
    let getLineOcclusionOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineOcclusionOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineOcclusionOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineOcclusionOpacity(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineOcclusionOpacityChannel.setMessageHandler(nil)
    }
    let setLineOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineOffsetArg = args[1] as! Double
        api.setLineOffset(managerId: managerIdArg, lineOffset: lineOffsetArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineOffsetChannel.setMessageHandler(nil)
    }
    let getLineOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineOffset(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineOffsetChannel.setMessageHandler(nil)
    }
    let setLineOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineOpacityArg = args[1] as! Double
        api.setLineOpacity(managerId: managerIdArg, lineOpacity: lineOpacityArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineOpacityChannel.setMessageHandler(nil)
    }
    let getLineOpacityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineOpacity\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineOpacityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineOpacity(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineOpacityChannel.setMessageHandler(nil)
    }
    let setLinePatternChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLinePattern\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLinePatternChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let linePatternArg = args[1] as! String
        api.setLinePattern(managerId: managerIdArg, linePattern: linePatternArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLinePatternChannel.setMessageHandler(nil)
    }
    let getLinePatternChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLinePattern\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLinePatternChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLinePattern(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLinePatternChannel.setMessageHandler(nil)
    }
    let setLineTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTranslateArg = args[1] as! [Double?]
        api.setLineTranslate(managerId: managerIdArg, lineTranslate: lineTranslateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTranslateChannel.setMessageHandler(nil)
    }
    let getLineTranslateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTranslate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTranslateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTranslate(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTranslateChannel.setMessageHandler(nil)
    }
    let setLineTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTranslateAnchorArg = args[1] as! LineTranslateAnchor
        api.setLineTranslateAnchor(managerId: managerIdArg, lineTranslateAnchor: lineTranslateAnchorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTranslateAnchorChannel.setMessageHandler(nil)
    }
    let getLineTranslateAnchorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTranslateAnchor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTranslateAnchorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTranslateAnchor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTranslateAnchorChannel.setMessageHandler(nil)
    }
    let setLineTrimColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTrimColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTrimColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTrimColorArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.setLineTrimColor(managerId: managerIdArg, lineTrimColor: lineTrimColorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTrimColorChannel.setMessageHandler(nil)
    }
    let getLineTrimColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTrimColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTrimColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTrimColor(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTrimColorChannel.setMessageHandler(nil)
    }
    let setLineTrimFadeRangeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTrimFadeRange\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTrimFadeRangeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTrimFadeRangeArg = args[1] as! [Double?]
        api.setLineTrimFadeRange(managerId: managerIdArg, lineTrimFadeRange: lineTrimFadeRangeArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTrimFadeRangeChannel.setMessageHandler(nil)
    }
    let getLineTrimFadeRangeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTrimFadeRange\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTrimFadeRangeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTrimFadeRange(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTrimFadeRangeChannel.setMessageHandler(nil)
    }
    let setLineTrimOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineTrimOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineTrimOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineTrimOffsetArg = args[1] as! [Double?]
        api.setLineTrimOffset(managerId: managerIdArg, lineTrimOffset: lineTrimOffsetArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineTrimOffsetChannel.setMessageHandler(nil)
    }
    let getLineTrimOffsetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineTrimOffset\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineTrimOffsetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineTrimOffset(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineTrimOffsetChannel.setMessageHandler(nil)
    }
    let setLineWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.setLineWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLineWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        let lineWidthArg = args[1] as! Double
        api.setLineWidth(managerId: managerIdArg, lineWidth: lineWidthArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLineWidthChannel.setMessageHandler(nil)
    }
    let getLineWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter._PolylineAnnotationMessenger.getLineWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLineWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let managerIdArg = args[0] as! String
        api.getLineWidth(managerId: managerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLineWidthChannel.setMessageHandler(nil)
    }
  }
}
