// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, FLT_LOGGINGLoggingLevel) {
  /// Verbose log data to understand how the code executes.
  FLT_LOGGINGLoggingLevelDebug = 0,
  /// Logs related to normal application behavior.
  FLT_LOGGINGLoggingLevelInfo = 1,
  /// To log a situation that might be a problem, or an unusual situation.
  FLT_LOGGINGLoggingLevelWarning = 2,
  /// A log message providing information when a significant error occurred
  FLT_LOGGINGLoggingLevelError = 3,
};

/// Wrapper for FLT_LOGGINGLoggingLevel to allow for nullability.
@interface FLT_LOGGINGLoggingLevelBox : NSObject
@property(nonatomic, assign) FLT_LOGGINGLoggingLevel value;
- (instancetype)initWithValue:(FLT_LOGGINGLoggingLevel)value;
@end


/// The codec used by FLT_LOGGINGLogWriterBackend.
NSObject<FlutterMessageCodec> *FLT_LOGGINGLogWriterBackendGetCodec(void);

/// An interface for implementing log writing backends, e.g. for using platform specific log backends or logging to a notification service.
@interface FLT_LOGGINGLogWriterBackend : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// Writes a log message with a given level.
- (void)writeLogLevel:(FLT_LOGGINGLoggingLevel)level message:(NSString *)message completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
