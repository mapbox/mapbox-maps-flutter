// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// Controls the frame of reference for `fill-translate`.
typedef NS_ENUM(NSUInteger, FLTFillTranslateAnchor) {
  /// The fill is translated relative to the map.
  FLTFillTranslateAnchorMAP = 0,
  /// The fill is translated relative to the viewport.
  FLTFillTranslateAnchorVIEWPORT = 1,
};

/// Wrapper for FLTFillTranslateAnchor to allow for nullability.
@interface FLTFillTranslateAnchorBox : NSObject
@property(nonatomic, assign) FLTFillTranslateAnchor value;
- (instancetype)initWithValue:(FLTFillTranslateAnchor)value;
@end

@class FLTPolygonAnnotation;
@class FLTPolygonAnnotationOptions;

@interface FLTPolygonAnnotation : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry
    fillSortKey:(nullable NSNumber *)fillSortKey
    fillColor:(nullable NSNumber *)fillColor
    fillOpacity:(nullable NSNumber *)fillOpacity
    fillOutlineColor:(nullable NSNumber *)fillOutlineColor
    fillPattern:(nullable NSString *)fillPattern;
/// The id for annotation
@property(nonatomic, copy) NSString * id;
/// The geometry that determines the location/shape of this annotation
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * geometry;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property(nonatomic, strong, nullable) NSNumber * fillSortKey;
/// The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
@property(nonatomic, strong, nullable) NSNumber * fillColor;
/// The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property(nonatomic, strong, nullable) NSNumber * fillOpacity;
/// The outline color of the fill. Matches the value of `fill-color` if unspecified.
@property(nonatomic, strong, nullable) NSNumber * fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property(nonatomic, copy, nullable) NSString * fillPattern;
@end

@interface FLTPolygonAnnotationOptions : NSObject
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry
    fillSortKey:(nullable NSNumber *)fillSortKey
    fillColor:(nullable NSNumber *)fillColor
    fillOpacity:(nullable NSNumber *)fillOpacity
    fillOutlineColor:(nullable NSNumber *)fillOutlineColor
    fillPattern:(nullable NSString *)fillPattern;
/// The geometry that determines the location/shape of this annotation
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * geometry;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property(nonatomic, strong, nullable) NSNumber * fillSortKey;
/// The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
@property(nonatomic, strong, nullable) NSNumber * fillColor;
/// The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property(nonatomic, strong, nullable) NSNumber * fillOpacity;
/// The outline color of the fill. Matches the value of `fill-color` if unspecified.
@property(nonatomic, strong, nullable) NSNumber * fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property(nonatomic, copy, nullable) NSString * fillPattern;
@end

/// The codec used by FLTOnPolygonAnnotationClickListener.
NSObject<FlutterMessageCodec> *FLTOnPolygonAnnotationClickListenerGetCodec(void);

@interface FLTOnPolygonAnnotationClickListener : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onPolygonAnnotationClickAnnotation:(FLTPolygonAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by FLT_PolygonAnnotationMessager.
NSObject<FlutterMessageCodec> *FLT_PolygonAnnotationMessagerGetCodec(void);

@protocol FLT_PolygonAnnotationMessager
- (void)createManagerId:(NSString *)managerId annotationOption:(FLTPolygonAnnotationOptions *)annotationOption completion:(void (^)(FLTPolygonAnnotation *_Nullable, FlutterError *_Nullable))completion;
- (void)createMultiManagerId:(NSString *)managerId annotationOptions:(NSArray<FLTPolygonAnnotationOptions *> *)annotationOptions completion:(void (^)(NSArray<FLTPolygonAnnotation *> *_Nullable, FlutterError *_Nullable))completion;
- (void)updateManagerId:(NSString *)managerId annotation:(FLTPolygonAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
- (void)deleteManagerId:(NSString *)managerId annotation:(FLTPolygonAnnotation *)annotation completion:(void (^)(FlutterError *_Nullable))completion;
- (void)deleteAllManagerId:(NSString *)managerId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setFillAntialiasManagerId:(NSString *)managerId fillAntialias:(BOOL)fillAntialias completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getFillAntialiasManagerId:(NSString *)managerId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)setFillEmissiveStrengthManagerId:(NSString *)managerId fillEmissiveStrength:(double)fillEmissiveStrength completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getFillEmissiveStrengthManagerId:(NSString *)managerId completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)setFillTranslateManagerId:(NSString *)managerId fillTranslate:(NSArray<NSNumber *> *)fillTranslate completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getFillTranslateManagerId:(NSString *)managerId completion:(void (^)(NSArray<NSNumber *> *_Nullable, FlutterError *_Nullable))completion;
- (void)setFillTranslateAnchorManagerId:(NSString *)managerId fillTranslateAnchor:(FLTFillTranslateAnchor)fillTranslateAnchor completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getFillTranslateAnchorManagerId:(NSString *)managerId completion:(void (^)(FLTFillTranslateAnchorBox *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpFLT_PolygonAnnotationMessager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_PolygonAnnotationMessager> *_Nullable api);

NS_ASSUME_NONNULL_END
