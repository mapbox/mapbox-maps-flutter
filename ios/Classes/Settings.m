// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Settings.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation FLT_SETTINGSOrnamentPositionBox
- (instancetype)initWithValue:(FLT_SETTINGSOrnamentPosition)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Configures the directions in which the map is allowed to move during a scroll gesture.
@implementation FLT_SETTINGSScrollModeBox
- (instancetype)initWithValue:(FLT_SETTINGSScrollMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// The enum controls how the puck is oriented
@implementation FLT_SETTINGSPuckBearingBox
- (instancetype)initWithValue:(FLT_SETTINGSPuckBearing)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Defines scaling mode. Only applies to location-indicator type layers.
@implementation FLT_SETTINGSModelScaleModeBox
- (instancetype)initWithValue:(FLT_SETTINGSModelScaleMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface FLT_SETTINGSScreenCoordinate ()
+ (FLT_SETTINGSScreenCoordinate *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSScreenCoordinate *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSGesturesSettings ()
+ (FLT_SETTINGSGesturesSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSGesturesSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSLocationPuck2D ()
+ (FLT_SETTINGSLocationPuck2D *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSLocationPuck2D *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSLocationPuck3D ()
+ (FLT_SETTINGSLocationPuck3D *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSLocationPuck3D *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSLocationPuck ()
+ (FLT_SETTINGSLocationPuck *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSLocationPuck *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSLocationComponentSettings ()
+ (FLT_SETTINGSLocationComponentSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSLocationComponentSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSScaleBarSettings ()
+ (FLT_SETTINGSScaleBarSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSScaleBarSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSCompassSettings ()
+ (FLT_SETTINGSCompassSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSCompassSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSAttributionSettings ()
+ (FLT_SETTINGSAttributionSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSAttributionSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLT_SETTINGSLogoSettings ()
+ (FLT_SETTINGSLogoSettings *)fromList:(NSArray *)list;
+ (nullable FLT_SETTINGSLogoSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLT_SETTINGSScreenCoordinate
+ (instancetype)makeWithX:(double )x
    y:(double )y {
  FLT_SETTINGSScreenCoordinate* pigeonResult = [[FLT_SETTINGSScreenCoordinate alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  return pigeonResult;
}
+ (FLT_SETTINGSScreenCoordinate *)fromList:(NSArray *)list {
  FLT_SETTINGSScreenCoordinate *pigeonResult = [[FLT_SETTINGSScreenCoordinate alloc] init];
  pigeonResult.x = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.y = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLT_SETTINGSScreenCoordinate *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSScreenCoordinate fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.x),
    @(self.y),
  ];
}
@end

@implementation FLT_SETTINGSGesturesSettings
+ (instancetype)makeWithRotateEnabled:(nullable NSNumber *)rotateEnabled
    pinchToZoomEnabled:(nullable NSNumber *)pinchToZoomEnabled
    scrollEnabled:(nullable NSNumber *)scrollEnabled
    simultaneousRotateAndPinchToZoomEnabled:(nullable NSNumber *)simultaneousRotateAndPinchToZoomEnabled
    pitchEnabled:(nullable NSNumber *)pitchEnabled
    scrollMode:(nullable FLT_SETTINGSScrollModeBox *)scrollMode
    doubleTapToZoomInEnabled:(nullable NSNumber *)doubleTapToZoomInEnabled
    doubleTouchToZoomOutEnabled:(nullable NSNumber *)doubleTouchToZoomOutEnabled
    quickZoomEnabled:(nullable NSNumber *)quickZoomEnabled
    focalPoint:(nullable FLT_SETTINGSScreenCoordinate *)focalPoint
    pinchToZoomDecelerationEnabled:(nullable NSNumber *)pinchToZoomDecelerationEnabled
    rotateDecelerationEnabled:(nullable NSNumber *)rotateDecelerationEnabled
    scrollDecelerationEnabled:(nullable NSNumber *)scrollDecelerationEnabled
    increaseRotateThresholdWhenPinchingToZoom:(nullable NSNumber *)increaseRotateThresholdWhenPinchingToZoom
    increasePinchToZoomThresholdWhenRotating:(nullable NSNumber *)increasePinchToZoomThresholdWhenRotating
    zoomAnimationAmount:(nullable NSNumber *)zoomAnimationAmount
    pinchPanEnabled:(nullable NSNumber *)pinchPanEnabled {
  FLT_SETTINGSGesturesSettings* pigeonResult = [[FLT_SETTINGSGesturesSettings alloc] init];
  pigeonResult.rotateEnabled = rotateEnabled;
  pigeonResult.pinchToZoomEnabled = pinchToZoomEnabled;
  pigeonResult.scrollEnabled = scrollEnabled;
  pigeonResult.simultaneousRotateAndPinchToZoomEnabled = simultaneousRotateAndPinchToZoomEnabled;
  pigeonResult.pitchEnabled = pitchEnabled;
  pigeonResult.scrollMode = scrollMode;
  pigeonResult.doubleTapToZoomInEnabled = doubleTapToZoomInEnabled;
  pigeonResult.doubleTouchToZoomOutEnabled = doubleTouchToZoomOutEnabled;
  pigeonResult.quickZoomEnabled = quickZoomEnabled;
  pigeonResult.focalPoint = focalPoint;
  pigeonResult.pinchToZoomDecelerationEnabled = pinchToZoomDecelerationEnabled;
  pigeonResult.rotateDecelerationEnabled = rotateDecelerationEnabled;
  pigeonResult.scrollDecelerationEnabled = scrollDecelerationEnabled;
  pigeonResult.increaseRotateThresholdWhenPinchingToZoom = increaseRotateThresholdWhenPinchingToZoom;
  pigeonResult.increasePinchToZoomThresholdWhenRotating = increasePinchToZoomThresholdWhenRotating;
  pigeonResult.zoomAnimationAmount = zoomAnimationAmount;
  pigeonResult.pinchPanEnabled = pinchPanEnabled;
  return pigeonResult;
}
+ (FLT_SETTINGSGesturesSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSGesturesSettings *pigeonResult = [[FLT_SETTINGSGesturesSettings alloc] init];
  pigeonResult.rotateEnabled = GetNullableObjectAtIndex(list, 0);
  pigeonResult.pinchToZoomEnabled = GetNullableObjectAtIndex(list, 1);
  pigeonResult.scrollEnabled = GetNullableObjectAtIndex(list, 2);
  pigeonResult.simultaneousRotateAndPinchToZoomEnabled = GetNullableObjectAtIndex(list, 3);
  pigeonResult.pitchEnabled = GetNullableObjectAtIndex(list, 4);
  NSNumber *scrollModeAsNumber = GetNullableObjectAtIndex(list, 5);
  FLT_SETTINGSScrollModeBox *scrollMode = scrollModeAsNumber == nil ? nil : [[FLT_SETTINGSScrollModeBox alloc] initWithValue:[scrollModeAsNumber integerValue]];
  pigeonResult.scrollMode = scrollMode;
  pigeonResult.doubleTapToZoomInEnabled = GetNullableObjectAtIndex(list, 6);
  pigeonResult.doubleTouchToZoomOutEnabled = GetNullableObjectAtIndex(list, 7);
  pigeonResult.quickZoomEnabled = GetNullableObjectAtIndex(list, 8);
  pigeonResult.focalPoint = [FLT_SETTINGSScreenCoordinate nullableFromList:(GetNullableObjectAtIndex(list, 9))];
  pigeonResult.pinchToZoomDecelerationEnabled = GetNullableObjectAtIndex(list, 10);
  pigeonResult.rotateDecelerationEnabled = GetNullableObjectAtIndex(list, 11);
  pigeonResult.scrollDecelerationEnabled = GetNullableObjectAtIndex(list, 12);
  pigeonResult.increaseRotateThresholdWhenPinchingToZoom = GetNullableObjectAtIndex(list, 13);
  pigeonResult.increasePinchToZoomThresholdWhenRotating = GetNullableObjectAtIndex(list, 14);
  pigeonResult.zoomAnimationAmount = GetNullableObjectAtIndex(list, 15);
  pigeonResult.pinchPanEnabled = GetNullableObjectAtIndex(list, 16);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSGesturesSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSGesturesSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.rotateEnabled ?: [NSNull null],
    self.pinchToZoomEnabled ?: [NSNull null],
    self.scrollEnabled ?: [NSNull null],
    self.simultaneousRotateAndPinchToZoomEnabled ?: [NSNull null],
    self.pitchEnabled ?: [NSNull null],
    (self.scrollMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.scrollMode.value]),
    self.doubleTapToZoomInEnabled ?: [NSNull null],
    self.doubleTouchToZoomOutEnabled ?: [NSNull null],
    self.quickZoomEnabled ?: [NSNull null],
    (self.focalPoint ? [self.focalPoint toList] : [NSNull null]),
    self.pinchToZoomDecelerationEnabled ?: [NSNull null],
    self.rotateDecelerationEnabled ?: [NSNull null],
    self.scrollDecelerationEnabled ?: [NSNull null],
    self.increaseRotateThresholdWhenPinchingToZoom ?: [NSNull null],
    self.increasePinchToZoomThresholdWhenRotating ?: [NSNull null],
    self.zoomAnimationAmount ?: [NSNull null],
    self.pinchPanEnabled ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSLocationPuck2D
+ (instancetype)makeWithTopImage:(nullable FlutterStandardTypedData *)topImage
    bearingImage:(nullable FlutterStandardTypedData *)bearingImage
    shadowImage:(nullable FlutterStandardTypedData *)shadowImage
    scaleExpression:(nullable NSString *)scaleExpression
    opacity:(nullable NSNumber *)opacity {
  FLT_SETTINGSLocationPuck2D* pigeonResult = [[FLT_SETTINGSLocationPuck2D alloc] init];
  pigeonResult.topImage = topImage;
  pigeonResult.bearingImage = bearingImage;
  pigeonResult.shadowImage = shadowImage;
  pigeonResult.scaleExpression = scaleExpression;
  pigeonResult.opacity = opacity;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck2D *)fromList:(NSArray *)list {
  FLT_SETTINGSLocationPuck2D *pigeonResult = [[FLT_SETTINGSLocationPuck2D alloc] init];
  pigeonResult.topImage = GetNullableObjectAtIndex(list, 0);
  pigeonResult.bearingImage = GetNullableObjectAtIndex(list, 1);
  pigeonResult.shadowImage = GetNullableObjectAtIndex(list, 2);
  pigeonResult.scaleExpression = GetNullableObjectAtIndex(list, 3);
  pigeonResult.opacity = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck2D *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSLocationPuck2D fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.topImage ?: [NSNull null],
    self.bearingImage ?: [NSNull null],
    self.shadowImage ?: [NSNull null],
    self.scaleExpression ?: [NSNull null],
    self.opacity ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSLocationPuck3D
+ (instancetype)makeWithModelUri:(nullable NSString *)modelUri
    position:(nullable NSArray<NSNumber *> *)position
    modelOpacity:(nullable NSNumber *)modelOpacity
    modelScale:(nullable NSArray<NSNumber *> *)modelScale
    modelScaleExpression:(nullable NSString *)modelScaleExpression
    modelTranslation:(nullable NSArray<NSNumber *> *)modelTranslation
    modelRotation:(nullable NSArray<NSNumber *> *)modelRotation
    modelCastShadows:(nullable NSNumber *)modelCastShadows
    modelReceiveShadows:(nullable NSNumber *)modelReceiveShadows
    modelScaleMode:(nullable FLT_SETTINGSModelScaleModeBox *)modelScaleMode
    modelEmissiveStrength:(nullable NSNumber *)modelEmissiveStrength
    modelEmissiveStrengthExpression:(nullable NSString *)modelEmissiveStrengthExpression {
  FLT_SETTINGSLocationPuck3D* pigeonResult = [[FLT_SETTINGSLocationPuck3D alloc] init];
  pigeonResult.modelUri = modelUri;
  pigeonResult.position = position;
  pigeonResult.modelOpacity = modelOpacity;
  pigeonResult.modelScale = modelScale;
  pigeonResult.modelScaleExpression = modelScaleExpression;
  pigeonResult.modelTranslation = modelTranslation;
  pigeonResult.modelRotation = modelRotation;
  pigeonResult.modelCastShadows = modelCastShadows;
  pigeonResult.modelReceiveShadows = modelReceiveShadows;
  pigeonResult.modelScaleMode = modelScaleMode;
  pigeonResult.modelEmissiveStrength = modelEmissiveStrength;
  pigeonResult.modelEmissiveStrengthExpression = modelEmissiveStrengthExpression;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck3D *)fromList:(NSArray *)list {
  FLT_SETTINGSLocationPuck3D *pigeonResult = [[FLT_SETTINGSLocationPuck3D alloc] init];
  pigeonResult.modelUri = GetNullableObjectAtIndex(list, 0);
  pigeonResult.position = GetNullableObjectAtIndex(list, 1);
  pigeonResult.modelOpacity = GetNullableObjectAtIndex(list, 2);
  pigeonResult.modelScale = GetNullableObjectAtIndex(list, 3);
  pigeonResult.modelScaleExpression = GetNullableObjectAtIndex(list, 4);
  pigeonResult.modelTranslation = GetNullableObjectAtIndex(list, 5);
  pigeonResult.modelRotation = GetNullableObjectAtIndex(list, 6);
  pigeonResult.modelCastShadows = GetNullableObjectAtIndex(list, 7);
  pigeonResult.modelReceiveShadows = GetNullableObjectAtIndex(list, 8);
  NSNumber *modelScaleModeAsNumber = GetNullableObjectAtIndex(list, 9);
  FLT_SETTINGSModelScaleModeBox *modelScaleMode = modelScaleModeAsNumber == nil ? nil : [[FLT_SETTINGSModelScaleModeBox alloc] initWithValue:[modelScaleModeAsNumber integerValue]];
  pigeonResult.modelScaleMode = modelScaleMode;
  pigeonResult.modelEmissiveStrength = GetNullableObjectAtIndex(list, 10);
  pigeonResult.modelEmissiveStrengthExpression = GetNullableObjectAtIndex(list, 11);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck3D *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSLocationPuck3D fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.modelUri ?: [NSNull null],
    self.position ?: [NSNull null],
    self.modelOpacity ?: [NSNull null],
    self.modelScale ?: [NSNull null],
    self.modelScaleExpression ?: [NSNull null],
    self.modelTranslation ?: [NSNull null],
    self.modelRotation ?: [NSNull null],
    self.modelCastShadows ?: [NSNull null],
    self.modelReceiveShadows ?: [NSNull null],
    (self.modelScaleMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.modelScaleMode.value]),
    self.modelEmissiveStrength ?: [NSNull null],
    self.modelEmissiveStrengthExpression ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSLocationPuck
+ (instancetype)makeWithLocationPuck2D:(nullable FLT_SETTINGSLocationPuck2D *)locationPuck2D
    locationPuck3D:(nullable FLT_SETTINGSLocationPuck3D *)locationPuck3D {
  FLT_SETTINGSLocationPuck* pigeonResult = [[FLT_SETTINGSLocationPuck alloc] init];
  pigeonResult.locationPuck2D = locationPuck2D;
  pigeonResult.locationPuck3D = locationPuck3D;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck *)fromList:(NSArray *)list {
  FLT_SETTINGSLocationPuck *pigeonResult = [[FLT_SETTINGSLocationPuck alloc] init];
  pigeonResult.locationPuck2D = [FLT_SETTINGSLocationPuck2D nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.locationPuck3D = [FLT_SETTINGSLocationPuck3D nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSLocationPuck fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.locationPuck2D ? [self.locationPuck2D toList] : [NSNull null]),
    (self.locationPuck3D ? [self.locationPuck3D toList] : [NSNull null]),
  ];
}
@end

@implementation FLT_SETTINGSLocationComponentSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    pulsingEnabled:(nullable NSNumber *)pulsingEnabled
    pulsingColor:(nullable NSNumber *)pulsingColor
    pulsingMaxRadius:(nullable NSNumber *)pulsingMaxRadius
    showAccuracyRing:(nullable NSNumber *)showAccuracyRing
    accuracyRingColor:(nullable NSNumber *)accuracyRingColor
    accuracyRingBorderColor:(nullable NSNumber *)accuracyRingBorderColor
    layerAbove:(nullable NSString *)layerAbove
    layerBelow:(nullable NSString *)layerBelow
    puckBearingEnabled:(nullable NSNumber *)puckBearingEnabled
    puckBearing:(nullable FLT_SETTINGSPuckBearingBox *)puckBearing
    locationPuck:(nullable FLT_SETTINGSLocationPuck *)locationPuck {
  FLT_SETTINGSLocationComponentSettings* pigeonResult = [[FLT_SETTINGSLocationComponentSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.pulsingEnabled = pulsingEnabled;
  pigeonResult.pulsingColor = pulsingColor;
  pigeonResult.pulsingMaxRadius = pulsingMaxRadius;
  pigeonResult.showAccuracyRing = showAccuracyRing;
  pigeonResult.accuracyRingColor = accuracyRingColor;
  pigeonResult.accuracyRingBorderColor = accuracyRingBorderColor;
  pigeonResult.layerAbove = layerAbove;
  pigeonResult.layerBelow = layerBelow;
  pigeonResult.puckBearingEnabled = puckBearingEnabled;
  pigeonResult.puckBearing = puckBearing;
  pigeonResult.locationPuck = locationPuck;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationComponentSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSLocationComponentSettings *pigeonResult = [[FLT_SETTINGSLocationComponentSettings alloc] init];
  pigeonResult.enabled = GetNullableObjectAtIndex(list, 0);
  pigeonResult.pulsingEnabled = GetNullableObjectAtIndex(list, 1);
  pigeonResult.pulsingColor = GetNullableObjectAtIndex(list, 2);
  pigeonResult.pulsingMaxRadius = GetNullableObjectAtIndex(list, 3);
  pigeonResult.showAccuracyRing = GetNullableObjectAtIndex(list, 4);
  pigeonResult.accuracyRingColor = GetNullableObjectAtIndex(list, 5);
  pigeonResult.accuracyRingBorderColor = GetNullableObjectAtIndex(list, 6);
  pigeonResult.layerAbove = GetNullableObjectAtIndex(list, 7);
  pigeonResult.layerBelow = GetNullableObjectAtIndex(list, 8);
  pigeonResult.puckBearingEnabled = GetNullableObjectAtIndex(list, 9);
  NSNumber *puckBearingAsNumber = GetNullableObjectAtIndex(list, 10);
  FLT_SETTINGSPuckBearingBox *puckBearing = puckBearingAsNumber == nil ? nil : [[FLT_SETTINGSPuckBearingBox alloc] initWithValue:[puckBearingAsNumber integerValue]];
  pigeonResult.puckBearing = puckBearing;
  pigeonResult.locationPuck = [FLT_SETTINGSLocationPuck nullableFromList:(GetNullableObjectAtIndex(list, 11))];
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationComponentSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSLocationComponentSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.enabled ?: [NSNull null],
    self.pulsingEnabled ?: [NSNull null],
    self.pulsingColor ?: [NSNull null],
    self.pulsingMaxRadius ?: [NSNull null],
    self.showAccuracyRing ?: [NSNull null],
    self.accuracyRingColor ?: [NSNull null],
    self.accuracyRingBorderColor ?: [NSNull null],
    self.layerAbove ?: [NSNull null],
    self.layerBelow ?: [NSNull null],
    self.puckBearingEnabled ?: [NSNull null],
    (self.puckBearing == nil ? [NSNull null] : [NSNumber numberWithInteger:self.puckBearing.value]),
    (self.locationPuck ? [self.locationPuck toList] : [NSNull null]),
  ];
}
@end

@implementation FLT_SETTINGSScaleBarSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    position:(nullable FLT_SETTINGSOrnamentPositionBox *)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    textColor:(nullable NSNumber *)textColor
    primaryColor:(nullable NSNumber *)primaryColor
    secondaryColor:(nullable NSNumber *)secondaryColor
    borderWidth:(nullable NSNumber *)borderWidth
    height:(nullable NSNumber *)height
    textBarMargin:(nullable NSNumber *)textBarMargin
    textBorderWidth:(nullable NSNumber *)textBorderWidth
    textSize:(nullable NSNumber *)textSize
    isMetricUnits:(nullable NSNumber *)isMetricUnits
    refreshInterval:(nullable NSNumber *)refreshInterval
    showTextBorder:(nullable NSNumber *)showTextBorder
    ratio:(nullable NSNumber *)ratio
    useContinuousRendering:(nullable NSNumber *)useContinuousRendering {
  FLT_SETTINGSScaleBarSettings* pigeonResult = [[FLT_SETTINGSScaleBarSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.textColor = textColor;
  pigeonResult.primaryColor = primaryColor;
  pigeonResult.secondaryColor = secondaryColor;
  pigeonResult.borderWidth = borderWidth;
  pigeonResult.height = height;
  pigeonResult.textBarMargin = textBarMargin;
  pigeonResult.textBorderWidth = textBorderWidth;
  pigeonResult.textSize = textSize;
  pigeonResult.isMetricUnits = isMetricUnits;
  pigeonResult.refreshInterval = refreshInterval;
  pigeonResult.showTextBorder = showTextBorder;
  pigeonResult.ratio = ratio;
  pigeonResult.useContinuousRendering = useContinuousRendering;
  return pigeonResult;
}
+ (FLT_SETTINGSScaleBarSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSScaleBarSettings *pigeonResult = [[FLT_SETTINGSScaleBarSettings alloc] init];
  pigeonResult.enabled = GetNullableObjectAtIndex(list, 0);
  NSNumber *positionAsNumber = GetNullableObjectAtIndex(list, 1);
  FLT_SETTINGSOrnamentPositionBox *position = positionAsNumber == nil ? nil : [[FLT_SETTINGSOrnamentPositionBox alloc] initWithValue:[positionAsNumber integerValue]];
  pigeonResult.position = position;
  pigeonResult.marginLeft = GetNullableObjectAtIndex(list, 2);
  pigeonResult.marginTop = GetNullableObjectAtIndex(list, 3);
  pigeonResult.marginRight = GetNullableObjectAtIndex(list, 4);
  pigeonResult.marginBottom = GetNullableObjectAtIndex(list, 5);
  pigeonResult.textColor = GetNullableObjectAtIndex(list, 6);
  pigeonResult.primaryColor = GetNullableObjectAtIndex(list, 7);
  pigeonResult.secondaryColor = GetNullableObjectAtIndex(list, 8);
  pigeonResult.borderWidth = GetNullableObjectAtIndex(list, 9);
  pigeonResult.height = GetNullableObjectAtIndex(list, 10);
  pigeonResult.textBarMargin = GetNullableObjectAtIndex(list, 11);
  pigeonResult.textBorderWidth = GetNullableObjectAtIndex(list, 12);
  pigeonResult.textSize = GetNullableObjectAtIndex(list, 13);
  pigeonResult.isMetricUnits = GetNullableObjectAtIndex(list, 14);
  pigeonResult.refreshInterval = GetNullableObjectAtIndex(list, 15);
  pigeonResult.showTextBorder = GetNullableObjectAtIndex(list, 16);
  pigeonResult.ratio = GetNullableObjectAtIndex(list, 17);
  pigeonResult.useContinuousRendering = GetNullableObjectAtIndex(list, 18);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSScaleBarSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSScaleBarSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.enabled ?: [NSNull null],
    (self.position == nil ? [NSNull null] : [NSNumber numberWithInteger:self.position.value]),
    self.marginLeft ?: [NSNull null],
    self.marginTop ?: [NSNull null],
    self.marginRight ?: [NSNull null],
    self.marginBottom ?: [NSNull null],
    self.textColor ?: [NSNull null],
    self.primaryColor ?: [NSNull null],
    self.secondaryColor ?: [NSNull null],
    self.borderWidth ?: [NSNull null],
    self.height ?: [NSNull null],
    self.textBarMargin ?: [NSNull null],
    self.textBorderWidth ?: [NSNull null],
    self.textSize ?: [NSNull null],
    self.isMetricUnits ?: [NSNull null],
    self.refreshInterval ?: [NSNull null],
    self.showTextBorder ?: [NSNull null],
    self.ratio ?: [NSNull null],
    self.useContinuousRendering ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSCompassSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    position:(nullable FLT_SETTINGSOrnamentPositionBox *)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    opacity:(nullable NSNumber *)opacity
    rotation:(nullable NSNumber *)rotation
    visibility:(nullable NSNumber *)visibility
    fadeWhenFacingNorth:(nullable NSNumber *)fadeWhenFacingNorth
    clickable:(nullable NSNumber *)clickable
    image:(nullable FlutterStandardTypedData *)image {
  FLT_SETTINGSCompassSettings* pigeonResult = [[FLT_SETTINGSCompassSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.opacity = opacity;
  pigeonResult.rotation = rotation;
  pigeonResult.visibility = visibility;
  pigeonResult.fadeWhenFacingNorth = fadeWhenFacingNorth;
  pigeonResult.clickable = clickable;
  pigeonResult.image = image;
  return pigeonResult;
}
+ (FLT_SETTINGSCompassSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSCompassSettings *pigeonResult = [[FLT_SETTINGSCompassSettings alloc] init];
  pigeonResult.enabled = GetNullableObjectAtIndex(list, 0);
  NSNumber *positionAsNumber = GetNullableObjectAtIndex(list, 1);
  FLT_SETTINGSOrnamentPositionBox *position = positionAsNumber == nil ? nil : [[FLT_SETTINGSOrnamentPositionBox alloc] initWithValue:[positionAsNumber integerValue]];
  pigeonResult.position = position;
  pigeonResult.marginLeft = GetNullableObjectAtIndex(list, 2);
  pigeonResult.marginTop = GetNullableObjectAtIndex(list, 3);
  pigeonResult.marginRight = GetNullableObjectAtIndex(list, 4);
  pigeonResult.marginBottom = GetNullableObjectAtIndex(list, 5);
  pigeonResult.opacity = GetNullableObjectAtIndex(list, 6);
  pigeonResult.rotation = GetNullableObjectAtIndex(list, 7);
  pigeonResult.visibility = GetNullableObjectAtIndex(list, 8);
  pigeonResult.fadeWhenFacingNorth = GetNullableObjectAtIndex(list, 9);
  pigeonResult.clickable = GetNullableObjectAtIndex(list, 10);
  pigeonResult.image = GetNullableObjectAtIndex(list, 11);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSCompassSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSCompassSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.enabled ?: [NSNull null],
    (self.position == nil ? [NSNull null] : [NSNumber numberWithInteger:self.position.value]),
    self.marginLeft ?: [NSNull null],
    self.marginTop ?: [NSNull null],
    self.marginRight ?: [NSNull null],
    self.marginBottom ?: [NSNull null],
    self.opacity ?: [NSNull null],
    self.rotation ?: [NSNull null],
    self.visibility ?: [NSNull null],
    self.fadeWhenFacingNorth ?: [NSNull null],
    self.clickable ?: [NSNull null],
    self.image ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSAttributionSettings
+ (instancetype)makeWithIconColor:(nullable NSNumber *)iconColor
    position:(nullable FLT_SETTINGSOrnamentPositionBox *)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    clickable:(nullable NSNumber *)clickable {
  FLT_SETTINGSAttributionSettings* pigeonResult = [[FLT_SETTINGSAttributionSettings alloc] init];
  pigeonResult.iconColor = iconColor;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.clickable = clickable;
  return pigeonResult;
}
+ (FLT_SETTINGSAttributionSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSAttributionSettings *pigeonResult = [[FLT_SETTINGSAttributionSettings alloc] init];
  pigeonResult.iconColor = GetNullableObjectAtIndex(list, 0);
  NSNumber *positionAsNumber = GetNullableObjectAtIndex(list, 1);
  FLT_SETTINGSOrnamentPositionBox *position = positionAsNumber == nil ? nil : [[FLT_SETTINGSOrnamentPositionBox alloc] initWithValue:[positionAsNumber integerValue]];
  pigeonResult.position = position;
  pigeonResult.marginLeft = GetNullableObjectAtIndex(list, 2);
  pigeonResult.marginTop = GetNullableObjectAtIndex(list, 3);
  pigeonResult.marginRight = GetNullableObjectAtIndex(list, 4);
  pigeonResult.marginBottom = GetNullableObjectAtIndex(list, 5);
  pigeonResult.clickable = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSAttributionSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSAttributionSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.iconColor ?: [NSNull null],
    (self.position == nil ? [NSNull null] : [NSNumber numberWithInteger:self.position.value]),
    self.marginLeft ?: [NSNull null],
    self.marginTop ?: [NSNull null],
    self.marginRight ?: [NSNull null],
    self.marginBottom ?: [NSNull null],
    self.clickable ?: [NSNull null],
  ];
}
@end

@implementation FLT_SETTINGSLogoSettings
+ (instancetype)makeWithPosition:(nullable FLT_SETTINGSOrnamentPositionBox *)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom {
  FLT_SETTINGSLogoSettings* pigeonResult = [[FLT_SETTINGSLogoSettings alloc] init];
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  return pigeonResult;
}
+ (FLT_SETTINGSLogoSettings *)fromList:(NSArray *)list {
  FLT_SETTINGSLogoSettings *pigeonResult = [[FLT_SETTINGSLogoSettings alloc] init];
  NSNumber *positionAsNumber = GetNullableObjectAtIndex(list, 0);
  FLT_SETTINGSOrnamentPositionBox *position = positionAsNumber == nil ? nil : [[FLT_SETTINGSOrnamentPositionBox alloc] initWithValue:[positionAsNumber integerValue]];
  pigeonResult.position = position;
  pigeonResult.marginLeft = GetNullableObjectAtIndex(list, 1);
  pigeonResult.marginTop = GetNullableObjectAtIndex(list, 2);
  pigeonResult.marginRight = GetNullableObjectAtIndex(list, 3);
  pigeonResult.marginBottom = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLogoSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_SETTINGSLogoSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.position == nil ? [NSNull null] : [NSNumber numberWithInteger:self.position.value]),
    self.marginLeft ?: [NSNull null],
    self.marginTop ?: [NSNull null],
    self.marginRight ?: [NSNull null],
    self.marginBottom ?: [NSNull null],
  ];
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSGesturesSettings fromList:[self readValue]];
    case 129: 
      return [FLT_SETTINGSScreenCoordinate fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSGesturesSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLT_SETTINGSScreenCoordinate class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSGesturesSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSGesturesSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSGesturesSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGSGesturesSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSGesturesSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.GesturesSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSGesturesSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSGesturesSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSGesturesSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.GesturesSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSGesturesSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSGesturesSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSGesturesSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSLocationComponentSettings fromList:[self readValue]];
    case 129: 
      return [FLT_SETTINGSLocationPuck fromList:[self readValue]];
    case 130: 
      return [FLT_SETTINGSLocationPuck2D fromList:[self readValue]];
    case 131: 
      return [FLT_SETTINGSLocationPuck3D fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGS_LocationComponentSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGS_LocationComponentSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSLocationComponentSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLT_SETTINGSLocationPuck class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLT_SETTINGSLocationPuck2D class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLT_SETTINGSLocationPuck3D class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGS_LocationComponentSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGS_LocationComponentSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGS_LocationComponentSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGS_LocationComponentSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGS_LocationComponentSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._LocationComponentSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGS_LocationComponentSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGS_LocationComponentSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSLocationComponentSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._LocationComponentSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGS_LocationComponentSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:useDefaultPuck2DIfNeeded:error:)], @"FLT_SETTINGS_LocationComponentSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:useDefaultPuck2DIfNeeded:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSLocationComponentSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        BOOL arg_useDefaultPuck2DIfNeeded = [GetNullableObjectAtIndex(args, 1) boolValue];
        FlutterError *error;
        [api updateSettingsSettings:arg_settings useDefaultPuck2DIfNeeded:arg_useDefaultPuck2DIfNeeded error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSScaleBarSettings fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSScaleBarSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSScaleBarSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSScaleBarSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGSScaleBarSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSScaleBarSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.ScaleBarSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSScaleBarSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSScaleBarSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSScaleBarSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.ScaleBarSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSScaleBarSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSScaleBarSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSScaleBarSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSCompassSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSCompassSettings fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGSCompassSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSCompassSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSCompassSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSCompassSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSCompassSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGSCompassSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSCompassSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.CompassSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSCompassSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSCompassSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSCompassSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.CompassSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSCompassSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSCompassSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSCompassSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSAttributionSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSAttributionSettings fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGSAttributionSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSAttributionSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSAttributionSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSAttributionSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSAttributionSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGSAttributionSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSAttributionSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.AttributionSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSAttributionSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSAttributionSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSAttributionSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.AttributionSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSAttributionSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSAttributionSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSAttributionSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSLogoSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_SETTINGSLogoSettings fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SETTINGSLogoSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_SETTINGSLogoSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSLogoSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSLogoSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSLogoSettingsInterfaceGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SETTINGSLogoSettingsInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSLogoSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.LogoSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLogoSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSLogoSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSLogoSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.LogoSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLogoSettingsInterfaceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSLogoSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSLogoSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
