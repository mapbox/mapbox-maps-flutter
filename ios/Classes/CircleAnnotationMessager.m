// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "CircleAnnotationMessager.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTCircleAnnotation ()
+ (FLTCircleAnnotation *)fromMap:(NSDictionary *)dict;
+ (nullable FLTCircleAnnotation *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTCircleAnnotationOptions ()
+ (FLTCircleAnnotationOptions *)fromMap:(NSDictionary *)dict;
+ (nullable FLTCircleAnnotationOptions *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTCircleAnnotation
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry
    circleSortKey:(nullable NSNumber *)circleSortKey
    circleBlur:(nullable NSNumber *)circleBlur
    circleColor:(nullable NSNumber *)circleColor
    circleOpacity:(nullable NSNumber *)circleOpacity
    circleRadius:(nullable NSNumber *)circleRadius
    circleStrokeColor:(nullable NSNumber *)circleStrokeColor
    circleStrokeOpacity:(nullable NSNumber *)circleStrokeOpacity
    circleStrokeWidth:(nullable NSNumber *)circleStrokeWidth
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTCircleAnnotation* pigeonResult = [[FLTCircleAnnotation alloc] init];
  pigeonResult.id = id;
  pigeonResult.geometry = geometry;
  pigeonResult.circleSortKey = circleSortKey;
  pigeonResult.circleBlur = circleBlur;
  pigeonResult.circleColor = circleColor;
  pigeonResult.circleOpacity = circleOpacity;
  pigeonResult.circleRadius = circleRadius;
  pigeonResult.circleStrokeColor = circleStrokeColor;
  pigeonResult.circleStrokeOpacity = circleStrokeOpacity;
  pigeonResult.circleStrokeWidth = circleStrokeWidth;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTCircleAnnotation *)fromMap:(NSDictionary *)dict {
  FLTCircleAnnotation *pigeonResult = [[FLTCircleAnnotation alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  pigeonResult.circleSortKey = GetNullableObject(dict, @"circleSortKey");
  pigeonResult.circleBlur = GetNullableObject(dict, @"circleBlur");
  pigeonResult.circleColor = GetNullableObject(dict, @"circleColor");
  pigeonResult.circleOpacity = GetNullableObject(dict, @"circleOpacity");
  pigeonResult.circleRadius = GetNullableObject(dict, @"circleRadius");
  pigeonResult.circleStrokeColor = GetNullableObject(dict, @"circleStrokeColor");
  pigeonResult.circleStrokeOpacity = GetNullableObject(dict, @"circleStrokeOpacity");
  pigeonResult.circleStrokeWidth = GetNullableObject(dict, @"circleStrokeWidth");
  pigeonResult.userInfo = GetNullableObject(dict, @"userInfo");
  return pigeonResult;
}
+ (nullable FLTCircleAnnotation *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTCircleAnnotation fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"geometry" : (self.geometry ?: [NSNull null]),
    @"circleSortKey" : (self.circleSortKey ?: [NSNull null]),
    @"circleBlur" : (self.circleBlur ?: [NSNull null]),
    @"circleColor" : (self.circleColor ?: [NSNull null]),
    @"circleOpacity" : (self.circleOpacity ?: [NSNull null]),
    @"circleRadius" : (self.circleRadius ?: [NSNull null]),
    @"circleStrokeColor" : (self.circleStrokeColor ?: [NSNull null]),
    @"circleStrokeOpacity" : (self.circleStrokeOpacity ?: [NSNull null]),
    @"circleStrokeWidth" : (self.circleStrokeWidth ?: [NSNull null]),
    @"userInfo" : (self.userInfo ?: [NSNull null]),
  };
}
@end

@implementation FLTCircleAnnotationOptions
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry
    circleSortKey:(nullable NSNumber *)circleSortKey
    circleBlur:(nullable NSNumber *)circleBlur
    circleColor:(nullable NSNumber *)circleColor
    circleOpacity:(nullable NSNumber *)circleOpacity
    circleRadius:(nullable NSNumber *)circleRadius
    circleStrokeColor:(nullable NSNumber *)circleStrokeColor
    circleStrokeOpacity:(nullable NSNumber *)circleStrokeOpacity
    circleStrokeWidth:(nullable NSNumber *)circleStrokeWidth
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTCircleAnnotationOptions* pigeonResult = [[FLTCircleAnnotationOptions alloc] init];
  pigeonResult.geometry = geometry;
  pigeonResult.circleSortKey = circleSortKey;
  pigeonResult.circleBlur = circleBlur;
  pigeonResult.circleColor = circleColor;
  pigeonResult.circleOpacity = circleOpacity;
  pigeonResult.circleRadius = circleRadius;
  pigeonResult.circleStrokeColor = circleStrokeColor;
  pigeonResult.circleStrokeOpacity = circleStrokeOpacity;
  pigeonResult.circleStrokeWidth = circleStrokeWidth;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTCircleAnnotationOptions *)fromMap:(NSDictionary *)dict {
  FLTCircleAnnotationOptions *pigeonResult = [[FLTCircleAnnotationOptions alloc] init];
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  pigeonResult.circleSortKey = GetNullableObject(dict, @"circleSortKey");
  pigeonResult.circleBlur = GetNullableObject(dict, @"circleBlur");
  pigeonResult.circleColor = GetNullableObject(dict, @"circleColor");
  pigeonResult.circleOpacity = GetNullableObject(dict, @"circleOpacity");
  pigeonResult.circleRadius = GetNullableObject(dict, @"circleRadius");
  pigeonResult.circleStrokeColor = GetNullableObject(dict, @"circleStrokeColor");
  pigeonResult.circleStrokeOpacity = GetNullableObject(dict, @"circleStrokeOpacity");
  pigeonResult.circleStrokeWidth = GetNullableObject(dict, @"circleStrokeWidth");
  pigeonResult.userInfo = GetNullableObject(dict, @"userInfo");
  return pigeonResult;
}
+ (nullable FLTCircleAnnotationOptions *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTCircleAnnotationOptions fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"geometry" : (self.geometry ?: [NSNull null]),
    @"circleSortKey" : (self.circleSortKey ?: [NSNull null]),
    @"circleBlur" : (self.circleBlur ?: [NSNull null]),
    @"circleColor" : (self.circleColor ?: [NSNull null]),
    @"circleOpacity" : (self.circleOpacity ?: [NSNull null]),
    @"circleRadius" : (self.circleRadius ?: [NSNull null]),
    @"circleStrokeColor" : (self.circleStrokeColor ?: [NSNull null]),
    @"circleStrokeOpacity" : (self.circleStrokeOpacity ?: [NSNull null]),
    @"circleStrokeWidth" : (self.circleStrokeWidth ?: [NSNull null]),
    @"userInfo" : (self.userInfo ?: [NSNull null]),
  };
}
@end

@interface FLTOnCircleAnnotationClickListenerCodecReader : FlutterStandardReader
@end
@implementation FLTOnCircleAnnotationClickListenerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTCircleAnnotation fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTOnCircleAnnotationClickListenerCodecWriter : FlutterStandardWriter
@end
@implementation FLTOnCircleAnnotationClickListenerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTCircleAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTOnCircleAnnotationClickListenerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOnCircleAnnotationClickListenerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOnCircleAnnotationClickListenerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOnCircleAnnotationClickListenerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOnCircleAnnotationClickListenerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTOnCircleAnnotationClickListenerCodecReaderWriter *readerWriter = [[FLTOnCircleAnnotationClickListenerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTOnCircleAnnotationClickListener ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnCircleAnnotationClickListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onCircleAnnotationClickAnnotation:(FLTCircleAnnotation *)arg_annotation completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OnCircleAnnotationClickListener.onCircleAnnotationClick"
      binaryMessenger:self.binaryMessenger
      codec:FLTOnCircleAnnotationClickListenerGetCodec()];
  [channel sendMessage:@[arg_annotation ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface FLT_CircleAnnotationMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_CircleAnnotationMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTCircleAnnotation fromMap:[self readValue]];
    
    case 129:     
      return [FLTCircleAnnotationOptions fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_CircleAnnotationMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_CircleAnnotationMessagerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTCircleAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTCircleAnnotationOptions class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_CircleAnnotationMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_CircleAnnotationMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_CircleAnnotationMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_CircleAnnotationMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_CircleAnnotationMessagerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_CircleAnnotationMessagerCodecReaderWriter *readerWriter = [[FLT_CircleAnnotationMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_CircleAnnotationMessagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_CircleAnnotationMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createManagerId:annotationOption:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(createManagerId:annotationOption:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCircleAnnotationOptions *arg_annotationOption = GetNullableObjectAtIndex(args, 1);
        [api createManagerId:arg_managerId annotationOption:arg_annotationOption completion:^(FLTCircleAnnotation *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.createMulti"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMultiManagerId:annotationOptions:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(createMultiManagerId:annotationOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<FLTCircleAnnotationOptions *> *arg_annotationOptions = GetNullableObjectAtIndex(args, 1);
        [api createMultiManagerId:arg_managerId annotationOptions:arg_annotationOptions completion:^(NSArray<FLTCircleAnnotation *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.update"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateManagerId:annotation:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(updateManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCircleAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api updateManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.delete"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteManagerId:annotation:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(deleteManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCircleAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api deleteManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.deleteAll"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteAllManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(deleteAllManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api deleteAllManagerId:arg_managerId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    {
      FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc]
          initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.getAnnotations"
          binaryMessenger:binaryMessenger
          codec:FLT_CircleAnnotationMessagerGetCodec()        ];
      if (api) {
        NSCAssert([api respondsToSelector:@selector(getAnnotationsManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(getAnnotationsManagerId:completion:)", api);
        [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
          [api getAnnotationsManagerId:arg_managerId completion:^(NSArray<FLTCircleAnnotation *> *_Nullable output, FlutterError *_Nullable error) {
            callback(wrapResult(output, error));
          }];
        }];
      }
      else {
        [channel setMessageHandler:nil];
      }
    }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.setCirclePitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCirclePitchAlignmentManagerId:circlePitchAlignment:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(setCirclePitchAlignmentManagerId:circlePitchAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCirclePitchAlignment arg_circlePitchAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setCirclePitchAlignmentManagerId:arg_managerId circlePitchAlignment:arg_circlePitchAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.getCirclePitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCirclePitchAlignmentManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(getCirclePitchAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getCirclePitchAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.setCirclePitchScale"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCirclePitchScaleManagerId:circlePitchScale:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(setCirclePitchScaleManagerId:circlePitchScale:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCirclePitchScale arg_circlePitchScale = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setCirclePitchScaleManagerId:arg_managerId circlePitchScale:arg_circlePitchScale completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.getCirclePitchScale"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCirclePitchScaleManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(getCirclePitchScaleManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getCirclePitchScaleManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.setCircleTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCircleTranslateManagerId:circleTranslate:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(setCircleTranslateManagerId:circleTranslate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_circleTranslate = GetNullableObjectAtIndex(args, 1);
        [api setCircleTranslateManagerId:arg_managerId circleTranslate:arg_circleTranslate completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.getCircleTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCircleTranslateManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(getCircleTranslateManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getCircleTranslateManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.setCircleTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCircleTranslateAnchorManagerId:circleTranslateAnchor:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(setCircleTranslateAnchorManagerId:circleTranslateAnchor:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTCircleTranslateAnchor arg_circleTranslateAnchor = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setCircleTranslateAnchorManagerId:arg_managerId circleTranslateAnchor:arg_circleTranslateAnchor completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._CircleAnnotationMessager.getCircleTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_CircleAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCircleTranslateAnchorManagerId:completion:)], @"FLT_CircleAnnotationMessager api (%@) doesn't respond to @selector(getCircleTranslateAnchorManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getCircleTranslateAnchorManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
