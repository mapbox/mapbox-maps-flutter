// Autogenerated from Pigeon (v25.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import Turf

/// Error class for passing custom error details to Dart side.
final class GestureListenersError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "GestureListenersError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func createConnectionError(withChannelName channelName: String) -> GestureListenersError {
  return GestureListenersError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Enumeration of gesture states.
enum GestureState: Int {
  /// Gesture has started.
  case started = 0
  /// Gesture is in progress.
  case changed = 1
  /// Gesture has ended.
  case ended = 2
}

/// A structure that defines additional information about map content gesture.
///
/// Generated class from Pigeon that represents data sent in messages.
struct MapContentGestureContext {
  /// The location of gesture in Map view bounds.
  var touchPosition: ScreenCoordinate
  /// Geographical coordinate of the map gesture.
  var point: Point
  /// The state of the gesture.
  var gestureState: GestureState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MapContentGestureContext? {
    let touchPosition = pigeonVar_list[0] as! ScreenCoordinate
    let point = pigeonVar_list[1] as! Point
    let gestureState = pigeonVar_list[2] as! GestureState

    return MapContentGestureContext(
      touchPosition: touchPosition,
      point: point,
      gestureState: gestureState
    )
  }
  func toList() -> [Any?] {
    return [
      touchPosition,
      point,
      gestureState,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol AnnotationInteractionContext {

}

/// Generated class from Pigeon that represents data sent in messages.
struct PointAnnotationInteractionContext: AnnotationInteractionContext {
  var annotation: PointAnnotation
  var gestureState: GestureState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PointAnnotationInteractionContext? {
    let annotation = pigeonVar_list[0] as! PointAnnotation
    let gestureState = pigeonVar_list[1] as! GestureState

    return PointAnnotationInteractionContext(
      annotation: annotation,
      gestureState: gestureState
    )
  }
  func toList() -> [Any?] {
    return [
      annotation,
      gestureState,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CircleAnnotationInteractionContext: AnnotationInteractionContext {
  var annotation: CircleAnnotation
  var gestureState: GestureState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CircleAnnotationInteractionContext? {
    let annotation = pigeonVar_list[0] as! CircleAnnotation
    let gestureState = pigeonVar_list[1] as! GestureState

    return CircleAnnotationInteractionContext(
      annotation: annotation,
      gestureState: gestureState
    )
  }
  func toList() -> [Any?] {
    return [
      annotation,
      gestureState,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolygonAnnotationInteractionContext: AnnotationInteractionContext {
  var annotation: PolygonAnnotation
  var gestureState: GestureState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PolygonAnnotationInteractionContext? {
    let annotation = pigeonVar_list[0] as! PolygonAnnotation
    let gestureState = pigeonVar_list[1] as! GestureState

    return PolygonAnnotationInteractionContext(
      annotation: annotation,
      gestureState: gestureState
    )
  }
  func toList() -> [Any?] {
    return [
      annotation,
      gestureState,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PolylineAnnotationInteractionContext: AnnotationInteractionContext {
  var annotation: PolylineAnnotation
  var gestureState: GestureState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PolylineAnnotationInteractionContext? {
    let annotation = pigeonVar_list[0] as! PolylineAnnotation
    let gestureState = pigeonVar_list[1] as! GestureState

    return PolylineAnnotationInteractionContext(
      annotation: annotation,
      gestureState: gestureState
    )
  }
  func toList() -> [Any?] {
    return [
      annotation,
      gestureState,
    ]
  }
}

private class GestureListenersPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return GestureState(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return Point.fromList(self.readValue() as! [Any?])
    case 131:
      return Polygon.fromList(self.readValue() as! [Any?])
    case 132:
      return LineString.fromList(self.readValue() as! [Any?])
    case 133:
      return ScreenCoordinate.fromList(self.readValue() as! [Any?])
    case 134:
      return MapContentGestureContext.fromList(self.readValue() as! [Any?])
    case 135:
      return PointAnnotation.fromList(self.readValue() as! [Any?])
    case 136:
      return CircleAnnotation.fromList(self.readValue() as! [Any?])
    case 137:
      return PolygonAnnotation.fromList(self.readValue() as! [Any?])
    case 138:
      return PolylineAnnotation.fromList(self.readValue() as! [Any?])
    case 139:
      return PointAnnotationInteractionContext.fromList(self.readValue() as! [Any?])
    case 140:
      return CircleAnnotationInteractionContext.fromList(self.readValue() as! [Any?])
    case 141:
      return PolygonAnnotationInteractionContext.fromList(self.readValue() as! [Any?])
    case 142:
      return PolylineAnnotationInteractionContext.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class GestureListenersPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? GestureState {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? Point {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Polygon {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? LineString {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenCoordinate {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? MapContentGestureContext {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PointAnnotation {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? CircleAnnotation {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? PolygonAnnotation {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotation {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? PointAnnotationInteractionContext {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? CircleAnnotationInteractionContext {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? PolygonAnnotationInteractionContext {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? PolylineAnnotationInteractionContext {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class GestureListenersPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GestureListenersPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GestureListenersPigeonCodecWriter(data: data)
  }
}

class GestureListenersPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = GestureListenersPigeonCodec(readerWriter: GestureListenersPigeonCodecReaderWriter())
}

var gestureListenersPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: GestureListenersPigeonCodecReaderWriter());

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol GestureListenerProtocol {
  func onTap(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void)
  func onLongTap(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void)
  func onScroll(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void)
  func onZoom(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void)
}
class GestureListener: GestureListenerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: GestureListenersPigeonCodec {
    return GestureListenersPigeonCodec.shared
  }
  func onTap(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onTap\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([contextArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onLongTap(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onLongTap\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([contextArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onScroll(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onScroll\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([contextArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onZoom(context contextArg: MapContentGestureContext, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.GestureListener.onZoom\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([contextArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}

private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class AnnotationDragEventsStreamHandler: PigeonEventChannelWrapper<AnnotationInteractionContext> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: AnnotationDragEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.mapbox_maps_flutter.AnnotationInteractions._annotationDragEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<AnnotationInteractionContext>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: gestureListenersPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}

